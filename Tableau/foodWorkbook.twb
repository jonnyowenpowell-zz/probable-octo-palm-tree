<?xml version='1.0' encoding='utf-8' ?>

<!-- build 10400.17.1103.1137                               -->
<workbook source-build='10.4.1 (10400.17.1103.1137)' source-platform='win' version='10.4' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='FoodTypeVSCause' inline='true' name='federated.06jweit1wnedaq1emelrk1ym4ejy' version='10.4'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='FoodTypeVSCause' name='semistructpassivestore-direct.1rydmvz01z54n2188orjn05lraro'>
            <connection class='semistructpassivestore-direct' directory='C:/Users/Stewart/Documents/GitHub/probable-octo-palm-tree/FileHandling' filename='FoodTypeVSCause.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[FoodTypeVSCause.json]'>
                  <map key='results' value='true' />
                  <map key='results.Value' value='true' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='semistructpassivestore-direct.1rydmvz01z54n2188orjn05lraro' name='FoodTypeVSCause.json' table='[FoodTypeVSCause.json]' type='table' />
        <cols>
          <map key='[Document Index (generated)]' value='[FoodTypeVSCause.json].[Document Index (generated)]' />
          <map key='[address_1]' value='[FoodTypeVSCause.json].[results.Value.address_1]' />
          <map key='[address_2]' value='[FoodTypeVSCause.json].[results.Value.address_2]' />
          <map key='[center_classification_date]' value='[FoodTypeVSCause.json].[results.Value.center_classification_date]' />
          <map key='[city]' value='[FoodTypeVSCause.json].[results.Value.city]' />
          <map key='[classification]' value='[FoodTypeVSCause.json].[results.Value.classification]' />
          <map key='[code_info]' value='[FoodTypeVSCause.json].[results.Value.code_info]' />
          <map key='[country]' value='[FoodTypeVSCause.json].[results.Value.country]' />
          <map key='[distribution_pattern]' value='[FoodTypeVSCause.json].[results.Value.distribution_pattern]' />
          <map key='[event_id]' value='[FoodTypeVSCause.json].[results.Value.event_id]' />
          <map key='[general_food]' value='[FoodTypeVSCause.json].[results.Value.general_food]' />
          <map key='[initial_firm_notification]' value='[FoodTypeVSCause.json].[results.Value.initial_firm_notification]' />
          <map key='[more_code_info]' value='[FoodTypeVSCause.json].[results.Value.more_code_info]' />
          <map key='[postal_code]' value='[FoodTypeVSCause.json].[results.Value.postal_code]' />
          <map key='[product_description]' value='[FoodTypeVSCause.json].[results.Value.product_description]' />
          <map key='[product_quantity]' value='[FoodTypeVSCause.json].[results.Value.product_quantity]' />
          <map key='[product_type]' value='[FoodTypeVSCause.json].[results.Value.product_type]' />
          <map key='[reason]' value='[FoodTypeVSCause.json].[results.Value.reason]' />
          <map key='[reason_for_recall]' value='[FoodTypeVSCause.json].[results.Value.reason_for_recall]' />
          <map key='[recall_initiation_date]' value='[FoodTypeVSCause.json].[results.Value.recall_initiation_date]' />
          <map key='[recall_number]' value='[FoodTypeVSCause.json].[results.Value.recall_number]' />
          <map key='[recalling_firm]' value='[FoodTypeVSCause.json].[results.Value.recalling_firm]' />
          <map key='[report_date]' value='[FoodTypeVSCause.json].[results.Value.report_date]' />
          <map key='[results Index (generated)]' value='[FoodTypeVSCause.json].[results.Index (generated)]' />
          <map key='[specific_food]' value='[FoodTypeVSCause.json].[results.Value.specific_food]' />
          <map key='[specific_reason]' value='[FoodTypeVSCause.json].[results.Value.specific_reason]' />
          <map key='[state]' value='[FoodTypeVSCause.json].[results.Value.state]' />
          <map key='[status]' value='[FoodTypeVSCause.json].[results.Value.status]' />
          <map key='[termination_date]' value='[FoodTypeVSCause.json].[results.Value.termination_date]' />
          <map key='[voluntary_mandated]' value='[FoodTypeVSCause.json].[results.Value.voluntary_mandated]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[results Index (generated)]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.address_1</remote-name>
            <remote-type>130</remote-type>
            <local-name>[address_1]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.address_1</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.address_2</remote-name>
            <remote-type>130</remote-type>
            <local-name>[address_2]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.address_2</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.center_classification_date</remote-name>
            <remote-type>130</remote-type>
            <local-name>[center_classification_date]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.center_classification_date</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.city</remote-name>
            <remote-type>130</remote-type>
            <local-name>[city]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.city</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.classification</remote-name>
            <remote-type>130</remote-type>
            <local-name>[classification]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.classification</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.code_info</remote-name>
            <remote-type>130</remote-type>
            <local-name>[code_info]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.code_info</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[country]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.country</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.distribution_pattern</remote-name>
            <remote-type>130</remote-type>
            <local-name>[distribution_pattern]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.distribution_pattern</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.event_id</remote-name>
            <remote-type>130</remote-type>
            <local-name>[event_id]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.event_id</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.general_food</remote-name>
            <remote-type>130</remote-type>
            <local-name>[general_food]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.general_food</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.initial_firm_notification</remote-name>
            <remote-type>130</remote-type>
            <local-name>[initial_firm_notification]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.initial_firm_notification</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.more_code_info</remote-name>
            <remote-type>130</remote-type>
            <local-name>[more_code_info]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.more_code_info</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.postal_code</remote-name>
            <remote-type>130</remote-type>
            <local-name>[postal_code]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.postal_code</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.product_description</remote-name>
            <remote-type>130</remote-type>
            <local-name>[product_description]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.product_description</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.product_quantity</remote-name>
            <remote-type>130</remote-type>
            <local-name>[product_quantity]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.product_quantity</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.product_type</remote-name>
            <remote-type>130</remote-type>
            <local-name>[product_type]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.product_type</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.reason</remote-name>
            <remote-type>130</remote-type>
            <local-name>[reason]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.reason</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.reason_for_recall</remote-name>
            <remote-type>130</remote-type>
            <local-name>[reason_for_recall]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.reason_for_recall</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.recall_initiation_date</remote-name>
            <remote-type>130</remote-type>
            <local-name>[recall_initiation_date]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.recall_initiation_date</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.recall_number</remote-name>
            <remote-type>130</remote-type>
            <local-name>[recall_number]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.recall_number</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.recalling_firm</remote-name>
            <remote-type>130</remote-type>
            <local-name>[recalling_firm]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.recalling_firm</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.report_date</remote-name>
            <remote-type>130</remote-type>
            <local-name>[report_date]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.report_date</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.specific_food</remote-name>
            <remote-type>130</remote-type>
            <local-name>[specific_food]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.specific_food</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.specific_reason</remote-name>
            <remote-type>130</remote-type>
            <local-name>[specific_reason]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.specific_reason</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.state</remote-name>
            <remote-type>130</remote-type>
            <local-name>[state]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.state</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.status</remote-name>
            <remote-type>130</remote-type>
            <local-name>[status]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.status</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.termination_date</remote-name>
            <remote-type>130</remote-type>
            <local-name>[termination_date]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.termination_date</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.voluntary_mandated</remote-name>
            <remote-type>130</remote-type>
            <local-name>[voluntary_mandated]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.voluntary_mandated</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per FoodTypeVSCause.json]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at FoodTypeVSCause.json level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per results]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([results Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at results level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Address 1' datatype='string' name='[address_1]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.address_1</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Address 2' datatype='string' name='[address_2]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.address_2</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Center Classification Date' datatype='string' name='[center_classification_date]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.center_classification_date</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='City' datatype='string' name='[city]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.city</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Classification' datatype='string' name='[classification]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.classification</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Code Info' datatype='string' name='[code_info]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.code_info</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.country</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Distribution Pattern' datatype='string' name='[distribution_pattern]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.distribution_pattern</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Event Id' datatype='string' name='[event_id]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.event_id</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='General Food' datatype='string' name='[general_food]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.general_food</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Initial Firm Notification' datatype='string' name='[initial_firm_notification]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.initial_firm_notification</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='More Code Info' datatype='string' name='[more_code_info]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.more_code_info</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Postal Code' datatype='string' name='[postal_code]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.postal_code</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Product Description' datatype='string' name='[product_description]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.product_description</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Product Quantity' datatype='string' name='[product_quantity]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.product_quantity</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Product Type' datatype='string' name='[product_type]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.product_type</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Reason' datatype='string' name='[reason]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.reason</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Reason For Recall' datatype='string' name='[reason_for_recall]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.reason_for_recall</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Recall Initiation Date' datatype='string' name='[recall_initiation_date]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.recall_initiation_date</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Recall Number' datatype='string' name='[recall_number]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.recall_number</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Recalling Firm' datatype='string' name='[recalling_firm]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.recalling_firm</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Report Date' datatype='string' name='[report_date]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.report_date</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[results Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>results.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Specific Food' datatype='string' name='[specific_food]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.specific_food</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Specific Reason' datatype='string' name='[specific_reason]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.specific_reason</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='State' datatype='string' name='[state]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.state</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.status</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Termination Date' datatype='string' name='[termination_date]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.termination_date</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Voluntary Mandated' datatype='string' name='[voluntary_mandated]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.voluntary_mandated</run>
          </formatted-text>
        </desc>
      </column>
      <folder name='Food Type VS Cause' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
      </folder>
      <folder name='Results' role='dimensions'>
        <folder-item name='[address_1]' type='field' />
        <folder-item name='[address_2]' type='field' />
        <folder-item name='[center_classification_date]' type='field' />
        <folder-item name='[city]' type='field' />
        <folder-item name='[classification]' type='field' />
        <folder-item name='[code_info]' type='field' />
        <folder-item name='[country]' type='field' />
        <folder-item name='[distribution_pattern]' type='field' />
        <folder-item name='[event_id]' type='field' />
        <folder-item name='[general_food]' type='field' />
        <folder-item name='[initial_firm_notification]' type='field' />
        <folder-item name='[more_code_info]' type='field' />
        <folder-item name='[postal_code]' type='field' />
        <folder-item name='[product_description]' type='field' />
        <folder-item name='[product_quantity]' type='field' />
        <folder-item name='[product_type]' type='field' />
        <folder-item name='[reason]' type='field' />
        <folder-item name='[reason_for_recall]' type='field' />
        <folder-item name='[recall_initiation_date]' type='field' />
        <folder-item name='[recall_number]' type='field' />
        <folder-item name='[recalling_firm]' type='field' />
        <folder-item name='[report_date]' type='field' />
        <folder-item name='[results Index (generated)]' type='field' />
        <folder-item name='[specific_food]' type='field' />
        <folder-item name='[specific_reason]' type='field' />
        <folder-item name='[state]' type='field' />
        <folder-item name='[status]' type='field' />
        <folder-item name='[termination_date]' type='field' />
        <folder-item name='[voluntary_mandated]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.699284' measure-ordering='alphabetic' measure-percentage='0.300716' show-structure='false' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Reino Unido&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
    </datasource>
    <datasource caption='food-enforcement_ProcessedData' inline='true' name='federated.0aod3ah1xoffqa1azx3491fdo1jb' version='10.4'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='food-enforcement_ProcessedData' name='semistructpassivestore-direct.1vktxt21jxk4ah1epbioc1eedhxg'>
            <connection class='semistructpassivestore-direct' directory='C:/Users/Stewart/Documents/GitHub/probable-octo-palm-tree/FileHandling' filename='food-enforcement_ProcessedData.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[food-enforcement_ProcessedData.json]'>
                  <map key='results' value='true' />
                  <map key='results.Value' value='true' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='semistructpassivestore-direct.1vktxt21jxk4ah1epbioc1eedhxg' name='food-enforcement_ProcessedData.json' table='[food-enforcement_ProcessedData.json]' type='table' />
        <cols>
          <map key='[Document Index (generated)]' value='[food-enforcement_ProcessedData.json].[Document Index (generated)]' />
          <map key='[address_1]' value='[food-enforcement_ProcessedData.json].[results.Value.address_1]' />
          <map key='[address_2]' value='[food-enforcement_ProcessedData.json].[results.Value.address_2]' />
          <map key='[center_classification_date]' value='[food-enforcement_ProcessedData.json].[results.Value.center_classification_date]' />
          <map key='[city]' value='[food-enforcement_ProcessedData.json].[results.Value.city]' />
          <map key='[classification]' value='[food-enforcement_ProcessedData.json].[results.Value.classification]' />
          <map key='[code_info]' value='[food-enforcement_ProcessedData.json].[results.Value.code_info]' />
          <map key='[country]' value='[food-enforcement_ProcessedData.json].[results.Value.country]' />
          <map key='[distribution_pattern]' value='[food-enforcement_ProcessedData.json].[results.Value.distribution_pattern]' />
          <map key='[event_id]' value='[food-enforcement_ProcessedData.json].[results.Value.event_id]' />
          <map key='[initial_firm_notification]' value='[food-enforcement_ProcessedData.json].[results.Value.initial_firm_notification]' />
          <map key='[more_code_info]' value='[food-enforcement_ProcessedData.json].[results.Value.more_code_info]' />
          <map key='[postal_code]' value='[food-enforcement_ProcessedData.json].[results.Value.postal_code]' />
          <map key='[product_description]' value='[food-enforcement_ProcessedData.json].[results.Value.product_description]' />
          <map key='[product_quantity]' value='[food-enforcement_ProcessedData.json].[results.Value.product_quantity]' />
          <map key='[product_type]' value='[food-enforcement_ProcessedData.json].[results.Value.product_type]' />
          <map key='[reason_for_recall]' value='[food-enforcement_ProcessedData.json].[results.Value.reason_for_recall]' />
          <map key='[recall_initiation_date]' value='[food-enforcement_ProcessedData.json].[results.Value.recall_initiation_date]' />
          <map key='[recall_number]' value='[food-enforcement_ProcessedData.json].[results.Value.recall_number]' />
          <map key='[recalling_firm]' value='[food-enforcement_ProcessedData.json].[results.Value.recalling_firm]' />
          <map key='[report_date]' value='[food-enforcement_ProcessedData.json].[results.Value.report_date]' />
          <map key='[results Index (generated)]' value='[food-enforcement_ProcessedData.json].[results.Index (generated)]' />
          <map key='[state]' value='[food-enforcement_ProcessedData.json].[results.Value.state]' />
          <map key='[status]' value='[food-enforcement_ProcessedData.json].[results.Value.status]' />
          <map key='[termination_date]' value='[food-enforcement_ProcessedData.json].[results.Value.termination_date]' />
          <map key='[voluntary_mandated]' value='[food-enforcement_ProcessedData.json].[results.Value.voluntary_mandated]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[results Index (generated)]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.address_1</remote-name>
            <remote-type>130</remote-type>
            <local-name>[address_1]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.address_1</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.address_2</remote-name>
            <remote-type>130</remote-type>
            <local-name>[address_2]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.address_2</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.center_classification_date</remote-name>
            <remote-type>130</remote-type>
            <local-name>[center_classification_date]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.center_classification_date</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.city</remote-name>
            <remote-type>130</remote-type>
            <local-name>[city]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.city</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.classification</remote-name>
            <remote-type>130</remote-type>
            <local-name>[classification]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.classification</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.code_info</remote-name>
            <remote-type>130</remote-type>
            <local-name>[code_info]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.code_info</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[country]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.country</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.distribution_pattern</remote-name>
            <remote-type>130</remote-type>
            <local-name>[distribution_pattern]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.distribution_pattern</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.event_id</remote-name>
            <remote-type>130</remote-type>
            <local-name>[event_id]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.event_id</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.initial_firm_notification</remote-name>
            <remote-type>130</remote-type>
            <local-name>[initial_firm_notification]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.initial_firm_notification</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.more_code_info</remote-name>
            <remote-type>130</remote-type>
            <local-name>[more_code_info]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.more_code_info</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.postal_code</remote-name>
            <remote-type>130</remote-type>
            <local-name>[postal_code]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.postal_code</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.product_description</remote-name>
            <remote-type>130</remote-type>
            <local-name>[product_description]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.product_description</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.product_quantity</remote-name>
            <remote-type>130</remote-type>
            <local-name>[product_quantity]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.product_quantity</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.product_type</remote-name>
            <remote-type>130</remote-type>
            <local-name>[product_type]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.product_type</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.reason_for_recall</remote-name>
            <remote-type>130</remote-type>
            <local-name>[reason_for_recall]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.reason_for_recall</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.recall_initiation_date</remote-name>
            <remote-type>130</remote-type>
            <local-name>[recall_initiation_date]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.recall_initiation_date</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.recall_number</remote-name>
            <remote-type>130</remote-type>
            <local-name>[recall_number]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.recall_number</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.recalling_firm</remote-name>
            <remote-type>130</remote-type>
            <local-name>[recalling_firm]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.recalling_firm</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.report_date</remote-name>
            <remote-type>130</remote-type>
            <local-name>[report_date]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.report_date</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.state</remote-name>
            <remote-type>130</remote-type>
            <local-name>[state]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.state</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.status</remote-name>
            <remote-type>130</remote-type>
            <local-name>[status]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.status</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.termination_date</remote-name>
            <remote-type>130</remote-type>
            <local-name>[termination_date]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.termination_date</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.voluntary_mandated</remote-name>
            <remote-type>130</remote-type>
            <local-name>[voluntary_mandated]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.voluntary_mandated</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per food-enforcement_ProcessedData.json]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at food-enforcement_ProcessedData.json level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per results]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([results Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at results level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Address 1' datatype='string' name='[address_1]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.address_1</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Address 2' datatype='string' name='[address_2]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.address_2</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Center Classification Date' datatype='string' name='[center_classification_date]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.center_classification_date</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='City' datatype='string' name='[city]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.city</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Classification' datatype='string' name='[classification]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.classification</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Code Info' datatype='string' name='[code_info]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.code_info</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.country</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Distribution Pattern' datatype='string' name='[distribution_pattern]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.distribution_pattern</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Event Id' datatype='string' name='[event_id]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.event_id</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Initial Firm Notification' datatype='string' name='[initial_firm_notification]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.initial_firm_notification</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='More Code Info' datatype='string' name='[more_code_info]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.more_code_info</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Postal Code' datatype='string' name='[postal_code]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.postal_code</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Product Description' datatype='string' name='[product_description]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.product_description</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Product Quantity' datatype='string' name='[product_quantity]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.product_quantity</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Product Type' datatype='string' name='[product_type]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.product_type</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Reason For Recall' datatype='string' name='[reason_for_recall]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.reason_for_recall</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Recall Initiation Date' datatype='string' name='[recall_initiation_date]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.recall_initiation_date</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Recall Number' datatype='string' name='[recall_number]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.recall_number</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Recalling Firm' datatype='string' name='[recalling_firm]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.recalling_firm</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Report Date' datatype='string' name='[report_date]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.report_date</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[results Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>results.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='State' datatype='string' name='[state]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.state</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.status</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Termination Date' datatype='string' name='[termination_date]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.termination_date</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Voluntary Mandated' datatype='string' name='[voluntary_mandated]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.voluntary_mandated</run>
          </formatted-text>
        </desc>
      </column>
      <folder name='Results' role='dimensions'>
        <folder-item name='[address_1]' type='field' />
        <folder-item name='[address_2]' type='field' />
        <folder-item name='[center_classification_date]' type='field' />
        <folder-item name='[city]' type='field' />
        <folder-item name='[classification]' type='field' />
        <folder-item name='[code_info]' type='field' />
        <folder-item name='[country]' type='field' />
        <folder-item name='[distribution_pattern]' type='field' />
        <folder-item name='[event_id]' type='field' />
        <folder-item name='[initial_firm_notification]' type='field' />
        <folder-item name='[more_code_info]' type='field' />
        <folder-item name='[postal_code]' type='field' />
        <folder-item name='[product_description]' type='field' />
        <folder-item name='[product_quantity]' type='field' />
        <folder-item name='[product_type]' type='field' />
        <folder-item name='[reason_for_recall]' type='field' />
        <folder-item name='[recall_initiation_date]' type='field' />
        <folder-item name='[recall_number]' type='field' />
        <folder-item name='[recalling_firm]' type='field' />
        <folder-item name='[report_date]' type='field' />
        <folder-item name='[results Index (generated)]' type='field' />
        <folder-item name='[state]' type='field' />
        <folder-item name='[status]' type='field' />
        <folder-item name='[termination_date]' type='field' />
        <folder-item name='[voluntary_mandated]' type='field' />
      </folder>
      <folder name='food-enforcement ProcessedData' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.699284' measure-ordering='alphabetic' measure-percentage='0.300716' show-structure='false' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Reino Unido&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
    </datasource>
    <datasource caption='Normalized Values By Farmland (Recall per State)' inline='true' name='federated.0vtwktr1bo1h7s1402gvq0xm989e' version='10.4'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Recall per State' name='excel-direct.0kl06qd1m7m3as15jmf910noraaj'>
            <connection class='excel-direct' cleaning='yes' compat='no' dataRefreshTime='' filename='C:/Users/Stewart/Documents/GitHub/probable-octo-palm-tree/Data/Recall per State.xlsx' interpretationMode='1' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <relation connection='excel-direct.0kl06qd1m7m3as15jmf910noraaj' name='Normalized Values By Farmland' table='[&apos;Normalized Values By Farmland$&apos;]' type='table'>
          <columns gridOrigin='A1:J51:no:A1:J51:1' header='yes' lost='0' outcome='1' processed='350'>
            <column datatype='integer' name='Rank' ordinal='0' />
            <column datatype='string' name='Country' ordinal='1' />
            <column datatype='string' name='F3' ordinal='2' />
            <column datatype='string' name='State' ordinal='3' />
            <column datatype='integer' name='Number' ordinal='4' />
            <column datatype='integer' name='Total acres' ordinal='5' />
            <column datatype='real' name='Farmland' ordinal='6' />
            <column datatype='integer' name='Avg. acres' ordinal='7' />
            <column datatype='integer' name='Number of Records' ordinal='8' />
            <column datatype='real' name='X recalls per acre' ordinal='9' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Rank</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Rank]</local-name>
            <parent-name>[Normalized Values By Farmland]</parent-name>
            <remote-alias>Rank</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[Normalized Values By Farmland]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RGB_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F3</remote-name>
            <remote-type>130</remote-type>
            <local-name>[F3]</local-name>
            <parent-name>[Normalized Values By Farmland]</parent-name>
            <remote-alias>F3</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RGB_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>State</remote-name>
            <remote-type>130</remote-type>
            <local-name>[State]</local-name>
            <parent-name>[Normalized Values By Farmland]</parent-name>
            <remote-alias>State</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RGB_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Number</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Number]</local-name>
            <parent-name>[Normalized Values By Farmland]</parent-name>
            <remote-alias>Number</remote-alias>
            <ordinal>4</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Total acres</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Total acres]</local-name>
            <parent-name>[Normalized Values By Farmland]</parent-name>
            <remote-alias>Total acres</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Farmland</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Farmland]</local-name>
            <parent-name>[Normalized Values By Farmland]</parent-name>
            <remote-alias>Farmland</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Avg. acres</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Avg. acres]</local-name>
            <parent-name>[Normalized Values By Farmland]</parent-name>
            <remote-alias>Avg. acres</remote-alias>
            <ordinal>7</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Number of Records</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Number of Records]</local-name>
            <parent-name>[Normalized Values By Farmland]</parent-name>
            <remote-alias>Number of Records</remote-alias>
            <ordinal>8</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>X recalls per acre</remote-name>
            <remote-type>5</remote-type>
            <local-name>[X recalls per acre]</local-name>
            <parent-name>[Normalized Values By Farmland]</parent-name>
            <remote-alias>X recalls per acre</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Normalized Values By Farmland]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:J51:no:A1:J51:1&quot;</attribute>
              <attribute datatype='integer' name='lost'>0</attribute>
              <attribute datatype='integer' name='outcome'>1</attribute>
              <attribute datatype='integer' name='processed'>350</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='string' hidden='true' name='[F3]' role='dimension' type='nominal' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec' />
      <column datatype='integer' name='[Number]' role='dimension' type='ordinal' />
      <column aggregation='Sum' datatype='integer' name='[Rank]' role='dimension' type='ordinal' />
      <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <layout dim-ordering='alphabetic' dim-percentage='0.424821' measure-ordering='alphabetic' measure-percentage='0.575179' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Reino Unido&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
    </datasource>
    <datasource caption='Normalized Values By ! (Recall per State)' inline='true' name='federated.1pa7dd50k96rdm17mdkd20iww47a' version='10.4'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Recall per State' name='excel-direct.0qp35gk0fk1ifb17dindu05cku2b'>
            <connection class='excel-direct' cleaning='yes' compat='no' dataRefreshTime='' filename='C:/Users/Stewart/Documents/GitHub/probable-octo-palm-tree/Data/Recall per State.xlsx' interpretationMode='1' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <relation connection='excel-direct.0qp35gk0fk1ifb17dindu05cku2b' name='Normalized Values By !' table='[&apos;Normalized Values By $$&apos;]' type='table'>
          <columns gridOrigin='A1:F51:no:A1:F51:1' header='yes' lost='0' outcome='1' processed='150'>
            <column datatype='string' name='Country' ordinal='0' />
            <column datatype='string' name='State' ordinal='1' />
            <column datatype='string' name='F3' ordinal='2' />
            <column datatype='real' name='State receipts for all commodities ($1mill)' ordinal='3' />
            <column datatype='integer' name='Number of Records' ordinal='4' />
            <column datatype='real' name='every dollar causes x recalls' ordinal='5' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[Normalized Values By !]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RGB_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>State</remote-name>
            <remote-type>130</remote-type>
            <local-name>[State]</local-name>
            <parent-name>[Normalized Values By !]</parent-name>
            <remote-alias>State</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RGB_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F3</remote-name>
            <remote-type>130</remote-type>
            <local-name>[F3]</local-name>
            <parent-name>[Normalized Values By !]</parent-name>
            <remote-alias>F3</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RGB_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>State receipts for all commodities ($1mill)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[State receipts for all commodities ($1mill)]</local-name>
            <parent-name>[Normalized Values By !]</parent-name>
            <remote-alias>State receipts for all commodities ($1mill)</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Number of Records</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Number of Records]</local-name>
            <parent-name>[Normalized Values By !]</parent-name>
            <remote-alias>Number of Records</remote-alias>
            <ordinal>4</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>every dollar causes x recalls</remote-name>
            <remote-type>5</remote-type>
            <local-name>[every dollar causes x recalls]</local-name>
            <parent-name>[Normalized Values By !]</parent-name>
            <remote-alias>every dollar causes x recalls</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Normalized Values By !]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:F51:no:A1:F51:1&quot;</attribute>
              <attribute datatype='integer' name='lost'>0</attribute>
              <attribute datatype='integer' name='outcome'>1</attribute>
              <attribute datatype='integer' name='processed'>150</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec' />
      <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <drill-paths>
        <drill-path name='Country, State'>
          <field>[Country]</field>
          <field>[State]</field>
        </drill-path>
      </drill-paths>
      <layout dim-ordering='alphabetic' dim-percentage='0.47494' measure-ordering='alphabetic' measure-percentage='0.52506' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Reino Unido&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Distribution of Recalls'>
      <table>
        <view>
          <datasources>
            <datasource caption='food-enforcement_ProcessedData' name='federated.0aod3ah1xoffqa1azx3491fdo1jb' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0aod3ah1xoffqa1azx3491fdo1jb'>
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.country</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[state]' derivation='None' name='[none:state:nk]' pivot='key' type='nominal' />
            <column caption='State' datatype='string' name='[state]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.state</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0aod3ah1xoffqa1azx3491fdo1jb].[none:country:nk]'>
            <groupfilter function='member' level='[none:country:nk]' member='&quot;United States&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <sort class='alphabetic' column='[federated.0aod3ah1xoffqa1azx3491fdo1jb].[none:state:nk]' direction='ASC' />
          <slices>
            <column>[federated.0aod3ah1xoffqa1azx3491fdo1jb].[none:country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.0aod3ah1xoffqa1azx3491fdo1jb].[none:country:nk]' />
              <lod column='[federated.0aod3ah1xoffqa1azx3491fdo1jb].[none:state:nk]' />
              <size column='[federated.0aod3ah1xoffqa1azx3491fdo1jb].[sum:Number of Records:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0aod3ah1xoffqa1azx3491fdo1jb].[Latitude (generated)]</rows>
        <cols>[federated.0aod3ah1xoffqa1azx3491fdo1jb].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Distribution of Recalls, Normalized By Farmland'>
      <table>
        <view>
          <datasources>
            <datasource caption='Normalized Values By Farmland (Recall per State)' name='federated.0vtwktr1bo1h7s1402gvq0xm989e' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0vtwktr1bo1h7s1402gvq0xm989e'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column datatype='real' name='[X recalls per acre]' role='measure' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[X recalls per acre]' derivation='Sum' name='[sum:X recalls per acre:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0vtwktr1bo1h7s1402gvq0xm989e].[Longitude (generated)]' field-type='quantitative' max='-7480105.4500726853' min='-14154899.420237139' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.0vtwktr1bo1h7s1402gvq0xm989e].[Latitude (generated)]' field-type='quantitative' max='6923127.7657443769' min='3071335.4563501505' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.0vtwktr1bo1h7s1402gvq0xm989e].[none:Country:nk]' />
              <lod column='[federated.0vtwktr1bo1h7s1402gvq0xm989e].[none:State:nk]' />
              <size column='[federated.0vtwktr1bo1h7s1402gvq0xm989e].[sum:X recalls per acre:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0vtwktr1bo1h7s1402gvq0xm989e].[Latitude (generated)]</rows>
        <cols>[federated.0vtwktr1bo1h7s1402gvq0xm989e].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Distribution of Recalls, Normalized by income from agriculture'>
      <table>
        <view>
          <datasources>
            <datasource caption='Normalized Values By ! (Recall per State)' name='federated.1pa7dd50k96rdm17mdkd20iww47a' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1pa7dd50k96rdm17mdkd20iww47a'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column datatype='real' name='[every dollar causes x recalls]' role='measure' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[every dollar causes x recalls]' derivation='Sum' name='[sum:every dollar causes x recalls:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1pa7dd50k96rdm17mdkd20iww47a].[Longitude (generated)]' field-type='quantitative' max='-6424024.8286835458' min='-14358799.860911123' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1pa7dd50k96rdm17mdkd20iww47a].[Latitude (generated)]' field-type='quantitative' max='6973289.7834242973' min='2394406.0410291008' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.1pa7dd50k96rdm17mdkd20iww47a].[none:Country:nk]' />
              <lod column='[federated.1pa7dd50k96rdm17mdkd20iww47a].[none:State:nk]' />
              <size column='[federated.1pa7dd50k96rdm17mdkd20iww47a].[sum:every dollar causes x recalls:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1pa7dd50k96rdm17mdkd20iww47a].[Latitude (generated)]</rows>
        <cols>[federated.1pa7dd50k96rdm17mdkd20iww47a].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='How Serious?'>
      <table>
        <view>
          <datasources>
            <datasource caption='FoodTypeVSCause' name='federated.06jweit1wnedaq1emelrk1ym4ejy' />
          </datasources>
          <datasource-dependencies datasource='federated.06jweit1wnedaq1emelrk1ym4ejy'>
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column caption='Classification' datatype='string' name='[classification]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.classification</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[classification]' derivation='None' name='[none:classification:nk]' pivot='key' type='nominal' />
            <column-instance column='[reason]' derivation='None' name='[none:reason:nk]' pivot='key' type='nominal' />
            <column caption='Reason' datatype='string' name='[reason]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.reason</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:classification:nk]' />
              <wedge-size column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[sum:Number of Records:qk]' />
              <size column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[sum:Number of Records:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:reason:nk]</rows>
        <cols />
      </table>
    </worksheet>
    <worksheet name='Proportion of Reasons for Recall'>
      <table>
        <view>
          <datasources>
            <datasource caption='FoodTypeVSCause' name='federated.06jweit1wnedaq1emelrk1ym4ejy' />
          </datasources>
          <datasource-dependencies datasource='federated.06jweit1wnedaq1emelrk1ym4ejy'>
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.country</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[reason]' derivation='None' name='[none:reason:nk]' pivot='key' type='nominal' />
            <column caption='Reason' datatype='string' name='[reason]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.reason</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:country:nk]'>
            <groupfilter function='member' level='[none:country:nk]' member='&quot;United States&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:reason:nk]' />
              <wedge-size column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[sum:Number of Records:qk]' />
              <size column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[sum:Number of Records:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:country:nk]</rows>
        <cols />
      </table>
    </worksheet>
    <worksheet name='Proportion of Recalls for Food Types'>
      <table>
        <view>
          <datasources>
            <datasource caption='FoodTypeVSCause' name='federated.06jweit1wnedaq1emelrk1ym4ejy' />
          </datasources>
          <datasource-dependencies datasource='federated.06jweit1wnedaq1emelrk1ym4ejy'>
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column caption='General Food' datatype='string' name='[general_food]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.general_food</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[general_food]' derivation='None' name='[none:general_food:nk]' pivot='key' type='nominal' />
            <column-instance column='[reason]' derivation='None' name='[none:reason:nk]' pivot='key' type='nominal' />
            <column caption='Reason' datatype='string' name='[reason]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.reason</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='318' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:reason:nk]' />
              <wedge-size column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[sum:Number of Records:qk]' />
              <size column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[sum:Number of Records:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.9010497331619263' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:general_food:nk]</rows>
        <cols />
      </table>
    </worksheet>
    <worksheet name='Proportion of Subreasons for Recall'>
      <table>
        <view>
          <datasources>
            <datasource caption='FoodTypeVSCause' name='federated.06jweit1wnedaq1emelrk1ym4ejy' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.06jweit1wnedaq1emelrk1ym4ejy'>
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.country</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[specific_reason]' derivation='None' name='[none:specific_reason:nk]' pivot='key' type='nominal' />
            <column caption='Specific Reason' datatype='string' name='[specific_reason]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.specific_reason</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:country:nk]'>
            <groupfilter function='member' level='[none:country:nk]' member='&quot;United States&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:specific_reason:nk]' />
              <wedge-size column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[sum:Number of Records:qk]' />
              <size column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[sum:Number of Records:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:country:nk]</rows>
        <cols />
      </table>
    </worksheet>
    <worksheet name='Propotion of Recalls for Foods'>
      <table>
        <view>
          <datasources>
            <datasource caption='FoodTypeVSCause' name='federated.06jweit1wnedaq1emelrk1ym4ejy' />
          </datasources>
          <datasource-dependencies datasource='federated.06jweit1wnedaq1emelrk1ym4ejy'>
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column caption='General Food' datatype='string' name='[general_food]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.general_food</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[general_food]' derivation='None' name='[none:general_food:nk]' pivot='key' type='nominal' />
            <column-instance column='[reason]' derivation='None' name='[none:reason:nk]' pivot='key' type='nominal' />
            <column-instance column='[specific_food]' derivation='None' name='[none:specific_food:nk]' pivot='key' type='nominal' />
            <column caption='Reason' datatype='string' name='[reason]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.reason</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Specific Food' datatype='string' name='[specific_food]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.specific_food</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:general_food:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:general_food:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:general_food:nk]' member='&quot;chips&quot;' />
                <groupfilter function='member' level='[none:general_food:nk]' member='&quot;dried fruit&quot;' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:specific_food:nk]' kind='hide'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:specific_food:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:specific_food:nk]' member='&quot;drink&quot;' />
                <groupfilter function='member' level='[none:specific_food:nk]' member='&quot;pizza&quot;' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:general_food:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='461' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:reason:nk]' />
              <wedge-size column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[sum:Number of Records:qk]' />
              <size column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[sum:Number of Records:qk]' />
            </encodings>
            <style>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.06jweit1wnedaq1emelrk1ym4ejy].[none:general_food:nk] / [federated.06jweit1wnedaq1emelrk1ym4ejy].[none:specific_food:nk])</rows>
        <cols />
      </table>
    </worksheet>
    <worksheet name='Sheet 10'>
      <table>
        <view>
          <datasources>
            <datasource caption='food-enforcement_ProcessedData' name='federated.0aod3ah1xoffqa1azx3491fdo1jb' />
          </datasources>
          <datasource-dependencies datasource='federated.0aod3ah1xoffqa1azx3491fdo1jb'>
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column caption='Classification' datatype='string' name='[classification]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.classification</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[classification]' derivation='None' name='[none:classification:nk]' pivot='key' type='nominal' />
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[federated.0aod3ah1xoffqa1azx3491fdo1jb].[none:classification:nk]' />
              <wedge-size column='[federated.0aod3ah1xoffqa1azx3491fdo1jb].[sum:Number of Records:qk]' />
              <size column='[federated.0aod3ah1xoffqa1azx3491fdo1jb].[sum:Number of Records:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
    </worksheet>
    <worksheet name='Sheet 8'>
      <table>
        <view>
          <datasources>
            <datasource caption='FoodTypeVSCause' name='federated.06jweit1wnedaq1emelrk1ym4ejy' />
          </datasources>
          <datasource-dependencies datasource='federated.06jweit1wnedaq1emelrk1ym4ejy'>
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.country</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[reason]' derivation='None' name='[none:reason:nk]' pivot='key' type='nominal' />
            <column-instance column='[state]' derivation='None' name='[none:state:nk]' pivot='key' type='nominal' />
            <column caption='Reason' datatype='string' name='[reason]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.reason</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='State' datatype='string' name='[state]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.state</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:country:nk]'>
            <groupfilter function='member' level='[none:country:nk]' member='&quot;United States&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <sort class='alphabetic' column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:country:nk]' direction='DESC' />
          <filter class='categorical' column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:state:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:state:nk]' member='&quot;CT&quot;' />
              <groupfilter function='member' level='[none:state:nk]' member='&quot;MA&quot;' />
              <groupfilter function='member' level='[none:state:nk]' member='&quot;ME&quot;' />
              <groupfilter function='member' level='[none:state:nk]' member='&quot;NH&quot;' />
              <groupfilter function='member' level='[none:state:nk]' member='&quot;NJ&quot;' />
              <groupfilter function='member' level='[none:state:nk]' member='&quot;RI&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:country:nk]</column>
            <column>[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:state:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <size column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[sum:Number of Records:qk]' />
              <color column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[sum:Number of Records:qk]' />
              <text column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:country:nk]' />
              <text column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:reason:nk]' />
              <text column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:state:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
    </worksheet>
    <worksheet name='Sheet 9'>
      <table>
        <view>
          <datasources>
            <datasource caption='FoodTypeVSCause' name='federated.06jweit1wnedaq1emelrk1ym4ejy' />
          </datasources>
          <datasource-dependencies datasource='federated.06jweit1wnedaq1emelrk1ym4ejy'>
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.country</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[reason]' derivation='None' name='[none:reason:nk]' pivot='key' type='nominal' />
            <column caption='Reason' datatype='string' name='[reason]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.reason</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:country:nk]'>
            <groupfilter function='member' level='[none:country:nk]' member='&quot;United States&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <size column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[sum:Number of Records:qk]' />
              <color column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[sum:Number of Records:qk]' />
              <text column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:country:nk]' />
              <text column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:reason:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
    </worksheet>
  </worksheets>
  <windows source-height='93'>
    <window class='worksheet' name='Distribution of Recalls'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0aod3ah1xoffqa1azx3491fdo1jb].[sum:Number of Records:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <default-map-tool-selection tool='2' />
      </viewpoint>
    </window>
    <window class='worksheet' name='Distribution of Recalls, Normalized by income from agriculture'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1pa7dd50k96rdm17mdkd20iww47a].[sum:every dollar causes x recalls:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1pa7dd50k96rdm17mdkd20iww47a].[none:Country:nk]</field>
            <field>[federated.1pa7dd50k96rdm17mdkd20iww47a].[none:State:nk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
    </window>
    <window class='worksheet' name='Distribution of Recalls, Normalized By Farmland'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0vtwktr1bo1h7s1402gvq0xm989e].[sum:X recalls per acre:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0vtwktr1bo1h7s1402gvq0xm989e].[none:Country:nk]</field>
            <field>[federated.0vtwktr1bo1h7s1402gvq0xm989e].[none:F3:nk]</field>
            <field>[federated.0vtwktr1bo1h7s1402gvq0xm989e].[none:State:nk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
    </window>
    <window class='worksheet' name='Proportion of Reasons for Recall'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:reason:nk]' type='color' />
            <card pane-specification-id='0' param='[federated.06jweit1wnedaq1emelrk1ym4ejy].[sum:Number of Records:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:country:nk]</field>
            <field>[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:reason:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Proportion of Subreasons for Recall'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:specific_reason:nk]' type='color' />
            <card pane-specification-id='0' param='[federated.06jweit1wnedaq1emelrk1ym4ejy].[sum:Number of Records:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:country:nk]</field>
            <field>[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:reason:nk]</field>
            <field>[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:specific_reason:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Proportion of Recalls for Food Types'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:reason:nk]' type='color' />
            <card pane-specification-id='0' param='[federated.06jweit1wnedaq1emelrk1ym4ejy].[sum:Number of Records:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:general_food:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Propotion of Recalls for Foods'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:reason:nk]' type='color' />
            <card pane-specification-id='0' param='[federated.06jweit1wnedaq1emelrk1ym4ejy].[sum:Number of Records:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <node-selection select-tuples='false'>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:general_food:nk]</field>
                  <field>[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:specific_food:nk]</field>
                </fields>
                <multibucket>
                  <bucket>&quot;pizza&quot;</bucket>
                  <bucket>&quot;pizza&quot;</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
          </node-selection>
        </selection-collection>
      </viewpoint>
    </window>
    <window class='worksheet' name='Sheet 9'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.06jweit1wnedaq1emelrk1ym4ejy].[sum:Number of Records:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:country:nk]</field>
            <field>[federated.06jweit1wnedaq1emelrk1ym4ejy].[sum:Number of Records:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Sheet 8'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.06jweit1wnedaq1emelrk1ym4ejy].[sum:Number of Records:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:country:nk]</field>
            <field>[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:general_food:nk]</field>
            <field>[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:reason:nk]</field>
            <field>[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:reason_for_recall:nk]</field>
            <field>[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:state:nk]</field>
            <field>[federated.0aod3ah1xoffqa1azx3491fdo1jb].[none:country:nk]</field>
            <field>[federated.0aod3ah1xoffqa1azx3491fdo1jb].[none:product_type:nk]</field>
            <field>[federated.0aod3ah1xoffqa1azx3491fdo1jb].[none:state:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Sheet 10'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0aod3ah1xoffqa1azx3491fdo1jb].[none:classification:nk]' type='color' />
            <card pane-specification-id='0' param='[federated.0aod3ah1xoffqa1azx3491fdo1jb].[sum:Number of Records:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0aod3ah1xoffqa1azx3491fdo1jb].[none:classification:nk]</field>
            <field>[federated.0aod3ah1xoffqa1azx3491fdo1jb].[none:event_id:nk]</field>
            <field>[federated.0aod3ah1xoffqa1azx3491fdo1jb].[none:recall_number:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' maximized='true' name='How Serious?'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:classification:nk]' type='color' />
            <card pane-specification-id='0' param='[federated.06jweit1wnedaq1emelrk1ym4ejy].[sum:Number of Records:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:classification:nk]</field>
            <field>[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:reason:nk]</field>
            <field>[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:specific_reason:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Distribution of Recalls' width='192'>
      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
      Dgh4HfD/Ab3xdbU1aXDcAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Distribution of Recalls, Normalized By Farmland' width='192'>
      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
      7X0/SuZtLAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Distribution of Recalls, Normalized by income from agriculture' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='How Serious?' width='192'>
      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
      jnJ6bQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='184' name='Proportion of Reasons for Recall' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Proportion of Recalls for Food Types' width='192'>
      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
    </thumbnail>
    <thumbnail height='184' name='Proportion of Subreasons for Recall' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Propotion of Recalls for Foods' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAJCklEQVR4nO3dy29cdxmH8WdmzlzsGdvj29hxHNuZtLkoTmja0EbQBkSbQhewA7EAoSJY
      sWLLH8CKFYJNuyldUCGBBBWhLdAqbVBK2kZp0jQZOzdf4sQeXyfjGc/lnDlsqNRC0qaoZ2bK
      +/3sokR+XyvnyfkdOToT8n3fR8SocKsXEGklBSCmKQAxTQGIaQpATFMAYpoCENMUgJimAMQ0
      BSCmOR/+RaFQoFqttmqXtuH7PqFQqNVrSBOE9H+B/ls+nyeTybR6DWkCHYHENAUgpikAMU0B
      iGkKQExTAGKaAhDTFICYpgDENAUgpikAMU0BiGkKQExTAGKaAhDTFICYpgDENAUgpikAMU0B
      iGkKQExTAGKaAhDTFICYpgDENAUgpikAMU0BiGkKQNqG7/v4Xq2pM+8SQIXz53N83Huj3UqR
      V4+/zMpWUAv7eJ7Hx7262vd9qpUKXkMvuP68W97Mc+rszyn+9bvcOvdHGk16afldAzh98hQX
      3r9EqeqxNH+F3NU5XM/jWu4Cs7dWyZ1+mYt5l4QT1E2kzlTu6scGUCktcerkO2zW3YB2kGZw
      Gy7PnX6G3+beYm6rxnNzRc7dWmjKbOduv+G6HpXVq/xl+hLn3n6HWtXn6089xEuvvUc1nOLH
      x7Iku1NEAvwgiY3FGU4szjO+7wDlhausVkIcmsxy4cIUfkeadCjPepGm/WshwdisFpldn2Hd
      hT94WcqdaWY31jk0Mhr47LsGEHEc/IaP44TJTBzgyaMPES5Os+/hxzmyf5Te2g2GEsN0OJHA
      lusZHufwWB8Xp6a4eG2FbQN93Lp+kbmNOoOhCtsP7KZroIveRCywHSR4yViSgeQAa+UVZj2P
      QSCTTDVl9l0CSPHUN77E+pbPU4/tZv3GFZaKHru/cIyjyRzVUIT+iYMcaQR54YWhssY/311l
      78EHCDfeZaMWI7Mry2jhPJGODmLRTpJJXfyfd9FIjO998Yc8c+pXLBZXOTDUy+HtO5oyWx+R
      dAf6iKTWqLpVKvUtkvEunHBwJ4sPu+sRSKTZ4k6cuBNv6kz9HEBMUwBimgIQ0xSAmKYAxDQF
      IKYpADFNAYhpCkBMUwBimgIQ0xSAmKYAxDQFIKYpADFNAYhpCkBMUwBimgIQ0xSAmKYAxDQF
      IKYpADFNAYhpCkBMUwBimgIQ0xSAmKYAxDQFIKYpADFNAYhpCkBMUwBimgIQ0xSAmKYAxDQF
      IKYpADFNAYhpCkBMUwBimgIQ0xSAmKYAxDQFIKYpADFNAYhpCkBMUwBimgIQ0xSAmKYAxDQF
      IKYpADFNAYhpCkBMUwBimgKQttDwG7w7f4rbl35DY+160+a2cQAe62sb+K1eQwLX8Bu8cOZ5
      fvnGL5g58yy3f/8jCiuzTZntNGXK/8RjfuY6lfooAwO9uDWPaCREIxzBrZapuZCI+qwXSvT0
      ZfArBUpumP50ikq5hBeO051MtPqbkHuwsDHPK7k/4zY8robS/KP/GImZRZ7uHyMUCgU6u40D
      gMpWmbXFOZaLy1TXHbKDYTY6+pg58wY7Dx5hdfYyiajLzU2PG2+/ysaWzyNPPs7C9FUmHzxM
      d7LV34Hci4bfwGt4QIiTyUeJdmbZUa/h+T5OwAG08REI4p0p+tJd+A2oV0vkl5dxfRgev5/s
      aB9EEvT3pPD9Ol2ZLF974ihdjsOuvfsZ6k21en25R/3JQUbTY4Rw8GPbANgzmMEJB395tnEA
      DkP9Kda2wuzdtY+J0SThnmG296YYGxsDYkTdFd545zKprn4m925nY7NOureXTH9Pq5eXTyEV
      T/GTx37KgZHDDKaGeXQ8y2Pj2abMDvm+/7l9ztwsrFHxwvSme4iEP7tbZT6fJ5PJfGZfT+5N
      3atT83w6o9HAz/4faOtngE+S6ulDB53/H9FIlGikuTPb+AgkEjwFIKYpADFNAYhpCkBMUwBi
      mgIQ0xSAmKYAxDQFIKYpADFNAYhpCkBMUwBimgIQ0xSAmKYAxDQFIKYpADFNAYhpCkBMUwBi
      mgIQ0xSAmKYAxDQFIKYpADFNAYhpH3k5bqFQoFqttmqXtlEsFlu9gjTJRwLo6dF79T+g16Pb
      oCOQmKYAxDQFIKYpADFNAYhpCkBMUwBimgIQ0xSAmKYAxDQFIKYpADFNAYhpCkBMUwBimgIQ
      0xSAmKYAxDQFIKYpADFNAYhpCkBMUwBimgIQ0xSAmKYAxDQFIKYpADHN+eQ/IhK8qlultvwK
      G0sbbOvbjTN2pClzP9Ud4Pjx40HtcQcNCoUifhMnSmtU3QrPvvlrXjz7LMu5P7F8/GfkFq41
      Zfad7wC+x9TZU+SWahzcPcLZs5fYc/jLLC4usnjtIqVEhrXpt1lye3jiq0dIOEGcpFzmZmbY
      sXOCrlQSz61TdxvEIlCuuqRSHTS8EH6jTjgaw/c8fK/OVrVOZ7KLhRtzjI/tYHNzk2giSSKm
      m127urw8zZvXT9IZCTPgJHh9+NtwfY6dQ2PEnWD/3u741RvFm5zM3eYH3znGxdMnKJXW+NuJ
      f5IsLPC7l9/i6W8d5JnXLzGe7mTx4UNMdHcEsly5sMqVS0Xig9tYnZ5iMHsft5duEo1GSAwO
      45ZcwoV5otmD1NfXKK/MEo530TE0QWV1mVh9lRNvTZEc2sU3n3hEDzxtarW0go9PyQvxUnSI
      eMcovZ6L2/CIB3xKv+M1EepIk6ze5MWXXmP62hwhJ0lHPEysf4yvTPZz/pbHSDLEwMgoqWgk
      sOWS6Qz3TYzg1mr0b9/F/uwQDaeL3Tu3U6k5UF7GGRmjfO0cHX076B4c5dDkPmL/XmmzuMW+
      B4/wwJ4xHaXa2K6B+0g4CQAKXgXf9xlMpog70cBnh3zfb9Nro8H85RxLJZ/JyT1UNrdIp7vY
      WJrh8kKRyQP7cQtL1OJ91FZv0Tc+wVZhg+5kB8WqR71SprcrwXvvvU/n4AT3jw8RusfJ+Xxe
      nxDTZCeu/J0XzjxPuV7hoYmn+f6DR+nvTAY+t40DaB0F0Br5zSWKldts6x6lMxbMsfo/6clQ
      2kYmNUQmNdTUmXouFNMUgJimAMQ0BSCmKQAxTQGIaQpATFMAYpoCENMUgJimAMS0fwFojqjC
      wbDZggAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='164' name='Sheet 10' width='164'>
      iVBORw0KGgoAAAANSUhEUgAAAKQAAACkCAYAAAAZtYVBAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAIHUlEQVR4nO3dT2zTZRzH8c+6FQaVSqP8TAYeajwIVA8zBD3IYUvkZFCBBBIvRLkQE+LB
      0zy6k6dddgHjyWAiGpATJiyBCxISErWUg9EGwSa0hkKz4tif1sN4Zh3t1m799fk8z+/zOuky
      tufw5nl+z7dl66vX63WIkIjZXoBIIwUpVBSkUFGQQkVBChUFKVQUpFBRkEJFQQoVBSlUFKRQ
      UZBCRUEKFQUpVBSkUFGQQkVBChUFKVQUpFBRkEJFQQoVBSlUFKRQUZBCRUEKFQUpVBSkUFGQ
      QkVBChUFKVQUpFBRkEJFQQoVBSlUFKRQUZBCRUEKFQUpVBSkUFGQQkVBChUFKVQUpFBRkEJF
      QQoVBSlUFKRQGbC9AJfNl0qYL5WwUPobADCTyy19/M/+GM6+/hru/woEWxMIUgm8kEoAAIJU
      AsHWBDIvBdbWzkpBdmi+VMLj3C1MX76Mx7lbLT+v/HIaAFAsV1EsV4F888/LpAO8+lKAI6OZ
      MJbrHAXZhvlSCdXLVzCTy60Y4Vpk80Vk80WcuZRFkEpgdDiNTDqI7O6pIFcwlzuP8tc/YOb3
      fzr+s1umqx3/mWK5ijOXsgAWj/WjoxmMDKc7/jou06WmiVqlgEffHsPMxTHEN9y0soZiuYqJ
      s9dw/IsLyP5RtLIGG7RDNqhVCpi9Oom53Lmljw0kpzGQnMZ85RkrayqWqxg7PYVMOsDJQ3sR
      PLkY+Uo7JBZDfPzTJKpfvv2/GI2Nz5c7/prJNRzZK8nmizj+xQV88+RI91Xkg6xVCvjn22OY
      vTrZ8nM2bCsjtnG2h6tq7cylrNfHeKSDNLtirfLXqp+7afu9HqyoPeYYn7rRYpbksEgGaY7o
      lXbF5TZs6+zYXsstu1MTZ69h4uy10L9PL0UuSHNx6SRGo9Moe2HqRh5jp6ZsL6NrIhWkeV5s
      dnFpx1ouN71gLjw+PFdGJkgTYzvPi62YERCjYrmKie/cP74jEWStUsDMxbF1xWh0skv24jmy
      UbFcdf74jkSQc7lzWLh7vStfi2kE1Ew2X3R6Vul9kHO582u6wKyEaQTUzJlLWWefJ70O0hzV
      3cZ4215u7PSUk1F6G6S5xISlnSi7/fJhpya+u7b4XkyHeBvk7NXJrlxiWmEdATVqfDubK7wM
      slYprHnW2C7mEVCjqRt5p45uL4MM47mxmdV2yV6PfVpxaZf0LsiFu9e7NuJZDfsIyMjmi87s
      kt4F+bjLI57VuHDjBtzZJb0Kspe7o8E+kzRc2SW9CrLXu6PRapfcMs116XHhtW5vgqxVCj3f
      HQ0XRkBAw78RJ+ZNkGGPeVbiyggIAP27zL0JcuGOnd3RaLZL2n6lpplfyZ8jvQjS5nFtuDQC
      Yj62vQjSdoyGKyOgbJ53l/QiyLmb9p4fG7kyAmI+tp0PkuG4buTCLsl8sXE+yHqI7+hZi8bL
      Dctr2c2wDsmdD7JWKdhewv+4MgIqPuD8y+JBkFw7JODGoJz1pu18kIzMCIhxDmncU5DhqD/k
      OrINFy43jJwPkvHIBvhHQDqyQ1Inu9Q0em7TXdtLaEmXmpCw7pAA9+VGO2RIYsnttpfQEvP4
      h/VHQzsfZF9yyPYSnBRsVZChYN4hAeCtwZ9tL8EpzgfJbmf8tu0lNPUq6S9mcj7Ivme5j+x9
      g79gW/8D28twhvNBsh/ZAPAK4S6pS01IYg5cat7ffMX2Ep6iS01I+nfssb2EVW3rf0j1LBmk
      eH81svNBAkB817u2l7Aqpts26+4IeBJk/4v8u+S+wV9sL2EJ6w0b8CTI+K4DtpfQFpZdMpNW
      kKFz4bbN8BzJ/PwIeBTkwG7+XZJhJjlK/gvhvQnShR0SAN6zPAJiPq4Bj4KM7zrgxAjI5uWG
      /bgGPAoSAOK7+cc/gL1nyZMH91r5vp3wK0hHdkkbt20XdkfAsyABYOObJ2wvYVU2jm0XdkfA
      wyD7d+zRLrlMJh04sTsCHgYJaJdc7uhopmffa728DLJ/xx7617d3xm/3ZCY5Mpx2ZncEPA0S
      ADY4sEuGPZMMUgmndkfA4yBjySFsPvyV7WWsKMxjO0glcPLgXto34rbibZDA4tHNHmVYl5tR
      x45qw+sgAf7nyTCG5CPDaRxx7Kg2vA8SAAb3f047Cur2Gy4y6QAnD7kxc2wmEkECwObDX9FG
      2a1/BBakEhg/PtKVr2VLZIIEgMH945TvCurG5SZIJTD+kdsxAhELMpYcwibCnXJn/Pa6niWD
      VAKnPn3HuRt1M5EKEvhvHMQ2p1zrbfvoaAanPn2ny6uxJ3JBGhvfOIHB/eO2l7Gk02PbDL1d
      vU23EtkggcW3qzHNKdvdJc3Q27cYgYgHCSzOKRMf/khxhLfzHDkynMb4RyNODr3b0Vev1+u2
      F8GiVilg5uKY1d8M9sn9j1Fa2PrUxzPpAEdHM96GaCjIJmyG+X11H75/tG/p/83x7HuIhoJc
      wcLd65i5+FnPf475B6XPli4tI+T/bLXbFGQbapUC5nLnMH/zfKhxxpLbMbD7AH4LDkVmR1xO
      QXbIxLlw5/q6j/RYcjv6kkOI734X/Tv2OPGjBcOmINehVimgXvkLtUphaeesP1z87/qTj5no
      zEuW5gdjxZJDdK8YMVCQQiXyc0jhoiCFioIUKgpSqChIoaIghYqCFCoKUqgoSKGiIIWKghQq
      ClKoKEihoiCFioIUKgpSqChIoaIghYqCFCoKUqgoSKGiIIWKghQqClKoKEihoiCFioIUKgpS
      qChIoaIghYqCFCoKUqgoSKGiIIWKghQqClKo/AuJgqIpkEzAVgAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Sheet 8' width='192'>
      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
      RU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Sheet 9' width='192'>
      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
      eywi5+6/AOTvLZsQuREwAAAAAElFTkSuQmCC
    </thumbnail>
  </thumbnails>
</workbook>
