<?xml version='1.0' encoding='utf-8' ?>

<!-- build 10400.17.1103.1137                               -->
<workbook original-version='10.4' source-build='10.4.1 (10400.17.1103.1137)' source-platform='win' version='10.4' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='Sheet1 (Recall per State)' inline='true' name='federated.1ta0o650b2z2s811510bc16o6fau' version='10.4'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Recall per State' name='excel-direct.12sn5lo1rrtdgl11efk9e16bsvou'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/Stewart/Documents/GitHub/probable-octo-palm-tree/Data/Recall per State.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <relation connection='excel-direct.12sn5lo1rrtdgl11efk9e16bsvou' name='Sheet1' table='[Sheet1$]' type='table'>
          <columns gridOrigin='A1:E71:no:A1:E71:0' header='yes' lost='0' outcome='2' processed='122'>
            <column datatype='string' name='Country' ordinal='0' />
            <column datatype='string' name='State' ordinal='1' />
            <column datatype='integer' name='Number of Records per State' ordinal='2' />
            <column datatype='integer' name='Populations' ordinal='3' />
            <column datatype='real' name='relative' ordinal='4' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RGB_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>State</remote-name>
            <remote-type>130</remote-type>
            <local-name>[State]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>State</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RGB_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Number of Records per State</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Number of Records per State]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Number of Records per State</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Populations</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Populations]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Populations</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>relative</remote-name>
            <remote-type>5</remote-type>
            <local-name>[relative]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>relative</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:E71:no:A1:E71:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>2</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
      <drill-paths>
        <drill-path name='Country, State'>
          <field>[Country]</field>
          <field>[State]</field>
        </drill-path>
      </drill-paths>
      <extract count='-1' enabled='false' units='records'>
        <connection class='dataengine' dbname='C:/Users/Stewart/Documents/GitHub/probable-octo-palm-tree/Tableau/Sheet1 (Recall per State).tde' schema='Extract' tablename='Extract' update-time='01/02/2018 08:12:31 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='70' timestamp-start='2018-01-02 20:12:31.023' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>Country</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Country]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Country</remote-alias>
              <ordinal>0</ordinal>
              <family>Sheet1</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>13</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RGB' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;Australia&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;United States&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>70</statistic>
                <statistic aggregation='Median' datatype='string'>&quot;United States&quot;</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>0</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Number of Records per State</remote-name>
              <remote-type>2</remote-type>
              <local-name>[Number of Records per State]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Number of Records per State</remote-alias>
              <ordinal>1</ordinal>
              <family>Sheet1</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>53</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>14566.0</statistic>
                <statistic aggregation='Avg' datatype='real'>208.08571428571429</statistic>
                <statistic aggregation='Min' datatype='integer'>1</statistic>
                <statistic aggregation='Max' datatype='integer'>1999</statistic>
                <statistic aggregation='Stdev' datatype='real'>351.35059260430376</statistic>
                <statistic aggregation='StdevP' datatype='real'>348.83191788994236</statistic>
                <statistic aggregation='Var' datatype='real'>123447.23892339545</statistic>
                <statistic aggregation='VarP' datatype='real'>121683.7069387755</statistic>
                <statistic aggregation='Count' datatype='integer'>70</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>11548836.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>2</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint16&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Number of Records</remote-name>
              <remote-type>16</remote-type>
              <local-name>[Number of Records]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Number of Records</remote-alias>
              <ordinal>2</ordinal>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>70.0</statistic>
                <statistic aggregation='Avg' datatype='real'>1.0</statistic>
                <statistic aggregation='Min' datatype='integer'>1</statistic>
                <statistic aggregation='Max' datatype='integer'>1</statistic>
                <statistic aggregation='Stdev' datatype='real'>0.0</statistic>
                <statistic aggregation='StdevP' datatype='real'>0.0</statistic>
                <statistic aggregation='Var' datatype='real'>0.0</statistic>
                <statistic aggregation='VarP' datatype='real'>0.0</statistic>
                <statistic aggregation='Count' datatype='integer'>70</statistic>
                <statistic aggregation='Median' datatype='integer'>1</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>70.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Populations</remote-name>
              <remote-type>3</remote-type>
              <local-name>[Populations]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Populations</remote-alias>
              <ordinal>3</ordinal>
              <family>Sheet1</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>53</approx-count>
              <contains-null>true</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>617490353.0</statistic>
                <statistic aggregation='Avg' datatype='real'>11874814.48076923</statistic>
                <statistic aggregation='Min' datatype='integer'>563626</statistic>
                <statistic aggregation='Max' datatype='integer'>308745538</statistic>
                <statistic aggregation='Stdev' datatype='real'>42516120.946954556</statistic>
                <statistic aggregation='StdevP' datatype='real'>42105327.535922311</statistic>
                <statistic aggregation='Var' datatype='real'>1807620540376068.3</statistic>
                <statistic aggregation='VarP' datatype='real'>1772858606907297.8</statistic>
                <statistic aggregation='Count' datatype='integer'>52</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>99521230944719184.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>State</remote-name>
              <remote-type>129</remote-type>
              <local-name>[State]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>State</remote-alias>
              <ordinal>4</ordinal>
              <family>Sheet1</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>59</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RGB' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;AK&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;WY&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>58</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_GB&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.429545' measure-ordering='alphabetic' measure-percentage='0.570455' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Country:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>%null%</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>%many-values%</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Dominican Republic (the)&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Reino Unido&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
    </datasource>
    <datasource caption='food-enforcement-0001-of-0001' inline='true' name='federated.10mwfcb1gezdpd102hilz1dg19py' version='10.4'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='food-enforcement-0001-of-0001' name='semistructpassivestore-direct.02d93qs0orw7d7172lalt08cmbln'>
            <connection class='semistructpassivestore-direct' directory='C:/Users/Stewart/Documents/GitHub/probable-octo-palm-tree/Data/food-enforcement-0001-of-0001.json' filename='food-enforcement-0001-of-0001.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[food-enforcement-0001-of-0001.json]'>
                  <map key='meta' value='false' />
                  <map key='meta.results' value='false' />
                  <map key='results' value='true' />
                  <map key='results.Value' value='true' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
                <semistruct-schema-sequel table='[food-enforcement-0001-of-0001.json]'>
                  <semistruct-schema-node global-name='results.Value.more_code_info'>
                    <name>more_code_info</name>
                    <parent-name>results.Value</parent-name>
                    <type>string</type>
                    <is-selected>true</is-selected>
                    <is-newly-discovered>true</is-newly-discovered>
                    <sample-data />
                  </semistruct-schema-node>
                </semistruct-schema-sequel>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='semistructpassivestore-direct.02d93qs0orw7d7172lalt08cmbln' name='food-enforcement-0001-of-0001.json' table='[food-enforcement-0001-of-0001.json]' type='table' />
        <cols>
          <map key='[Document Index (generated)]' value='[food-enforcement-0001-of-0001.json].[Document Index (generated)]' />
          <map key='[address_1]' value='[food-enforcement-0001-of-0001.json].[results.Value.address_1]' />
          <map key='[address_2]' value='[food-enforcement-0001-of-0001.json].[results.Value.address_2]' />
          <map key='[center_classification_date]' value='[food-enforcement-0001-of-0001.json].[results.Value.center_classification_date]' />
          <map key='[city]' value='[food-enforcement-0001-of-0001.json].[results.Value.city]' />
          <map key='[classification]' value='[food-enforcement-0001-of-0001.json].[results.Value.classification]' />
          <map key='[code_info]' value='[food-enforcement-0001-of-0001.json].[results.Value.code_info]' />
          <map key='[country]' value='[food-enforcement-0001-of-0001.json].[results.Value.country]' />
          <map key='[distribution_pattern]' value='[food-enforcement-0001-of-0001.json].[results.Value.distribution_pattern]' />
          <map key='[event_id]' value='[food-enforcement-0001-of-0001.json].[results.Value.event_id]' />
          <map key='[initial_firm_notification]' value='[food-enforcement-0001-of-0001.json].[results.Value.initial_firm_notification]' />
          <map key='[more_code_info]' value='[food-enforcement-0001-of-0001.json].[results.Value.more_code_info]' />
          <map key='[postal_code]' value='[food-enforcement-0001-of-0001.json].[results.Value.postal_code]' />
          <map key='[product_description]' value='[food-enforcement-0001-of-0001.json].[results.Value.product_description]' />
          <map key='[product_quantity]' value='[food-enforcement-0001-of-0001.json].[results.Value.product_quantity]' />
          <map key='[product_type]' value='[food-enforcement-0001-of-0001.json].[results.Value.product_type]' />
          <map key='[reason_for_recall]' value='[food-enforcement-0001-of-0001.json].[results.Value.reason_for_recall]' />
          <map key='[recall_initiation_date]' value='[food-enforcement-0001-of-0001.json].[results.Value.recall_initiation_date]' />
          <map key='[recall_number]' value='[food-enforcement-0001-of-0001.json].[results.Value.recall_number]' />
          <map key='[recalling_firm]' value='[food-enforcement-0001-of-0001.json].[results.Value.recalling_firm]' />
          <map key='[report_date]' value='[food-enforcement-0001-of-0001.json].[results.Value.report_date]' />
          <map key='[results Index (generated)]' value='[food-enforcement-0001-of-0001.json].[results.Index (generated)]' />
          <map key='[state]' value='[food-enforcement-0001-of-0001.json].[results.Value.state]' />
          <map key='[status]' value='[food-enforcement-0001-of-0001.json].[results.Value.status]' />
          <map key='[termination_date]' value='[food-enforcement-0001-of-0001.json].[results.Value.termination_date]' />
          <map key='[voluntary_mandated]' value='[food-enforcement-0001-of-0001.json].[results.Value.voluntary_mandated]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[food-enforcement-0001-of-0001.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[results Index (generated)]</local-name>
            <parent-name>[food-enforcement-0001-of-0001.json]</parent-name>
            <remote-alias>results.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.address_1</remote-name>
            <remote-type>130</remote-type>
            <local-name>[address_1]</local-name>
            <parent-name>[food-enforcement-0001-of-0001.json]</parent-name>
            <remote-alias>results.Value.address_1</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.address_2</remote-name>
            <remote-type>130</remote-type>
            <local-name>[address_2]</local-name>
            <parent-name>[food-enforcement-0001-of-0001.json]</parent-name>
            <remote-alias>results.Value.address_2</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.center_classification_date</remote-name>
            <remote-type>130</remote-type>
            <local-name>[center_classification_date]</local-name>
            <parent-name>[food-enforcement-0001-of-0001.json]</parent-name>
            <remote-alias>results.Value.center_classification_date</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.city</remote-name>
            <remote-type>130</remote-type>
            <local-name>[city]</local-name>
            <parent-name>[food-enforcement-0001-of-0001.json]</parent-name>
            <remote-alias>results.Value.city</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.classification</remote-name>
            <remote-type>130</remote-type>
            <local-name>[classification]</local-name>
            <parent-name>[food-enforcement-0001-of-0001.json]</parent-name>
            <remote-alias>results.Value.classification</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.code_info</remote-name>
            <remote-type>130</remote-type>
            <local-name>[code_info]</local-name>
            <parent-name>[food-enforcement-0001-of-0001.json]</parent-name>
            <remote-alias>results.Value.code_info</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[country]</local-name>
            <parent-name>[food-enforcement-0001-of-0001.json]</parent-name>
            <remote-alias>results.Value.country</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.distribution_pattern</remote-name>
            <remote-type>130</remote-type>
            <local-name>[distribution_pattern]</local-name>
            <parent-name>[food-enforcement-0001-of-0001.json]</parent-name>
            <remote-alias>results.Value.distribution_pattern</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.event_id</remote-name>
            <remote-type>130</remote-type>
            <local-name>[event_id]</local-name>
            <parent-name>[food-enforcement-0001-of-0001.json]</parent-name>
            <remote-alias>results.Value.event_id</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.initial_firm_notification</remote-name>
            <remote-type>130</remote-type>
            <local-name>[initial_firm_notification]</local-name>
            <parent-name>[food-enforcement-0001-of-0001.json]</parent-name>
            <remote-alias>results.Value.initial_firm_notification</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.more_code_info</remote-name>
            <remote-type>130</remote-type>
            <local-name>[more_code_info]</local-name>
            <parent-name>[food-enforcement-0001-of-0001.json]</parent-name>
            <remote-alias>results.Value.more_code_info</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.postal_code</remote-name>
            <remote-type>130</remote-type>
            <local-name>[postal_code]</local-name>
            <parent-name>[food-enforcement-0001-of-0001.json]</parent-name>
            <remote-alias>results.Value.postal_code</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.product_description</remote-name>
            <remote-type>130</remote-type>
            <local-name>[product_description]</local-name>
            <parent-name>[food-enforcement-0001-of-0001.json]</parent-name>
            <remote-alias>results.Value.product_description</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.product_quantity</remote-name>
            <remote-type>130</remote-type>
            <local-name>[product_quantity]</local-name>
            <parent-name>[food-enforcement-0001-of-0001.json]</parent-name>
            <remote-alias>results.Value.product_quantity</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.product_type</remote-name>
            <remote-type>130</remote-type>
            <local-name>[product_type]</local-name>
            <parent-name>[food-enforcement-0001-of-0001.json]</parent-name>
            <remote-alias>results.Value.product_type</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.reason_for_recall</remote-name>
            <remote-type>130</remote-type>
            <local-name>[reason_for_recall]</local-name>
            <parent-name>[food-enforcement-0001-of-0001.json]</parent-name>
            <remote-alias>results.Value.reason_for_recall</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.recall_initiation_date</remote-name>
            <remote-type>130</remote-type>
            <local-name>[recall_initiation_date]</local-name>
            <parent-name>[food-enforcement-0001-of-0001.json]</parent-name>
            <remote-alias>results.Value.recall_initiation_date</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.recall_number</remote-name>
            <remote-type>130</remote-type>
            <local-name>[recall_number]</local-name>
            <parent-name>[food-enforcement-0001-of-0001.json]</parent-name>
            <remote-alias>results.Value.recall_number</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.recalling_firm</remote-name>
            <remote-type>130</remote-type>
            <local-name>[recalling_firm]</local-name>
            <parent-name>[food-enforcement-0001-of-0001.json]</parent-name>
            <remote-alias>results.Value.recalling_firm</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.report_date</remote-name>
            <remote-type>130</remote-type>
            <local-name>[report_date]</local-name>
            <parent-name>[food-enforcement-0001-of-0001.json]</parent-name>
            <remote-alias>results.Value.report_date</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.state</remote-name>
            <remote-type>130</remote-type>
            <local-name>[state]</local-name>
            <parent-name>[food-enforcement-0001-of-0001.json]</parent-name>
            <remote-alias>results.Value.state</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.status</remote-name>
            <remote-type>130</remote-type>
            <local-name>[status]</local-name>
            <parent-name>[food-enforcement-0001-of-0001.json]</parent-name>
            <remote-alias>results.Value.status</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.termination_date</remote-name>
            <remote-type>130</remote-type>
            <local-name>[termination_date]</local-name>
            <parent-name>[food-enforcement-0001-of-0001.json]</parent-name>
            <remote-alias>results.Value.termination_date</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.voluntary_mandated</remote-name>
            <remote-type>130</remote-type>
            <local-name>[voluntary_mandated]</local-name>
            <parent-name>[food-enforcement-0001-of-0001.json]</parent-name>
            <remote-alias>results.Value.voluntary_mandated</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per food-enforcement-0001-of-0001.json]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at food-enforcement-0001-of-0001.json level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per results]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([results Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at results level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Address 1' datatype='string' name='[address_1]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.address_1</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Address 2' datatype='string' name='[address_2]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.address_2</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Center Classification Date' datatype='string' name='[center_classification_date]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.center_classification_date</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='City' datatype='string' name='[city]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.city</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Classification' datatype='string' name='[classification]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.classification</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Code Info' datatype='string' name='[code_info]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.code_info</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.country</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Distribution Pattern' datatype='string' name='[distribution_pattern]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.distribution_pattern</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Event Id' datatype='string' name='[event_id]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.event_id</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Initial Firm Notification' datatype='string' name='[initial_firm_notification]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.initial_firm_notification</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='More Code Info' datatype='string' name='[more_code_info]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.more_code_info</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Postal Code' datatype='string' name='[postal_code]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.postal_code</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Product Description' datatype='string' name='[product_description]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.product_description</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Product Quantity' datatype='string' name='[product_quantity]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.product_quantity</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Product Type' datatype='string' name='[product_type]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.product_type</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Reason For Recall' datatype='string' name='[reason_for_recall]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.reason_for_recall</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Recall Initiation Date' datatype='string' name='[recall_initiation_date]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.recall_initiation_date</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Recall Number' datatype='string' name='[recall_number]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.recall_number</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Recalling Firm' datatype='string' name='[recalling_firm]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.recalling_firm</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Report Date' datatype='string' name='[report_date]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.report_date</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[results Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>results.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='State' datatype='string' name='[state]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.state</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.status</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Termination Date' datatype='string' name='[termination_date]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.termination_date</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Voluntary Mandated' datatype='string' name='[voluntary_mandated]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.voluntary_mandated</run>
          </formatted-text>
        </desc>
      </column>
      <drill-paths>
        <drill-path name='Country, State'>
          <field>[country]</field>
          <field>[state]</field>
        </drill-path>
      </drill-paths>
      <folder name='Food-Enforcement-0001-Of-0001' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
      </folder>
      <folder name='Results' role='dimensions'>
        <folder-item name='[address_1]' type='field' />
        <folder-item name='[address_2]' type='field' />
        <folder-item name='[center_classification_date]' type='field' />
        <folder-item name='[city]' type='field' />
        <folder-item name='[classification]' type='field' />
        <folder-item name='[code_info]' type='field' />
        <folder-item name='[country]' type='field' />
        <folder-item name='[distribution_pattern]' type='field' />
        <folder-item name='[event_id]' type='field' />
        <folder-item name='[initial_firm_notification]' type='field' />
        <folder-item name='[more_code_info]' type='field' />
        <folder-item name='[postal_code]' type='field' />
        <folder-item name='[product_description]' type='field' />
        <folder-item name='[product_quantity]' type='field' />
        <folder-item name='[product_type]' type='field' />
        <folder-item name='[reason_for_recall]' type='field' />
        <folder-item name='[recall_initiation_date]' type='field' />
        <folder-item name='[recall_number]' type='field' />
        <folder-item name='[recalling_firm]' type='field' />
        <folder-item name='[report_date]' type='field' />
        <folder-item name='[results Index (generated)]' type='field' />
        <folder-item name='[state]' type='field' />
        <folder-item name='[status]' type='field' />
        <folder-item name='[termination_date]' type='field' />
        <folder-item name='[voluntary_mandated]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.713636' measure-ordering='alphabetic' measure-percentage='0.286364' show-structure='false' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Reino Unido&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
    </datasource>
    <datasource caption='food-event-0001-of-0001' inline='true' name='federated.0irn3zv1nd0gcu1fjkv7c0pbbl04' version='10.4'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='food-event-0001-of-0001' name='semistructpassivestore-direct.0kkxi351r9tvq41ekvxht1to68w3'>
            <connection class='semistructpassivestore-direct' directory='C:/Users/Stewart/Documents/GitHub/probable-octo-palm-tree/Data/food-event-0001-of-0001.json' filename='food-event-0001-of-0001.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[food-event-0001-of-0001.json]'>
                  <map key='meta' value='false' />
                  <map key='meta.results' value='false' />
                  <map key='results' value='true' />
                  <map key='results.Value' value='true' />
                  <map key='results.Value.consumer' value='true' />
                  <map key='results.Value.outcomes' value='true' />
                  <map key='results.Value.products' value='true' />
                  <map key='results.Value.products.Value' value='true' />
                  <map key='results.Value.reactions' value='true' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='semistructpassivestore-direct.0kkxi351r9tvq41ekvxht1to68w3' name='food-event-0001-of-0001.json' table='[food-event-0001-of-0001.json]' type='table' />
        <cols>
          <map key='[Document Index (generated)]' value='[food-event-0001-of-0001.json].[Document Index (generated)]' />
          <map key='[age]' value='[food-event-0001-of-0001.json].[results.Value.consumer.age]' />
          <map key='[age_unit]' value='[food-event-0001-of-0001.json].[results.Value.consumer.age_unit]' />
          <map key='[date_created]' value='[food-event-0001-of-0001.json].[results.Value.date_created]' />
          <map key='[date_started]' value='[food-event-0001-of-0001.json].[results.Value.date_started]' />
          <map key='[gender]' value='[food-event-0001-of-0001.json].[results.Value.consumer.gender]' />
          <map key='[industry_code]' value='[food-event-0001-of-0001.json].[results.Value.products.Value.industry_code]' />
          <map key='[industry_name]' value='[food-event-0001-of-0001.json].[results.Value.products.Value.industry_name]' />
          <map key='[name_brand]' value='[food-event-0001-of-0001.json].[results.Value.products.Value.name_brand]' />
          <map key='[outcomes Index (generated)]' value='[food-event-0001-of-0001.json].[results.Value.outcomes.Index (generated)]' />
          <map key='[outcomes]' value='[food-event-0001-of-0001.json].[results.Value.outcomes.Value]' />
          <map key='[products Index (generated)]' value='[food-event-0001-of-0001.json].[results.Value.products.Index (generated)]' />
          <map key='[reactions Index (generated)]' value='[food-event-0001-of-0001.json].[results.Value.reactions.Index (generated)]' />
          <map key='[reactions]' value='[food-event-0001-of-0001.json].[results.Value.reactions.Value]' />
          <map key='[report_number]' value='[food-event-0001-of-0001.json].[results.Value.report_number]' />
          <map key='[results Index (generated)]' value='[food-event-0001-of-0001.json].[results.Index (generated)]' />
          <map key='[role]' value='[food-event-0001-of-0001.json].[results.Value.products.Value.role]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[food-event-0001-of-0001.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[results Index (generated)]</local-name>
            <parent-name>[food-event-0001-of-0001.json]</parent-name>
            <remote-alias>results.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.consumer.age</remote-name>
            <remote-type>130</remote-type>
            <local-name>[age]</local-name>
            <parent-name>[food-event-0001-of-0001.json]</parent-name>
            <remote-alias>results.Value.consumer.age</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.consumer.age_unit</remote-name>
            <remote-type>130</remote-type>
            <local-name>[age_unit]</local-name>
            <parent-name>[food-event-0001-of-0001.json]</parent-name>
            <remote-alias>results.Value.consumer.age_unit</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.consumer.gender</remote-name>
            <remote-type>130</remote-type>
            <local-name>[gender]</local-name>
            <parent-name>[food-event-0001-of-0001.json]</parent-name>
            <remote-alias>results.Value.consumer.gender</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.date_created</remote-name>
            <remote-type>130</remote-type>
            <local-name>[date_created]</local-name>
            <parent-name>[food-event-0001-of-0001.json]</parent-name>
            <remote-alias>results.Value.date_created</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.date_started</remote-name>
            <remote-type>130</remote-type>
            <local-name>[date_started]</local-name>
            <parent-name>[food-event-0001-of-0001.json]</parent-name>
            <remote-alias>results.Value.date_started</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.outcomes.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[outcomes Index (generated)]</local-name>
            <parent-name>[food-event-0001-of-0001.json]</parent-name>
            <remote-alias>results.Value.outcomes.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.outcomes.Value</remote-name>
            <remote-type>130</remote-type>
            <local-name>[outcomes]</local-name>
            <parent-name>[food-event-0001-of-0001.json]</parent-name>
            <remote-alias>results.Value.outcomes.Value</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.products.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[products Index (generated)]</local-name>
            <parent-name>[food-event-0001-of-0001.json]</parent-name>
            <remote-alias>results.Value.products.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.products.Value.industry_code</remote-name>
            <remote-type>130</remote-type>
            <local-name>[industry_code]</local-name>
            <parent-name>[food-event-0001-of-0001.json]</parent-name>
            <remote-alias>results.Value.products.Value.industry_code</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.products.Value.industry_name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[industry_name]</local-name>
            <parent-name>[food-event-0001-of-0001.json]</parent-name>
            <remote-alias>results.Value.products.Value.industry_name</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.products.Value.name_brand</remote-name>
            <remote-type>130</remote-type>
            <local-name>[name_brand]</local-name>
            <parent-name>[food-event-0001-of-0001.json]</parent-name>
            <remote-alias>results.Value.products.Value.name_brand</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.products.Value.role</remote-name>
            <remote-type>130</remote-type>
            <local-name>[role]</local-name>
            <parent-name>[food-event-0001-of-0001.json]</parent-name>
            <remote-alias>results.Value.products.Value.role</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.reactions.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[reactions Index (generated)]</local-name>
            <parent-name>[food-event-0001-of-0001.json]</parent-name>
            <remote-alias>results.Value.reactions.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.reactions.Value</remote-name>
            <remote-type>130</remote-type>
            <local-name>[reactions]</local-name>
            <parent-name>[food-event-0001-of-0001.json]</parent-name>
            <remote-alias>results.Value.reactions.Value</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.report_number</remote-name>
            <remote-type>130</remote-type>
            <local-name>[report_number]</local-name>
            <parent-name>[food-event-0001-of-0001.json]</parent-name>
            <remote-alias>results.Value.report_number</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per food-event-0001-of-0001.json]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at food-event-0001-of-0001.json level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per outcomes]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)],[results Index (generated)] : COUNTD([outcomes Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at outcomes level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per products]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)],[results Index (generated)] : COUNTD([products Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at products level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per reactions]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)],[results Index (generated)] : COUNTD([reactions Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at reactions level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per results]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([results Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at results level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Age' datatype='string' name='[age]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.consumer.age</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Age Unit' datatype='string' name='[age_unit]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.consumer.age_unit</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Date Created' datatype='string' name='[date_created]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.date_created</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Date Started' datatype='string' name='[date_started]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.date_started</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Gender' datatype='string' name='[gender]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.consumer.gender</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Industry Code' datatype='string' name='[industry_code]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.products.Value.industry_code</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Industry Name' datatype='string' name='[industry_name]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.products.Value.industry_name</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Name Brand' datatype='string' name='[name_brand]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.products.Value.name_brand</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[outcomes Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>results.Value.outcomes.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Outcomes' datatype='string' name='[outcomes]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.outcomes.Value</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[products Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>results.Value.products.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[reactions Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>results.Value.reactions.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Reactions' datatype='string' name='[reactions]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.reactions.Value</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Report Number' datatype='string' name='[report_number]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.report_number</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[results Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>results.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Role' datatype='string' name='[role]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.products.Value.role</run>
          </formatted-text>
        </desc>
      </column>
      <folder name='Consumer' role='dimensions'>
        <folder-item name='[age]' type='field' />
        <folder-item name='[age_unit]' type='field' />
        <folder-item name='[gender]' type='field' />
      </folder>
      <folder name='Food-Event-0001-Of-0001' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
      </folder>
      <folder name='Products' role='dimensions'>
        <folder-item name='[industry_code]' type='field' />
        <folder-item name='[industry_name]' type='field' />
        <folder-item name='[name_brand]' type='field' />
        <folder-item name='[products Index (generated)]' type='field' />
        <folder-item name='[role]' type='field' />
      </folder>
      <folder name='Results' role='dimensions'>
        <folder-item name='[date_created]' type='field' />
        <folder-item name='[date_started]' type='field' />
        <folder-item name='[outcomes Index (generated)]' type='field' />
        <folder-item name='[outcomes]' type='field' />
        <folder-item name='[reactions Index (generated)]' type='field' />
        <folder-item name='[reactions]' type='field' />
        <folder-item name='[report_number]' type='field' />
        <folder-item name='[results Index (generated)]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.670455' measure-ordering='alphabetic' measure-percentage='0.329545' show-structure='false' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Reino Unido&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Recalls by Country'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Recalls by Country</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='food-enforcement-0001-of-0001' name='federated.10mwfcb1gezdpd102hilz1dg19py' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.10mwfcb1gezdpd102hilz1dg19py'>
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.country</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.10mwfcb1gezdpd102hilz1dg19py].[Longitude (generated)]' field-type='quantitative' max='40505844.559392408' min='2469415.029541689' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.10mwfcb1gezdpd102hilz1dg19py].[Latitude (generated)]' field-type='quantitative' max='15271687.199200362' min='-6677818.2679001512' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.10mwfcb1gezdpd102hilz1dg19py].[sum:Number of Records:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.10mwfcb1gezdpd102hilz1dg19py].[none:country:nk]' />
              <color column='[federated.10mwfcb1gezdpd102hilz1dg19py].[sum:Number of Records:qk]' />
              <geometry column='[federated.10mwfcb1gezdpd102hilz1dg19py].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.10mwfcb1gezdpd102hilz1dg19py].[Latitude (generated)]</rows>
        <cols>[federated.10mwfcb1gezdpd102hilz1dg19py].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Recalls by State'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Recalls by State</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='food-enforcement-0001-of-0001' name='federated.10mwfcb1gezdpd102hilz1dg19py' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.10mwfcb1gezdpd102hilz1dg19py'>
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.country</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[state]' derivation='None' name='[none:state:nk]' pivot='key' type='nominal' />
            <column caption='State' datatype='string' name='[state]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.state</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.10mwfcb1gezdpd102hilz1dg19py].[none:country:nk]'>
            <groupfilter function='member' level='[none:country:nk]' member='&quot;United States&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.10mwfcb1gezdpd102hilz1dg19py].[none:country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>([federated.10mwfcb1gezdpd102hilz1dg19py].[none:country:nk] / [federated.10mwfcb1gezdpd102hilz1dg19py].[none:state:nk])</rows>
        <cols />
      </table>
    </worksheet>
    <worksheet name='Recalls by State Map'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Recalls by State</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='food-enforcement-0001-of-0001' name='federated.10mwfcb1gezdpd102hilz1dg19py' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.10mwfcb1gezdpd102hilz1dg19py'>
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.country</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[state]' derivation='None' name='[none:state:nk]' pivot='key' type='nominal' />
            <column caption='State' datatype='string' name='[state]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.state</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.10mwfcb1gezdpd102hilz1dg19py].[none:country:nk]'>
            <groupfilter function='member' level='[none:country:nk]' member='&quot;United States&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.10mwfcb1gezdpd102hilz1dg19py].[none:country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.10mwfcb1gezdpd102hilz1dg19py].[Longitude (generated)]' field-type='quantitative' max='-5672887.6323403567' min='-15104605.426504824' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.10mwfcb1gezdpd102hilz1dg19py].[Latitude (generated)]' field-type='quantitative' max='7483312.2193828207' min='2040594.7023589588' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.10mwfcb1gezdpd102hilz1dg19py].[none:country:nk]' />
              <lod column='[federated.10mwfcb1gezdpd102hilz1dg19py].[none:state:nk]' />
              <size column='[federated.10mwfcb1gezdpd102hilz1dg19py].[sum:Number of Records:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.10mwfcb1gezdpd102hilz1dg19py].[Latitude (generated)]</rows>
        <cols>[federated.10mwfcb1gezdpd102hilz1dg19py].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Sheet 3'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (Recall per State)' name='federated.1ta0o650b2z2s811510bc16o6fau' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1ta0o650b2z2s811510bc16o6fau'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='integer' name='[Populations]' role='measure' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column datatype='real' name='[relative]' role='measure' type='quantitative' />
            <column-instance column='[Populations]' derivation='Sum' name='[sum:Populations:qk]' pivot='key' type='quantitative' />
            <column-instance column='[relative]' derivation='Sum' name='[sum:relative:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1ta0o650b2z2s811510bc16o6fau].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1ta0o650b2z2s811510bc16o6fau].[sum:Populations:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1ta0o650b2z2s811510bc16o6fau].[sum:relative:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1ta0o650b2z2s811510bc16o6fau].[none:Country:nk]'>
            <groupfilter function='member' level='[none:Country:nk]' member='&quot;United States&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1ta0o650b2z2s811510bc16o6fau].[none:Country:nk]</column>
            <column>[federated.1ta0o650b2z2s811510bc16o6fau].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.1ta0o650b2z2s811510bc16o6fau].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
    </worksheet>
    <worksheet name='Sheet 4'>
      <table>
        <view>
          <datasources>
            <datasource caption='food-event-0001-of-0001' name='federated.0irn3zv1nd0gcu1fjkv7c0pbbl04' />
          </datasources>
          <datasource-dependencies datasource='federated.0irn3zv1nd0gcu1fjkv7c0pbbl04'>
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column caption='Gender' datatype='string' name='[gender]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.consumer.gender</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[gender]' derivation='None' name='[none:gender:nk]' pivot='key' type='nominal' />
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.0irn3zv1nd0gcu1fjkv7c0pbbl04].[none:gender:nk]</rows>
        <cols>[federated.0irn3zv1nd0gcu1fjkv7c0pbbl04].[sum:Number of Records:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Sheet 7'>
      <table>
        <view>
          <datasources>
            <datasource caption='food-enforcement-0001-of-0001' name='federated.10mwfcb1gezdpd102hilz1dg19py' />
          </datasources>
          <datasource-dependencies datasource='federated.10mwfcb1gezdpd102hilz1dg19py'>
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column-instance column='[report_date]' derivation='None' name='[none:report_date:nk]' pivot='key' type='nominal' />
            <column caption='Report Date' datatype='string' name='[report_date]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.report_date</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.10mwfcb1gezdpd102hilz1dg19py].[none:report_date:nk]</rows>
        <cols>[federated.10mwfcb1gezdpd102hilz1dg19py].[sum:Number of Records:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='interesting thing'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Possible outbreaks:&#10;&#10;or little ones are mislabling&#10;big ones are samenalla&#10;depends on order of things</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='food-enforcement-0001-of-0001' name='federated.10mwfcb1gezdpd102hilz1dg19py' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.10mwfcb1gezdpd102hilz1dg19py'>
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.country</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[report_date]' derivation='None' name='[none:report_date:nk]' pivot='key' type='nominal' />
            <column-instance column='[termination_date]' derivation='None' name='[none:termination_date:nk]' pivot='key' type='nominal' />
            <column caption='Report Date' datatype='string' name='[report_date]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.report_date</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
            <column caption='Termination Date' datatype='string' name='[termination_date]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.termination_date</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.10mwfcb1gezdpd102hilz1dg19py].[none:country:nk]'>
            <groupfilter function='member' level='[none:country:nk]' member='&quot;United States&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.10mwfcb1gezdpd102hilz1dg19py].[none:termination_date:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:termination_date:nk]' />
              <groupfilter function='member' level='[none:termination_date:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.10mwfcb1gezdpd102hilz1dg19py].[none:termination_date:nk]</column>
            <column>[federated.10mwfcb1gezdpd102hilz1dg19py].[none:country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <size column='[federated.10mwfcb1gezdpd102hilz1dg19py].[sum:Number of Records:qk]' />
              <color column='[federated.10mwfcb1gezdpd102hilz1dg19py].[sum:Number of Records:qk]' />
              <text column='[federated.10mwfcb1gezdpd102hilz1dg19py].[none:report_date:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
    </worksheet>
  </worksheets>
  <windows source-height='72'>
    <window class='worksheet' name='Recalls by Country'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.10mwfcb1gezdpd102hilz1dg19py].[sum:Number of Records:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.10mwfcb1gezdpd102hilz1dg19py].[none:country:nk]</field>
            <field>[federated.10mwfcb1gezdpd102hilz1dg19py].[none:reason_for_recall:nk]</field>
            <field>[federated.10mwfcb1gezdpd102hilz1dg19py].[none:state:nk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
    </window>
    <window class='worksheet' name='Recalls by State Map'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.10mwfcb1gezdpd102hilz1dg19py].[sum:Number of Records:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <node-selection select-tuples='false'>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.10mwfcb1gezdpd102hilz1dg19py].[none:country:nk]</field>
                </fields>
                <multibucket>
                  <bucket>&quot;United States&quot;</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
          </node-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.10mwfcb1gezdpd102hilz1dg19py].[none:country:nk]</field>
            <field>[federated.10mwfcb1gezdpd102hilz1dg19py].[none:state:nk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
    </window>
    <window class='worksheet' name='Recalls by State'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <node-selection select-tuples='false'>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.10mwfcb1gezdpd102hilz1dg19py].[none:country:nk]</field>
                </fields>
                <multibucket>
                  <bucket>&quot;United States&quot;</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
          </node-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.10mwfcb1gezdpd102hilz1dg19py].[none:country:nk]</field>
            <field>[federated.10mwfcb1gezdpd102hilz1dg19py].[none:state:nk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='2' />
      </viewpoint>
    </window>
    <window class='worksheet' name='Sheet 3'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ta0o650b2z2s811510bc16o6fau].[none:Country:nk]</field>
            <field>[federated.1ta0o650b2z2s811510bc16o6fau].[none:State:nk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='2' />
      </viewpoint>
    </window>
    <window class='worksheet' name='Sheet 4'>
      <cards>
        <edge name='left'>
          <strip size='100'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0irn3zv1nd0gcu1fjkv7c0pbbl04].[none:gender:nk]</field>
            <field>[federated.0irn3zv1nd0gcu1fjkv7c0pbbl04].[none:reactions:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' maximized='true' name='interesting thing'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.10mwfcb1gezdpd102hilz1dg19py].[sum:Number of Records:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.10mwfcb1gezdpd102hilz1dg19py].[none:city:nk]</field>
            <field>[federated.10mwfcb1gezdpd102hilz1dg19py].[none:country:nk]</field>
            <field>[federated.10mwfcb1gezdpd102hilz1dg19py].[none:distribution_pattern:nk]</field>
            <field>[federated.10mwfcb1gezdpd102hilz1dg19py].[none:product_quantity:nk]</field>
            <field>[federated.10mwfcb1gezdpd102hilz1dg19py].[none:product_type:nk]</field>
            <field>[federated.10mwfcb1gezdpd102hilz1dg19py].[none:reason_for_recall:nk]</field>
            <field>[federated.10mwfcb1gezdpd102hilz1dg19py].[none:recall_initiation_date:nk]</field>
            <field>[federated.10mwfcb1gezdpd102hilz1dg19py].[none:recall_number:nk]</field>
            <field>[federated.10mwfcb1gezdpd102hilz1dg19py].[none:report_date:nk]</field>
            <field>[federated.10mwfcb1gezdpd102hilz1dg19py].[none:termination_date:nk]</field>
            <field>[federated.10mwfcb1gezdpd102hilz1dg19py].[none:voluntary_mandated:nk]</field>
            <field>[federated.10mwfcb1gezdpd102hilz1dg19py].[sum:Number of Records:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Sheet 7'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.10mwfcb1gezdpd102hilz1dg19py].[none:report_date:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Recalls by Country' width='192'>
      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
      PYYRRnhs+P8B9mI7J1s6rgIAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Recalls by State' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Recalls by State Map' width='192'>
      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
    </thumbnail>
    <thumbnail height='24' name='Sheet 3' width='84'>
      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
    </thumbnail>
    <thumbnail height='179' name='Sheet 4' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAACzCAYAAADfahNoAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAASbklEQVR4nO3dfVRU17nH8W8yghBKFIQIhNBgxCAmOiNWSoqRXl1GElOoSaPSxBfSimJy
      TdLYm8ZUq8u06Y1tjQpmkoovpFpzNUIaGeONLYm0BG+RgVRExZcoylgERQozDk7P/YOX8Kqg
      4GTcz2ct//CcM3v2zDo/9jlnzrPPbZqmaQihqNud3QEhnEkCIJQmARBKkwAIpUkAhNIkAEJp
      EgChNAmAUJoEQChNAiCUJgEQSpMACKVJAITSJABCaRIAoTQJgFCaBEAoTQIglCYBEEqTAAil
      SQCE0iQAQmkSAKE0CYBQmgRAKE0CIJQmARBKkwC4mPr6emd3odfU1tY6uwsSAKE2CYBQWj9n
      d0D0XPyrf3R2F24ZMgIIpUkAhNKUPgSymJazNPNMqyV3k7BsCXEBff7OmJZnE7gkCX1fv5W4
      KqUDAME3aYcXX1dyCCSUpvgI0BUHVQVbWJeRx2mrDu/wicybG89QL7CY1rL9ogcX8w9w2qrD
      b3wiMwYfJPNPBzhtdyds6iu8PDEAqKH4D2ls/vwktXZw9xvJEwvmERuk6/h2dWWYNm4gu/g8
      Ds/BRE5byOzoQXSypehligegnMylyWS2/D+K+cYk9NU5mI6NYcGbz+Dj5sB2chepH5bykxnh
      wGUue09g/htzGOR2jo9eT2N/SBIL3vwRPnzBptWFWCbGEUB//GKeYdlTwXi5QcOFP2PMKiF2
      9oPt+uCgZPdneE39OasWeKBruMDnG7ayLyKF2AE39ctQkuIB6PwcoKbYzL6977Nvb6uFd7th
      IRzwIWLMcAZ5AAQRHDyE4Jgh+ADgz10+5U0vcIMzu1m9poiTtfamNhKw8CBt3+4oRbn55OzJ
      5w+tlkaNhVg5Q+5zigegc3a7jci5acyN7HgQYuluI5V7ef/AMGavmEOghw4wk768opMNG7js
      8zhLfzeFoBvos7g+chLcCf/wBzi1cyvmCw0AOGxVHCoopaYnjTTYuc3fHx83HQ5bFcdzD3C8
      0w3DGO6Xw9Y9J7E5ABqoK9+P+dSNfgrRHTICdCZkCikT3+btZQtZZ3Xg7n0vo6ZM52nA2t02
      gr7LePsvWZRyHofnPUQnfotg/t3Jhh5EzUri5Oq1LNpRi13nyeCh0UydPbb3Po/o0m2apmnO
      7oTovvr6emas+NDZ3bhlyCGQUJoEQChNDoFcTH19PXfccYezu9Eramtr8fb2dmofZAQQSpMA
      CKVJAITSJABCafJDmAuSmuDeIyOAUJoEQChNAtBD5vRkkl98jxJHuxW2fNJSkklON3ejFQum
      5el0Z0vRtyQAPRZFwqRzHDjcNgG2ogLs42K520m9EtdHAnAdAg0RnDtwmK8iYKOowI7eMNCJ
      vRLXQ64CXY8AAxHnPuGwI4IIHWArosCu54cDrXzWspHUBLsCCcB1CSBKX032YQcRETpsRQUQ
      lcQA/tJqG6kJdgUSgOvkaxhBdfZhHBH3U3oQDIkecLH1FlIT7AokANfL18CI6mwON9g5YDOQ
      6NFuvdQEuwQ5Cb5uvhhGVPN/2/ZjMxhov/9LTbBrkBHgBvgaRmDZcZjYJzvs/lIT7CKkIMbF
      SE1w75JDIKE0CYBQmhwCuRipCe5dMgIIpUkAhNIkAEJpEgChNPkhzAW5ek1w1i+nO7sLLWQE
      EEqTAAil3fQAmNOTSf71XqpbL7SYWN6tWtpuqslh1fPPk5Zn6702m5nTWW7qxnNiLCbSu9xO
      aoK/LpwwAkTySNjnZJqvb+c0p197x6kpLGHws4lQWMSNR8CCaflyurPPC9fjhAD0Y8ijE7Fl
      fkzf3PFbQ6HZg+EPGjBQQNENJyCAuCXyMO1blXOuAnlEMTXqdbbnTeS5aK92K1s/oxc874nm
      mfmJRA76gvTkdeQD5OcDcHfCMpa03zNtJZS4jyBJ58HlCDs7Sh1E6XWAjfy0VP41/SdM8G3a
      9lQWbxUaWBg/4Cr1uxZMy7MJXJJExwKtq9f91h/bTeriAorPO1p9DqkJ/jpx2klwQNxiEi+/
      y6qcNmcDVO55gx0k8tqqNIzGNFa9lgg73mBPpZ4ko5H5UVHMNxoxGo0dd35s5P3+b0T8MAoP
      YEDsdAJ3bcLsAPAgKuUx/rkuq3HkcZTw3kcDmB0fAnwDv1B/BvV3B8B+vpitv9/TjSdCXv11
      d9w3mQWvr2n6HD/AvnVTJ4dvpWx97U0yi89jBxzWc+zf+Cqb5AThpnDq7wC+4yYzeFk2JcMG
      9U6DtiIKS45Q9NNktrYsvINxhx3oI3RAON954GMKT8FdFbnUR85kAPSgfLGdHr2unvo68Oyw
      XEoincm5l0F14Xwv7iI7d3+10/iPHE3l7iwOXWgAGrhwKIvdlaMZ6d+8xXGOlDUADhoaOk5O
      9c9HFmNsGiGMRiNpCyMpbTWHT8i4B/jyr2aKDnkTM6apkqvb5YvtXON1V6w2GgAcNk7u3cyn
      /qMJ79CIlEQ6k9N/CfaK/h4P7Hqd7CGjGxcETGLe5C2sW7aw1TlAfMtMCuEP6flo7UKSrTrC
      Zizh5djmZDgoPWhlXEJIm/Z1EQ/zrZ2ffTWHj6+BEWdf438GP8evmw+yu12+2M5VX/cNbj+c
      zqKUc1jxZPCIx/nRXH3H2mEpiXQqqQdwMbdCSWTzrRBSDyCEk0kAhNLkEMjFSElk75IRQChN
      AiCUJgEQSpMACKVJAITSJABCaRIAobSbGwCLieXJL/Jeu2eMmtN7p+LKnJ5McnLTv5QXWJFR
      QFX7x5l+7VkwpZu6cSu26A03fQQInjCOizu7c699J65aZwvwVa2A8a2lPOG1mze3l11nT6+f
      xZQuJZQu4uYfAnk/xPceyOeD/D4oWG/NzYfhU59gVPlR+WsquuSU26FDHknA4zfZnBgzldD2
      dX+tygPt7n6MfHQOs+OGUmtaztLMM0Am+ZnQ+Ne+szLFrtWVmdi4IbuxRHFwJNMWziZ6kA4s
      JtZuP8dtFQUUn7fj7jeWxJea1nVZotlUAJMOsyZf5O3UHRTf9wQJ5Vtp7GY+jd2cjzFJj6Oq
      gC3rMsg7bUXnHc7EeXOJH+rVrl92dJ7euPtPwHDD37LoFu1mqsjW1mdXaJqmaVWfrNTW/O1f
      mqZpWuH6ZVrjYqtWuP7nWuq+s5r1iqZdsZ7V9qX+XFtfaO3w+s4Url+vFTb/x16tlexYoa1o
      3v7KQW37+k+1s9YrTavzNGPqX7SLTe2uXNO8zq5VF2Zoi9/4RKtqWrdixQ6tpNreuK5kh7Zi
      RbbW2Gqhtn7Vem3Df2/Q8i32Vh9zvda2m1XaJxnbmtrQtCvWE1rWyi3aIU3TNOvnWup/pWr7
      zlq1K5qmXbGWaTuMze13VFdXd9Wv2JVcunTJ2V3QnFYQ4xv7GINWfEjp2Bmtlh7FXD6WhKTA
      xsIRXSAxCWP5856joG//fN3O5LMuubFgHnc/7p8wnecnNZXSHC0iNz+HPfltHkbKWGLRAz73
      DWsqa9Tho3+Sx3K3cApwFB/Af/IrDPdpHKp8hscz2f8NiivjCPAHar5BzE+eYmj72v7Waoox
      79vL+/v2tlp4N24WCLccpN8PkokJbBoKPbzwdHqZkjqc91Xrwnlk/C425FQzodcabTwserAq
      j43vlKH/jwjubD7EariMz+NL+d2U7lTedlW/24ngYVff+QHsdmyRc0mbG9lhpgfHmSv008n8
      D87i1N8BfMdNJfTzTA7UNy8JQx+8n8zcCmwOcNgqyM3cT7A+rOU1FcfKuOQAGhoa6207oRsU
      zbP/Gc2XG1PJOdt0HTRsOH45W9lz0tZYH9xQR/l+c8vcRF3V7167RrkzFRwru0RjNxvAP5wH
      Tu1kq/lCy3tUHSqgtAZ0d99Dxa4PONL4oagrP8KxCz3/LsX1ce5gqwvl0YkmXkqHx58E8EA/
      bSYVG9eyKKPVSbC+qZI2wMDDt61hcUoGDs/xLFiVyIiu2vYaytQFT5KTmsoHk2cTPyyKWUkn
      Wb12ETtq7eg8BzM0eirNpbeVn61l0Se1Het3r1Gj3JkAw8PctmYxKRkOPMcvYFXiCKakTOTt
      t5excJ0Vh7s3946awvSngQGTmPOdt0ldnMJ5hyf3jI5iYP+BvfP9imuSghho/H2h0ECSC0z/
      JgUxvUtuhRBKkxHAxcgI0LtkBBBKkwAIpUkAhNIkAEJpEgChNAmAUJoEQChNAiCUdgsFoPNH
      j3a3PFHKGNV0CwVAiJ6TAAilKVV7ZDG9w8eOAVTtz6PsnBWdXwzPvvoM+nYFLQ2n9vLOn+w8
      PjeOEDcz6W8d4ZtexzAVnaTW4UlYwk95cVIQOtrW87r7jeTRObOJG+pF9d7VZAcu4OkIHVBD
      zqqfkRP6Cr+Ib3yE04kP1lL60HPEBVy9fdG3lAoA1FJeG8GMF99kiA+c+vBXfHIU9C2V9Q4u
      ffE+xrx7SZo3gZZH+laexx47mxVzAnGr28/6d4uonBREgM3Mts0nGPXcm8wLdKOhIo/0ddsw
      v5qEfkQY5/5yFCLCwVbCmZBpGM4cxEIIAZyi+EQQI6deo/2b/wUpR7FDIB9GfzeGIT5ugBsh
      IcGt1pWTuTSFRVl38vSz0bR5nvWQh4gbFYiHDnR3hnCPT9Pyo2bKxyYQE+iBDh0egTEkjC3H
      fBQIMBBRVcIJwFZ0mH4R4xkZcJqD1YDlIKdDDYReq33R526hAHji6VWPtc10QzZOHKugeyW3
      wSQsS2Np5D/YvOcsNz6hXADhQScoPuWg9BDcHwahEd4cLq6hpvQEgyJCr92E6HO3UAAGMDLy
      MlnpuVTYGutrL+zfwo66bzPmqvW7rekIinuORyreZZO57tqbh+kJ3p9JboUNBw5sFblk7g+m
      uYQ5NCKIsuIcDvXX86AOCDfgc7yAguN3Mirsqi2Lm+SWOgfwjZ3HzHOr+c2iDGrtuqb63Vh8
      e9SKF/pZP6Zi5Vo+8n2JKSFX2dRDz7SZFWxcu4iMVifBzSXMhBsI+v1qLjzx26YT2jCGs5p3
      mMsaOcP9WpCKMBcjFWG96xY6BBKi5yQAQmkSAKE0CYBQmpwEu5j6+vprbyS67Za6DKqKW+Uq
      0NfhipYcAgmlSQCE0iQAQmkSAKE0uQoklCYjgFCaBEAoTQIglCYBEEqTAAilSQBcWF1ZFitf
      SCE5+XkWp+ZwtlUhszm97Sx5ti82suy9ki4fLdubHJeOYEpdwgspySSnvMCS9XlUtfStjrKs
      lY3rnl9Mak6r+muLifQ20/NZ2PPrVeytvPEK7a5IAFyVzcy2zWf49s/ewpj2OrMC/8o7H53q
      fNs6M1s+6M+0GRG49XnHKtm7MRt7zHzeWGPE+NZSZnj/Lxv31TR1exubz3ybn71lJO31WQT+
      9R0677aDs6ZNlETNZIJ/39WPSgBclK0wl8rx04kZ7Aa6OxkW/32GFv2dEx22rMO87WMGznyK
      8JtSh+zLhAUvEN80zQtuPgyPGY231QrYKMytZPz0GBq7PYz47w+l6O8de+04u4eMEw/z49ie
      VXT3lATARV28CGFDWu0cuvsZHnCe6nZHC3UFf2DXwKeID71ZVfi6ttPQOKrI++g49xoCgItc
      JIy23R5OwPnqttPQOM5i2nCMh2dF027Svl4nt0O7KPvl2/H0bL1Eh66fhYpKaJxSLp91yfng
      EUXKylCnTLPYcC6XzemHiZi7gEmDAOxcvt2Ttt3W0c9SQXO3yzOXkpwJ90xdzmt9vfcjI4DL
      cu//b6zW1kscOK4EcFfLHEhRzDca+e30erZuL+2Fib56wsGlggzW7PEk4afPEt0yzZ47/f9t
      pW23HVwJuIvmbgcnLMOY9goRee+RU933PZUAuKiBA+Ho8VZ7iOMwhyx++Lb7U+8VPYfp1m3d
      m+irlzhKt7OxYjzPPxPZdopJBjKQo7Tt9iEsfr5tRyhdKPFzI8h/19TmylZfkAC4KA9DDP6f
      /pHccw3guMSRrJ2UjRpDxwkXGyf6umvXBvJuSgZq2PfnBibGhXRyxckDQ4w/n/4xl8ZuHyFr
      ZxmjxnTstS4ojucmnmZD1ok+Hb3kHMBVeeiZNvNL1v1qIRlWHX5jE3lpdhfT2OmCiJtzHyvX
      mvjmy3EE9ekJwSlO/mMfW1P2tV0cNR9jkh4P/TRmfrmOXy3MwKrzY2ziS3TVba/IH/JY0Uo2
      mV8mqf0c9r1EbocWSpNDIKE0CYBQmgRAKE0CIJQmARBKkwAIpUkAhNIkAEJpEgChNAmAUJoE
      QChNAiCUJgEQSpMACKVJAITSJABCaRIAoTQJgFCaBEAoTQIglCYBEEqTAAilSQCE0iQAQmkS
      AKE0CYBQmgRAKE0CIJQmARBKkwAIpf0/JOyyg+iIhtEAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Sheet 7' width='192'>
      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
      8x8B6U1UJknRm5wAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='interesting thing' width='192'>
      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
      dQsAAAAASUVORK5CYII=
    </thumbnail>
  </thumbnails>
</workbook>
