<?xml version='1.0' encoding='utf-8' ?>

<!-- build 10400.17.1103.1137                               -->
<workbook original-version='10.4' source-build='10.4.1 (10400.17.1103.1137)' source-platform='win' version='10.4' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='food-enforcement_ProcessedData' inline='true' name='federated.0aod3ah1xoffqa1azx3491fdo1jb' version='10.4'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='food-enforcement_ProcessedData' name='semistructpassivestore-direct.1vktxt21jxk4ah1epbioc1eedhxg'>
            <connection class='semistructpassivestore-direct' directory='C:/Users/Stewart/Documents/GitHub/probable-octo-palm-tree/FileHandling' filename='food-enforcement_ProcessedData.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[food-enforcement_ProcessedData.json]'>
                  <map key='results' value='true' />
                  <map key='results.Value' value='true' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='semistructpassivestore-direct.1vktxt21jxk4ah1epbioc1eedhxg' name='food-enforcement_ProcessedData.json' table='[food-enforcement_ProcessedData.json]' type='table' />
        <cols>
          <map key='[Document Index (generated)]' value='[food-enforcement_ProcessedData.json].[Document Index (generated)]' />
          <map key='[address_1]' value='[food-enforcement_ProcessedData.json].[results.Value.address_1]' />
          <map key='[address_2]' value='[food-enforcement_ProcessedData.json].[results.Value.address_2]' />
          <map key='[center_classification_date]' value='[food-enforcement_ProcessedData.json].[results.Value.center_classification_date]' />
          <map key='[city]' value='[food-enforcement_ProcessedData.json].[results.Value.city]' />
          <map key='[classification]' value='[food-enforcement_ProcessedData.json].[results.Value.classification]' />
          <map key='[code_info]' value='[food-enforcement_ProcessedData.json].[results.Value.code_info]' />
          <map key='[country]' value='[food-enforcement_ProcessedData.json].[results.Value.country]' />
          <map key='[distribution_pattern]' value='[food-enforcement_ProcessedData.json].[results.Value.distribution_pattern]' />
          <map key='[event_id]' value='[food-enforcement_ProcessedData.json].[results.Value.event_id]' />
          <map key='[initial_firm_notification]' value='[food-enforcement_ProcessedData.json].[results.Value.initial_firm_notification]' />
          <map key='[more_code_info]' value='[food-enforcement_ProcessedData.json].[results.Value.more_code_info]' />
          <map key='[postal_code]' value='[food-enforcement_ProcessedData.json].[results.Value.postal_code]' />
          <map key='[product_description]' value='[food-enforcement_ProcessedData.json].[results.Value.product_description]' />
          <map key='[product_quantity]' value='[food-enforcement_ProcessedData.json].[results.Value.product_quantity]' />
          <map key='[product_type]' value='[food-enforcement_ProcessedData.json].[results.Value.product_type]' />
          <map key='[reason_for_recall]' value='[food-enforcement_ProcessedData.json].[results.Value.reason_for_recall]' />
          <map key='[recall_initiation_date]' value='[food-enforcement_ProcessedData.json].[results.Value.recall_initiation_date]' />
          <map key='[recall_number]' value='[food-enforcement_ProcessedData.json].[results.Value.recall_number]' />
          <map key='[recalling_firm]' value='[food-enforcement_ProcessedData.json].[results.Value.recalling_firm]' />
          <map key='[report_date]' value='[food-enforcement_ProcessedData.json].[results.Value.report_date]' />
          <map key='[results Index (generated)]' value='[food-enforcement_ProcessedData.json].[results.Index (generated)]' />
          <map key='[state]' value='[food-enforcement_ProcessedData.json].[results.Value.state]' />
          <map key='[status]' value='[food-enforcement_ProcessedData.json].[results.Value.status]' />
          <map key='[termination_date]' value='[food-enforcement_ProcessedData.json].[results.Value.termination_date]' />
          <map key='[voluntary_mandated]' value='[food-enforcement_ProcessedData.json].[results.Value.voluntary_mandated]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[results Index (generated)]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.address_1</remote-name>
            <remote-type>130</remote-type>
            <local-name>[address_1]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.address_1</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.address_2</remote-name>
            <remote-type>130</remote-type>
            <local-name>[address_2]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.address_2</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.center_classification_date</remote-name>
            <remote-type>130</remote-type>
            <local-name>[center_classification_date]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.center_classification_date</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.city</remote-name>
            <remote-type>130</remote-type>
            <local-name>[city]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.city</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.classification</remote-name>
            <remote-type>130</remote-type>
            <local-name>[classification]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.classification</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.code_info</remote-name>
            <remote-type>130</remote-type>
            <local-name>[code_info]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.code_info</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[country]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.country</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.distribution_pattern</remote-name>
            <remote-type>130</remote-type>
            <local-name>[distribution_pattern]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.distribution_pattern</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.event_id</remote-name>
            <remote-type>130</remote-type>
            <local-name>[event_id]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.event_id</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.initial_firm_notification</remote-name>
            <remote-type>130</remote-type>
            <local-name>[initial_firm_notification]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.initial_firm_notification</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.more_code_info</remote-name>
            <remote-type>130</remote-type>
            <local-name>[more_code_info]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.more_code_info</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.postal_code</remote-name>
            <remote-type>130</remote-type>
            <local-name>[postal_code]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.postal_code</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.product_description</remote-name>
            <remote-type>130</remote-type>
            <local-name>[product_description]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.product_description</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.product_quantity</remote-name>
            <remote-type>130</remote-type>
            <local-name>[product_quantity]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.product_quantity</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.product_type</remote-name>
            <remote-type>130</remote-type>
            <local-name>[product_type]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.product_type</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.reason_for_recall</remote-name>
            <remote-type>130</remote-type>
            <local-name>[reason_for_recall]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.reason_for_recall</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.recall_initiation_date</remote-name>
            <remote-type>130</remote-type>
            <local-name>[recall_initiation_date]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.recall_initiation_date</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.recall_number</remote-name>
            <remote-type>130</remote-type>
            <local-name>[recall_number]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.recall_number</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.recalling_firm</remote-name>
            <remote-type>130</remote-type>
            <local-name>[recalling_firm]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.recalling_firm</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.report_date</remote-name>
            <remote-type>130</remote-type>
            <local-name>[report_date]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.report_date</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.state</remote-name>
            <remote-type>130</remote-type>
            <local-name>[state]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.state</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.status</remote-name>
            <remote-type>130</remote-type>
            <local-name>[status]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.status</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.termination_date</remote-name>
            <remote-type>130</remote-type>
            <local-name>[termination_date]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.termination_date</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.voluntary_mandated</remote-name>
            <remote-type>130</remote-type>
            <local-name>[voluntary_mandated]</local-name>
            <parent-name>[food-enforcement_ProcessedData.json]</parent-name>
            <remote-alias>results.Value.voluntary_mandated</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per food-enforcement_ProcessedData.json]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at food-enforcement_ProcessedData.json level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per results]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([results Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at results level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Address 1' datatype='string' name='[address_1]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.address_1</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Address 2' datatype='string' name='[address_2]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.address_2</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Center Classification Date' datatype='string' name='[center_classification_date]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.center_classification_date</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='City' datatype='string' name='[city]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.city</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Classification' datatype='string' name='[classification]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.classification</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Code Info' datatype='string' name='[code_info]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.code_info</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.country</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Distribution Pattern' datatype='string' name='[distribution_pattern]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.distribution_pattern</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Event Id' datatype='string' name='[event_id]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.event_id</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Initial Firm Notification' datatype='string' name='[initial_firm_notification]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.initial_firm_notification</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='More Code Info' datatype='string' name='[more_code_info]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.more_code_info</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Postal Code' datatype='string' name='[postal_code]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.postal_code</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Product Description' datatype='string' name='[product_description]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.product_description</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Product Quantity' datatype='string' name='[product_quantity]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.product_quantity</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Product Type' datatype='string' name='[product_type]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.product_type</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Reason For Recall' datatype='string' name='[reason_for_recall]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.reason_for_recall</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Recall Initiation Date' datatype='string' name='[recall_initiation_date]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.recall_initiation_date</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Recall Number' datatype='string' name='[recall_number]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.recall_number</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Recalling Firm' datatype='string' name='[recalling_firm]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.recalling_firm</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Report Date' datatype='string' name='[report_date]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.report_date</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[results Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>results.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='State' datatype='string' name='[state]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.state</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.status</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Termination Date' datatype='string' name='[termination_date]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.termination_date</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Voluntary Mandated' datatype='string' name='[voluntary_mandated]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.voluntary_mandated</run>
          </formatted-text>
        </desc>
      </column>
      <folder name='Results' role='dimensions'>
        <folder-item name='[address_1]' type='field' />
        <folder-item name='[address_2]' type='field' />
        <folder-item name='[center_classification_date]' type='field' />
        <folder-item name='[city]' type='field' />
        <folder-item name='[classification]' type='field' />
        <folder-item name='[code_info]' type='field' />
        <folder-item name='[country]' type='field' />
        <folder-item name='[distribution_pattern]' type='field' />
        <folder-item name='[event_id]' type='field' />
        <folder-item name='[initial_firm_notification]' type='field' />
        <folder-item name='[more_code_info]' type='field' />
        <folder-item name='[postal_code]' type='field' />
        <folder-item name='[product_description]' type='field' />
        <folder-item name='[product_quantity]' type='field' />
        <folder-item name='[product_type]' type='field' />
        <folder-item name='[reason_for_recall]' type='field' />
        <folder-item name='[recall_initiation_date]' type='field' />
        <folder-item name='[recall_number]' type='field' />
        <folder-item name='[recalling_firm]' type='field' />
        <folder-item name='[report_date]' type='field' />
        <folder-item name='[results Index (generated)]' type='field' />
        <folder-item name='[state]' type='field' />
        <folder-item name='[status]' type='field' />
        <folder-item name='[termination_date]' type='field' />
        <folder-item name='[voluntary_mandated]' type='field' />
      </folder>
      <folder name='food-enforcement ProcessedData' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.741866' measure-ordering='alphabetic' measure-percentage='0.258134' show-structure='false' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Reino Unido&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
    </datasource>
    <datasource caption='Normalized Values (Recall per State)' inline='true' name='federated.1y9hdx403gy3i71e2zc0y0jyx8b3' version='10.4'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Recall per State' name='excel-direct.1b8tc530duo0au1b4s7ft0l36m6f'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/Stewart/Documents/GitHub/probable-octo-palm-tree/Data/Recall per State.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <relation connection='excel-direct.1b8tc530duo0au1b4s7ft0l36m6f' name='Normalized Values' table='[&apos;Normalized Values$&apos;]' type='table'>
          <columns gridOrigin='A1:E51:no:A1:E51:0' header='yes' outcome='2'>
            <column datatype='string' name='Country' ordinal='0' />
            <column datatype='string' name='State' ordinal='1' />
            <column datatype='integer' name='Number of Records' ordinal='2' />
            <column datatype='integer' name='State receipts for all commodities ($1000)' ordinal='3' />
            <column datatype='real' name='for every dollar x recalls' ordinal='4' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[Normalized Values]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RGB_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>State</remote-name>
            <remote-type>130</remote-type>
            <local-name>[State]</local-name>
            <parent-name>[Normalized Values]</parent-name>
            <remote-alias>State</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RGB_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Number of Records</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Number of Records]</local-name>
            <parent-name>[Normalized Values]</parent-name>
            <remote-alias>Number of Records</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>State receipts for all commodities ($1000)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[State receipts for all commodities ($1000)]</local-name>
            <parent-name>[Normalized Values]</parent-name>
            <remote-alias>State receipts for all commodities ($1000)</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>for every dollar x recalls</remote-name>
            <remote-type>5</remote-type>
            <local-name>[for every dollar x recalls]</local-name>
            <parent-name>[Normalized Values]</parent-name>
            <remote-alias>for every dollar x recalls</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Normalized Values]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:E51:no:A1:E51:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>2</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec' />
      <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column caption='For Every Dollar X Recalls' datatype='real' name='[for every dollar x recalls]' role='measure' type='quantitative' />
      <drill-paths>
        <drill-path name='Country, State'>
          <field>[Country]</field>
          <field>[State]</field>
        </drill-path>
      </drill-paths>
      <layout dim-ordering='alphabetic' dim-percentage='0.454545' measure-ordering='alphabetic' measure-percentage='0.545455' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Reino Unido&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
    </datasource>
    <datasource caption='FoodTypeVSCause' inline='true' name='federated.06jweit1wnedaq1emelrk1ym4ejy' version='10.4'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='FoodTypeVSCause' name='semistructpassivestore-direct.1rydmvz01z54n2188orjn05lraro'>
            <connection class='semistructpassivestore-direct' directory='C:/Users/Stewart/Documents/GitHub/probable-octo-palm-tree/FileHandling' filename='FoodTypeVSCause.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[FoodTypeVSCause.json]'>
                  <map key='results' value='true' />
                  <map key='results.Value' value='true' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='semistructpassivestore-direct.1rydmvz01z54n2188orjn05lraro' name='FoodTypeVSCause.json' table='[FoodTypeVSCause.json]' type='table' />
        <cols>
          <map key='[Document Index (generated)]' value='[FoodTypeVSCause.json].[Document Index (generated)]' />
          <map key='[address_1]' value='[FoodTypeVSCause.json].[results.Value.address_1]' />
          <map key='[address_2]' value='[FoodTypeVSCause.json].[results.Value.address_2]' />
          <map key='[center_classification_date]' value='[FoodTypeVSCause.json].[results.Value.center_classification_date]' />
          <map key='[city]' value='[FoodTypeVSCause.json].[results.Value.city]' />
          <map key='[classification]' value='[FoodTypeVSCause.json].[results.Value.classification]' />
          <map key='[code_info]' value='[FoodTypeVSCause.json].[results.Value.code_info]' />
          <map key='[country]' value='[FoodTypeVSCause.json].[results.Value.country]' />
          <map key='[distribution_pattern]' value='[FoodTypeVSCause.json].[results.Value.distribution_pattern]' />
          <map key='[event_id]' value='[FoodTypeVSCause.json].[results.Value.event_id]' />
          <map key='[general_food]' value='[FoodTypeVSCause.json].[results.Value.general_food]' />
          <map key='[initial_firm_notification]' value='[FoodTypeVSCause.json].[results.Value.initial_firm_notification]' />
          <map key='[more_code_info]' value='[FoodTypeVSCause.json].[results.Value.more_code_info]' />
          <map key='[postal_code]' value='[FoodTypeVSCause.json].[results.Value.postal_code]' />
          <map key='[product_description]' value='[FoodTypeVSCause.json].[results.Value.product_description]' />
          <map key='[product_quantity]' value='[FoodTypeVSCause.json].[results.Value.product_quantity]' />
          <map key='[product_type]' value='[FoodTypeVSCause.json].[results.Value.product_type]' />
          <map key='[reason]' value='[FoodTypeVSCause.json].[results.Value.reason]' />
          <map key='[reason_for_recall]' value='[FoodTypeVSCause.json].[results.Value.reason_for_recall]' />
          <map key='[recall_initiation_date]' value='[FoodTypeVSCause.json].[results.Value.recall_initiation_date]' />
          <map key='[recall_number]' value='[FoodTypeVSCause.json].[results.Value.recall_number]' />
          <map key='[recalling_firm]' value='[FoodTypeVSCause.json].[results.Value.recalling_firm]' />
          <map key='[report_date]' value='[FoodTypeVSCause.json].[results.Value.report_date]' />
          <map key='[results Index (generated)]' value='[FoodTypeVSCause.json].[results.Index (generated)]' />
          <map key='[specific_food]' value='[FoodTypeVSCause.json].[results.Value.specific_food]' />
          <map key='[specific_reason]' value='[FoodTypeVSCause.json].[results.Value.specific_reason]' />
          <map key='[state]' value='[FoodTypeVSCause.json].[results.Value.state]' />
          <map key='[status]' value='[FoodTypeVSCause.json].[results.Value.status]' />
          <map key='[termination_date]' value='[FoodTypeVSCause.json].[results.Value.termination_date]' />
          <map key='[voluntary_mandated]' value='[FoodTypeVSCause.json].[results.Value.voluntary_mandated]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[results Index (generated)]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.address_1</remote-name>
            <remote-type>130</remote-type>
            <local-name>[address_1]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.address_1</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.address_2</remote-name>
            <remote-type>130</remote-type>
            <local-name>[address_2]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.address_2</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.center_classification_date</remote-name>
            <remote-type>130</remote-type>
            <local-name>[center_classification_date]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.center_classification_date</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.city</remote-name>
            <remote-type>130</remote-type>
            <local-name>[city]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.city</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.classification</remote-name>
            <remote-type>130</remote-type>
            <local-name>[classification]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.classification</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.code_info</remote-name>
            <remote-type>130</remote-type>
            <local-name>[code_info]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.code_info</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[country]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.country</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.distribution_pattern</remote-name>
            <remote-type>130</remote-type>
            <local-name>[distribution_pattern]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.distribution_pattern</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.event_id</remote-name>
            <remote-type>130</remote-type>
            <local-name>[event_id]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.event_id</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.general_food</remote-name>
            <remote-type>130</remote-type>
            <local-name>[general_food]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.general_food</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.initial_firm_notification</remote-name>
            <remote-type>130</remote-type>
            <local-name>[initial_firm_notification]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.initial_firm_notification</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.more_code_info</remote-name>
            <remote-type>130</remote-type>
            <local-name>[more_code_info]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.more_code_info</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.postal_code</remote-name>
            <remote-type>130</remote-type>
            <local-name>[postal_code]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.postal_code</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.product_description</remote-name>
            <remote-type>130</remote-type>
            <local-name>[product_description]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.product_description</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.product_quantity</remote-name>
            <remote-type>130</remote-type>
            <local-name>[product_quantity]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.product_quantity</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.product_type</remote-name>
            <remote-type>130</remote-type>
            <local-name>[product_type]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.product_type</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.reason</remote-name>
            <remote-type>130</remote-type>
            <local-name>[reason]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.reason</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.reason_for_recall</remote-name>
            <remote-type>130</remote-type>
            <local-name>[reason_for_recall]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.reason_for_recall</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.recall_initiation_date</remote-name>
            <remote-type>130</remote-type>
            <local-name>[recall_initiation_date]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.recall_initiation_date</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.recall_number</remote-name>
            <remote-type>130</remote-type>
            <local-name>[recall_number]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.recall_number</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.recalling_firm</remote-name>
            <remote-type>130</remote-type>
            <local-name>[recalling_firm]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.recalling_firm</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.report_date</remote-name>
            <remote-type>130</remote-type>
            <local-name>[report_date]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.report_date</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.specific_food</remote-name>
            <remote-type>130</remote-type>
            <local-name>[specific_food]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.specific_food</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.specific_reason</remote-name>
            <remote-type>130</remote-type>
            <local-name>[specific_reason]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.specific_reason</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.state</remote-name>
            <remote-type>130</remote-type>
            <local-name>[state]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.state</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.status</remote-name>
            <remote-type>130</remote-type>
            <local-name>[status]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.status</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.termination_date</remote-name>
            <remote-type>130</remote-type>
            <local-name>[termination_date]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.termination_date</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.voluntary_mandated</remote-name>
            <remote-type>130</remote-type>
            <local-name>[voluntary_mandated]</local-name>
            <parent-name>[FoodTypeVSCause.json]</parent-name>
            <remote-alias>results.Value.voluntary_mandated</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per FoodTypeVSCause.json]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at FoodTypeVSCause.json level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per results]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([results Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at results level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Address 1' datatype='string' name='[address_1]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.address_1</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Address 2' datatype='string' name='[address_2]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.address_2</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Center Classification Date' datatype='string' name='[center_classification_date]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.center_classification_date</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='City' datatype='string' name='[city]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.city</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Classification' datatype='string' name='[classification]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.classification</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Code Info' datatype='string' name='[code_info]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.code_info</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.country</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Distribution Pattern' datatype='string' name='[distribution_pattern]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.distribution_pattern</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Event Id' datatype='string' name='[event_id]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.event_id</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='General Food' datatype='string' name='[general_food]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.general_food</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Initial Firm Notification' datatype='string' name='[initial_firm_notification]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.initial_firm_notification</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='More Code Info' datatype='string' name='[more_code_info]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.more_code_info</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Postal Code' datatype='string' name='[postal_code]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.postal_code</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Product Description' datatype='string' name='[product_description]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.product_description</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Product Quantity' datatype='string' name='[product_quantity]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.product_quantity</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Product Type' datatype='string' name='[product_type]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.product_type</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Reason' datatype='string' name='[reason]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.reason</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Reason For Recall' datatype='string' name='[reason_for_recall]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.reason_for_recall</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Recall Initiation Date' datatype='string' name='[recall_initiation_date]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.recall_initiation_date</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Recall Number' datatype='string' name='[recall_number]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.recall_number</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Recalling Firm' datatype='string' name='[recalling_firm]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.recalling_firm</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Report Date' datatype='string' name='[report_date]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.report_date</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[results Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>results.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Specific Food' datatype='string' name='[specific_food]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.specific_food</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Specific Reason' datatype='string' name='[specific_reason]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.specific_reason</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='State' datatype='string' name='[state]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.state</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.status</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Termination Date' datatype='string' name='[termination_date]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.termination_date</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Voluntary Mandated' datatype='string' name='[voluntary_mandated]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.voluntary_mandated</run>
          </formatted-text>
        </desc>
      </column>
      <folder name='Food Type VS Cause' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
      </folder>
      <folder name='Results' role='dimensions'>
        <folder-item name='[address_1]' type='field' />
        <folder-item name='[address_2]' type='field' />
        <folder-item name='[center_classification_date]' type='field' />
        <folder-item name='[city]' type='field' />
        <folder-item name='[classification]' type='field' />
        <folder-item name='[code_info]' type='field' />
        <folder-item name='[country]' type='field' />
        <folder-item name='[distribution_pattern]' type='field' />
        <folder-item name='[event_id]' type='field' />
        <folder-item name='[general_food]' type='field' />
        <folder-item name='[initial_firm_notification]' type='field' />
        <folder-item name='[more_code_info]' type='field' />
        <folder-item name='[postal_code]' type='field' />
        <folder-item name='[product_description]' type='field' />
        <folder-item name='[product_quantity]' type='field' />
        <folder-item name='[product_type]' type='field' />
        <folder-item name='[reason]' type='field' />
        <folder-item name='[reason_for_recall]' type='field' />
        <folder-item name='[recall_initiation_date]' type='field' />
        <folder-item name='[recall_number]' type='field' />
        <folder-item name='[recalling_firm]' type='field' />
        <folder-item name='[report_date]' type='field' />
        <folder-item name='[results Index (generated)]' type='field' />
        <folder-item name='[specific_food]' type='field' />
        <folder-item name='[specific_reason]' type='field' />
        <folder-item name='[state]' type='field' />
        <folder-item name='[status]' type='field' />
        <folder-item name='[termination_date]' type='field' />
        <folder-item name='[voluntary_mandated]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.5' measure-ordering='alphabetic' measure-percentage='0.5' show-structure='false' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Reino Unido&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Distribution of Recalls'>
      <table>
        <view>
          <datasources>
            <datasource caption='food-enforcement_ProcessedData' name='federated.0aod3ah1xoffqa1azx3491fdo1jb' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0aod3ah1xoffqa1azx3491fdo1jb'>
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.country</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[state]' derivation='None' name='[none:state:nk]' pivot='key' type='nominal' />
            <column caption='State' datatype='string' name='[state]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.state</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0aod3ah1xoffqa1azx3491fdo1jb].[none:country:nk]'>
            <groupfilter function='member' level='[none:country:nk]' member='&quot;United States&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <sort class='alphabetic' column='[federated.0aod3ah1xoffqa1azx3491fdo1jb].[none:state:nk]' direction='ASC' />
          <slices>
            <column>[federated.0aod3ah1xoffqa1azx3491fdo1jb].[none:country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0aod3ah1xoffqa1azx3491fdo1jb].[Longitude (generated)]' field-type='quantitative' max='-6503614.0139554543' min='-14430456.254844561' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.0aod3ah1xoffqa1azx3491fdo1jb].[Latitude (generated)]' field-type='quantitative' max='6859966.307462845' min='2285660.3040891057' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.0aod3ah1xoffqa1azx3491fdo1jb].[none:country:nk]' />
              <lod column='[federated.0aod3ah1xoffqa1azx3491fdo1jb].[none:state:nk]' />
              <size column='[federated.0aod3ah1xoffqa1azx3491fdo1jb].[sum:Number of Records:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0aod3ah1xoffqa1azx3491fdo1jb].[Latitude (generated)]</rows>
        <cols>[federated.0aod3ah1xoffqa1azx3491fdo1jb].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Normalized Distribution of Recalls'>
      <table>
        <view>
          <datasources>
            <datasource caption='Normalized Values (Recall per State)' name='federated.1y9hdx403gy3i71e2zc0y0jyx8b3' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1y9hdx403gy3i71e2zc0y0jyx8b3'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column caption='For Every Dollar X Recalls' datatype='real' name='[for every dollar x recalls]' role='measure' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[for every dollar x recalls]' derivation='Sum' name='[sum:for every dollar x recalls:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.1y9hdx403gy3i71e2zc0y0jyx8b3].[none:Country:nk]' />
              <lod column='[federated.1y9hdx403gy3i71e2zc0y0jyx8b3].[none:State:nk]' />
              <size column='[federated.1y9hdx403gy3i71e2zc0y0jyx8b3].[sum:for every dollar x recalls:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1y9hdx403gy3i71e2zc0y0jyx8b3].[Latitude (generated)]</rows>
        <cols>[federated.1y9hdx403gy3i71e2zc0y0jyx8b3].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Proportion of Reasons'>
      <table>
        <view>
          <datasources>
            <datasource caption='FoodTypeVSCause' name='federated.06jweit1wnedaq1emelrk1ym4ejy' />
          </datasources>
          <datasource-dependencies datasource='federated.06jweit1wnedaq1emelrk1ym4ejy'>
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.country</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[reason]' derivation='None' name='[none:reason:nk]' pivot='key' type='nominal' />
            <column caption='Reason' datatype='string' name='[reason]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.reason</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:country:nk]'>
            <groupfilter function='member' level='[none:country:nk]' member='&quot;United States&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <sort class='alphabetic' column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:country:nk]' direction='DESC' />
          <slices>
            <column>[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:reason:nk]' />
              <wedge-size column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[sum:Number of Records:qk]' />
              <size column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[sum:Number of Records:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:country:nk]</rows>
        <cols />
      </table>
    </worksheet>
    <worksheet name='Proportion of subreasons'>
      <table>
        <view>
          <datasources>
            <datasource caption='FoodTypeVSCause' name='federated.06jweit1wnedaq1emelrk1ym4ejy' />
          </datasources>
          <datasource-dependencies datasource='federated.06jweit1wnedaq1emelrk1ym4ejy'>
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.country</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[specific_reason]' derivation='None' name='[none:specific_reason:nk]' pivot='key' type='nominal' />
            <column caption='Specific Reason' datatype='string' name='[specific_reason]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.specific_reason</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:country:nk]'>
            <groupfilter function='member' level='[none:country:nk]' member='&quot;United States&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:specific_reason:nk]' />
              <wedge-size column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[sum:Number of Records:qk]' />
              <size column='[federated.06jweit1wnedaq1emelrk1ym4ejy].[sum:Number of Records:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:country:nk]</rows>
        <cols />
      </table>
    </worksheet>
  </worksheets>
  <windows source-height='72'>
    <window class='worksheet' name='Distribution of Recalls'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0aod3ah1xoffqa1azx3491fdo1jb].[sum:Number of Records:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0aod3ah1xoffqa1azx3491fdo1jb].[none:city:nk]</field>
            <field>[federated.0aod3ah1xoffqa1azx3491fdo1jb].[none:country:nk]</field>
            <field>[federated.0aod3ah1xoffqa1azx3491fdo1jb].[none:state:nk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
    </window>
    <window class='worksheet' name='Normalized Distribution of Recalls'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1y9hdx403gy3i71e2zc0y0jyx8b3].[sum:for every dollar x recalls:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <tuple-selection>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.1y9hdx403gy3i71e2zc0y0jyx8b3].[Longitude (generated)]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.1y9hdx403gy3i71e2zc0y0jyx8b3].[Latitude (generated)]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.1y9hdx403gy3i71e2zc0y0jyx8b3].[none:Country:nk]</field>
                  <field>[federated.1y9hdx403gy3i71e2zc0y0jyx8b3].[none:State:nk]</field>
                  <field>[federated.1y9hdx403gy3i71e2zc0y0jyx8b3].[sum:for every dollar x recalls:qk]</field>
                  <field>[federated.1y9hdx403gy3i71e2zc0y0jyx8b3].[Latitude (generated)]</field>
                  <field>[federated.1y9hdx403gy3i71e2zc0y0jyx8b3].[Longitude (generated)]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;United States&quot;</value>
                <value>&quot;MA&quot;</value>
                <value>0.00079611454744248197</value>
                <value>42.329999999999998</value>
                <value>-71.819999999999993</value>
              </tuple>
            </tuple-reference>
          </tuple-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.1y9hdx403gy3i71e2zc0y0jyx8b3].[none:Country:nk]</field>
            <field>[federated.1y9hdx403gy3i71e2zc0y0jyx8b3].[none:State:nk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='2' />
      </viewpoint>
    </window>
    <window class='worksheet' name='Proportion of Reasons'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:reason:nk]' type='color' />
            <card pane-specification-id='0' param='[federated.06jweit1wnedaq1emelrk1ym4ejy].[sum:Number of Records:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:city:nk]</field>
            <field>[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:country:nk]</field>
            <field>[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:reason:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' maximized='true' name='Proportion of subreasons'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.06jweit1wnedaq1emelrk1ym4ejy].[sum:Number of Records:qk]' type='size' />
            <card pane-specification-id='0' param='[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:specific_reason:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:country:nk]</field>
            <field>[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:reason:nk]</field>
            <field>[federated.06jweit1wnedaq1emelrk1ym4ejy].[none:specific_reason:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Distribution of Recalls' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nMy92a8k15kn9jtLRGTmvXnXWrlIIqlmi2pLotSCpyXD6sFY3TPAjGcA2w37
      xQs8gIHBvPjB/4L/CsP2gwduwBjAMDCG7ekee1o9aFvd6hYtjSWKEFskRbJY26275RIRZ/HD
      d74TJ05G5L0lqkr6yEJlZcZylu98+yJOTk58WZZIYb1eQwgB5xycc5BSwnuPIXDeoTUGWiko
      qeL33vv4DCEEhBDxO+89vPeQUg4+M3+XEGL096HfhBBw3qOuawhJ75ZCotC6d802uO5YAcQ5
      pmPK58DPUWpzjfjafEy89vn1+Trw99edU/5vYwyUUht7BABVVUFrDecc1uv1xrv52ul0urFG
      3nus1+vBteBxtG2LoihGx3rdveKxbPudga/z3kOXZYmdnZ3exUqpeAiklD1ESCcthAAs4OAB
      IXqby5B+55zrDWBowfjQ5IPNP+eTzhdM0Zcw1qI1LaRWEE6g0AVUhtj5gcrnyYg4tsD8DP49
      PwA8J2ttb878PX+XzoWfe9Wcx96X/j70jhTiminVW3spJSaTCaqqgnMOxph42K21vUNXlmW8
      jr/nOVtrB/cIoAMwNM8hIjI2Vx7LNoI6dpAG75BSRoow9MJ8gEqMc4ix52/jKrwgY1QtpbjO
      uQ3kY9BaoypLTMoK3jo0pkVr2sH35nNMnzd0sPmeFMnS9+fjzzchR4T8oF+HouecdRsSbXue
      lDIiaT5npuBSSqSSQromQgjUdQ3vPay1MMbE9zNx9d7Dw/cOGK9JysnydU3XKp1XOh+l1JXS
      RLo/6R89dFNRFPFUrdfrQQrFiyKlRFWUG1RwaCDpoNMB5ZNLJz/0zDEKC2xyFSEEiqKgTRFE
      cQQA6x2kkChF0UMiay2UUleKJ+l3TNm3IWyKrPlaXEU88vVJIafE6fqmhGabSKGUQtM0g+Ni
      qq+UwmQyiWvdNM3GdcvlMj5rZ2cHSikopVAUBdq2hXc0j9o0ECAxdWxtx9YwPUBDvw99tw0v
      Nw4AX5geAgC9hWRWmT94jF2PiSvA5skcYuUpWx2CIVEmf19VVajDJjfGwMNDCHp3qYuNdw/N
      aei96XyGdIEhyBH/Khk2hzGxKb2fD/F19yg/QOl9dV1HGX86nUZCUdd11At47k3TxEMTiREf
      fHiI8F9rDQASQbZxw3TcKWe4iuCmc0wPTb5Ho5ody3xa67i5Y0rXEIVOF9iEyfJgcjaUDnZI
      bMip69DByNlmPi6lFCZVBaEkrDHxt9YatNbEZ1x3YVNIOUY6Hl74IfHqOqJJDkNiFVP5MaS5
      7rNTUSHfo+VyifV6HcUbnnNVVb1xtG3bI2ht22K1WmFnNgvrSkYTu4WK5/PMcWwb3o0BH0Qe
      J9/rnBs/AEVRoKoqlGX5VPJ9PonWGHjQxLfJ/ENIlyLQGHXeRt1ydunDf1JKONunCjyO9P7r
      zhPoZOIhztgbQyYCpURh7HohOmPEtmufFnJCsu261WqFs7MzLBaLKO+zksvzsNbG+TPyMwEt
      yxI66JXObxKG6443Rebr3M/rzHoCzzWu67Ybmd3liHVdmVUIAQ+Pum2wrNcwrlussevzyQ6d
      9pwNjo0nf64QAlIICCngnQPCbc6TguwGFKxtMISQ6ViGLC85BU83degZAHqIlc537L1Pg1g5
      R0qtfvmYGOlZ7NFaY3d3d3COy+USAKLiPJvNsLe3BykkJkUJKTpETu/fNvaceFxnj3KlO/1u
      6wFIH5CKP78I8KJKITcQgGFo0beJWOkp3rYgPTnbk7yvdYGiLNA2DQTQKWPXmEsu2uRUlDnB
      Noqeihn8XWqFyeeaEoKUAn7afcnfMyRmDHEsPpBCkIFhjDszxWVgxVkrjWlZ9eYCoHfIrxrj
      NhjTIwFsENWtB8B7cnBMJpPeQ8YGNwSF0hABtdZtPfiMp5FV8/GlCzYma6e/K6lQ6QKFLlBW
      FdqGrEKF0k8lLw8pl/l4xmCI6o6ZWtN3pvcDm9TtFz0QQ+uXwhAn4wO7Wq021m1orPycniIr
      SCHO1/PTini5+JvK/vn+bByAqLgag9VqhcvLS8xmM8xms2jSSn0EPOChxePvCqVQ6RI6INkQ
      29smxoyJTCnCbdMTeDFS6uydg4dHWZUwrYlc4CpIRZYxhMsp2xhCAJ14w7ANiXMxZ4gzpL+n
      zxoiMtuMBj0xdmB9V6tVJJBsBBiDDREaHrVpoJUGMm6+zT90XUj1JX5uLprymDbMoNbaqMAw
      XFxcYGdnB1VVRc8em7t4UukEU6XWWgsBAa01iuSaoQXahujpdfnfQ04QRoDcScL3FLqAcRbT
      cgLhBUzbQlXVoHydw5Dize9IxYOxzcx1gKsQYIgyDs15mxK/jcqnY94mfuT31HWNqqown89x
      fn6+wd3zdTfB+iaEQKkKLJs1hN80GGxb+23EZGjMuajsPfksolie36S1RlEUvYcbY3B+fo7L
      y0s0TQOtdXQYjVHxlK3l7D2lKnxSxywRY3J9Oqkxn8Q2sYLulXDeoypLNG0bnUHXUcTy9+Xm
      w7Fwjs0xiA3k2yZqXhdy3WEbVxkyo+Z7lHMqgPwDACH6fD7feG76nPV6TU7Ip0D2MbiKQwwR
      kJQjpqLYoCdYa43ZbBZtv0qp6N42xqBpmvgifvhQTE368hTSmJgUkcbk6qsmnt+/jbWnMC07
      O/Z0OkHTtrC1xXQ63coJGCGGqHBkrVpvjCdFqHSu+UHNRYptCvXQ/NPf0mfkXCCV7fOx5ns0
      tF/W2h7nKssyHor0d+89FovF4Hy8H/ZwD82TIdclhg7VGBHJOfaoElxVVXR0sKjDwCcpZZ3p
      6Uo5QzoJ/pOKJWMbPSb7p4uVHzI+5fxdLvd672GdRRs8lel8pFSA2IyLGVvAfI5D4smYUpci
      4tgz8rVJv8v9I/m65HI/f5/u0ZjYyPey/f4qPSFdKz70PJa2baOolO9R5xW+mgsMIfvY2qbj
      HBJ9+TOHaQxyAIaqqlDXdU92yynY0OJvE2VSNm+sgXUOVVFuUMX838CmTHkV8uSbtW7r6IUs
      dYEyPI8pbqXLOLZt4c85tcw3YwxxnxauooqprjVESPLf0vCInGPnzsj8uqH9ZbleKYW2bbFc
      Ljf2aLVa9YLjAIoMaK2B8w7qGsZnHgPrdE8DKffi96eWza0HgESDKQDS+lOWlrNPBq01BchV
      VS9+HOh7HL33aEwLtr4PId0QB0jfyYuaUrYc6dPNkkLCeAslJUpd9K5JdYa2baFD7sBQrFL+
      3DQgLT8YQ5+vA9dF/qH1yRE+H8eQeFAUBeq6jvpfvo7pe9PvF4tFdHrl4/feR9t/7m2PuJAt
      yZBYx//Ocyn4Ofz7EAFK9wwIEcJV1YlCGyNPgOW6siyxu7s7uMnOe6ybuveSWYj94MHw6U0H
      uG4beICCEwao2BAniexzQCZMEzpSMSEdQ6E0lJCQQlKIxhYRK13gHCHSa/n9uZiRQrpu6cG5
      CsnTd6RjS825Q9Sf/+SxSEPz4+9Z9BsSG3KunM8t/TwkugKIIgcAaKUpPMY5woFMlMvnnnOl
      fD75ugGb+8BrwqIdw5We4HQCe3t7PdnQew8BxHAHPvHL5RJlWcZMnyG9gCkwPGBcp0zlA84R
      Js8VyBckX4yUwkspMa0mIXx7O/Ll72ArTzqWdKz5mIfGcpXcmm5wPn9g3EcwtFbp84bGnD7n
      qvil9Fnb9ih/T75H6TvZ8ShEhx8ccTo0jiGCkVP9dIwph0z3f2dnp/ecrSJQDswRrLWoqqqz
      BiEgsfEoNVkCJpNJFCOEIIWIPwOAVgqF0yE8Yvt7tyHOGKdIFyClevy3kpvOm6Hnpyw7v2bs
      81WiyTbYhohXcY2xZ2yj0sxRhg5Q/u5tsO3eNKMuimeS8gucdZjNZlF01lrj4uLiyvfwPFP9
      gN+TEpB8zTkF81oi0NDLq6rC3t5eDH1dNiFjSIhemOtisUBZlnGBU/mNPyupYJ1FY9orlc4U
      iYZicYYWaBtSbrO182HlZzD1GAvLzp85RsXGWHbOqofu4zEM3Ts0l6sOW4rwqTVv27XX4RBA
      n1PlegPDbDolTpxQcOcctNYxgC4X0/LP6aFLpYwU8XMc2CB6l5eXPs0Jvg5476N237RNmDD9
      phNZvKoqFEUBrXXMFGLTGJvPmpCiWBXlljdu9xekk9smhuTXA8MIxwgxlKyd388wNJ588Y0x
      vWem8/k0MGa1umoN8rE2TYO8QMJ17x36nCvqvEdpeuWPf/xj7O7u4tVXX4X3PuLKarXCYrEY
      9G6PEYl03tuAFeGiKJ5OBEpfMJvNyKW8pkSInM0751DXdfQcTyaTaP9P80YZIa7D2hnGTnc+
      xk8DXBQgVZqu2oCxA8rUTQjx1Aj2tLBtjEPX5jJ0HgXwyxxHfhj4N6UUTk9PcXR0BKDDnW3j
      2Gac2KZj8UFv2/ZqP8BVwB7j5XIZwwgY0kEYY7BYLGJAXRvCDraBpxEjaNm9Z3p4UCGKkYkG
      J8vm5/Acvu4KxY/jnVL5NUfyq57B1z5tWPl1qffYvfze9N9D40qvTUW/sfuuMyYhxKDONHSd
      9x6Hh4c4OTnB8fFxtPVzKZZfFHKCPMRtrbWf7gAA6GnWzOKHkJsna63FX/3VX2F3d5eUoNyr
      2Z9FbiYm5BWU2OLDv4ciOUV4Z/cbX92Np7NFe37w9rl+SspI43HxQI5d87Ti1dD3qUI4BmMH
      JJXbc+vPdcQ2Xtur8rQB4PDwEJPJBIvFAs65SBy934wYYCIypK8MjS8XhdPvAMLdT30A+KWz
      2QwAKZBcSoNfxoNmh9Gbb76JH//4x/jiF7/YqxljRk98H3mlEFAh2cKmCO4BCEIvKYP50nt4
      D1jTQhdlch3QNi2KKJKkGzWMoHrA0dYbpd+MmdlGgdLvN2b8FBxm6N602NXYc1yiFMoEMYxz
      UFIS803Gz58t/z6wFvwd1/u5Tp4Dj3exWPTGzFZEBj5QbIDZti5pdG5KfFmkZenll3IAgMS8
      GeT9uq57eZipt/bdd9/Fyy+/HAfEOsSGiJCIP/GzABwAeFqoobgdKQS8T6xSgjZNOj5sgBCA
      dRbS2vDs7pAxU8jBewctOyfU0CYMpeCln32YhMi+d6FMy5D+MISEV0GqGOfigPc+loXpxpXE
      MAUk02NV7PymXT99L1v+2Bx+FbcQQuCll17C+++/j/V6jfl8jp2dHRweHuLhw4cwxmA+n2Nv
      by/qUYwvHJ0w9FxeA/47dZaWJZXy+YWsQFeB9x4XFxew1vZMWryxH3zwAe7evRujLtmV3lpS
      jPnvUbMcEOOHVk298XtVlJAQWLXdb85Yqg4HERPjm7qGHrH08HX5e6flpDfP1EqRu/uHlMzc
      WsMbks+3MS0K1flRhoDvycOwjaOcjtlkSodcypiDy4ForTWodBmped02cU35/cbZmL87dDDT
      8Q8dzqZpYkDlGLDtn5/NBpL3338f3nscHR1hOpvh8ePHuH//Pr721a/2OINzLupprKtxWZZc
      JxVCxGIPkWBvHd0vCEKQXfajjz6CtRYHBwc4PDyME97d3cXFxQVms1nPgsSbdxXyS6nihk6K
      MqHWJN4oIWPdGeYa/MxKlzDWwqFLigeGnEeAhIT1SdSo9xuIkt7Pcx9bkxzRR40G1sQE/etQ
      /PSZxlk45+Ph0aqLaeJ9cc5hUlDyD+s1+bgLFZyUSayWkBS/aUNxA4Hu3jEDQT7OVVOTEzQZ
      F8deMedQSuH111+P93jvMXnxRSil8M477+Dw8BBSSty+fRtSyg1LIv+b7+XDMJlMYg6zEOSc
      fSYHgBWYl19+Gc45nJ2d4b333otyodYar33+85Ficb6BkipWjuDnpBOj7wCVyKtKqI13e++h
      pYo1aEpdoLYOKiTlO2+Ry/mdMiyihUkrBWv6iS3GWcA0MXI0/e0qhM0RJP/MoJWGFH2xcQjJ
      GFKuUigNqL4zL0XI3mcaFACgLIqN/FyVczLWnYyJfpvIhbyH4DEJwLnhdVCBG+Vj4vEOhc14
      76GkxJ07d2CtwSf372M2neLy8hIvvfQSqqqCMQY///nPsb+/H4kt7wmvDwcHPnjwAA8ePCBH
      7bMSgRbLJcnnEa9ET9FihGMZ3hgKjV63myJN+lwpJaZFtbFA6WLy81mcKhTpGVVVoW4btJYU
      xGZdQ5dF7zlKqCj6FIoO5JCVSUsVK8rlY4zzG5lDaqnpc51xD6YQpNMIQeLZVQpy0zQ9m773
      lIcLTwdMKxXq83T6yLb3R3OyALwbD3lPdY/VarWRXJRnyo29Mz/oWmsIKWEdES/vPS7Oz/H+
      e+/h5q1bOD8/xwsvvIAPP/wQVVVRrJcHbt++Hcs6OufwwQcf4ODgAC+88AI9d3D1PiUIQfLz
      ug4VpkPpdM8TDIgpPXoVheXIYgDoFt+TZUclC5TGiecydlWUPVNriswcicrvk0LCwUEGimZ9
      5+Hm+6OVw1mU6OsP+QFMvx96xja5OofGtFTBDgKTARHsKvCeKmXrpIR9qhfwe4UQOHlyivnu
      Ti802nkHayyKosC6rVGWRVg/nkd6lLpIz3ze/GfbuuS/AYgmdtLNaKx7+/v4/OuvwxqDm7du
      QSmF3/zCF+I9bdPg3scf98SrV199taeXPJMDAAC7sx2s1ms4QwqZ8w4ysDYbqsVVRQkZgpM4
      66zURSe/g+T9unF4fF7jYLfE4e6kZ49PWRywKVf3KK53ZIdn0Uuq6FfoqBwlzGulIwdpTRs3
      87oiTg5jiJ9TR667KpIxGWtJ9ELfbDgUc5S+e92SN3USOOa0qGC964k2zpMulKYZPj55DGOI
      Yy4WS+zu7mCxWGKxXOLWzRs4P7/AZFLhxvExESWwIc1H7imlJC4z4LEds9p4H8Lkg941Kaou
      2M07mLWFF6TjQQBK6ZivkhMfKQUm8zmOfuu3es/nz89UCeaX7M/neHJ6Cq01VV6LZkkB4YkC
      OdeX/6Tr5MNSF/jw0RL/wx/9GPefLHA4n+APfvd1fOWVG1HPSMWIMbbMkK+71Aq2NVActYoO
      KTvlyUWKw7+li5n+LaWEsTYiWA454vP1re3kdeVUx+bRV5p10JHGxpN+F2V8+Lj21jtooQDV
      jVsKCSE7kcx7j8ODAzw+eYKD/X3MZoRgN46PKZGoKHCwv4/lmqqGGGuDYUJuIDqbuJni8rzy
      9RFCkNXJWkL+8IzaNJiWE8o5CeH2UgjIggwZddugCGH11lo471CVFfZ259AjpVpyveCZHQAA
      KIsSWqtYlTldnEJrSCFw8uQEp6dnuHP7FqRUWK3XmM6mWK1WKOcV/tn/89f42SdnAIBlfYn/
      +V/9FK/enkMJhwcPHuKFF+5isVhgZ2cH9XoNISV2k5r0PGkAiWyvYYNsT+IUIhkLRyneR4r5
      9gRroKsKUSQmOuYgSspe+HV6gKQU0F5FaxNTerpHhjLiwY4tJExjIQR6Nvx8TEKI6Ddx3sMF
      jppmwg1yjiC6Hh8d4fDggIwT1uKf/um7eO+TM/zjf/AVFAXF7e/szOIzjTWQA4HFG2mX4oqI
      39BoJa5pIEJSCGjZZbc1xsT6onUwg0tB+z7fnUdRekxM7B3S0RH9EkAIgdlkBnj07PVM3QEK
      Ojs8PMSDh49w585tiha9sAA86sbg9LKvFJ8vGzhIrC7JjGqNQVVVePz4cbAGWMx3d0lMcBbw
      iEipEgWaKLylxbIOQgWxAAiLq6JJNl3MFHmts1BS9RwuOZLTNX07esq1lFTxcAghSGyByBTs
      Tm6vdFdXM6+O0PvsfM/8CyBaeZx3sZ1VbpS4OL/EdFLFXgCF1jhd1Dhb1HCeLCkucC+eR6GH
      yyOmz88/57ARZuIBrSRJC0KgKroizcZaNLZPlA7me5jNZlulgRyMMc/2AACk5K5WK0yLKsrf
      qf14f38fs+kUPsTIKK0wnUywWq0wKRW+9MoNvHf/HM6RovXFzxxBwaBuahweHABCYLlYYH9/
      nwKo0ioFctwNz5RLFRrOWNjWQBe0HGTqpPEVSsPDB/YNpNxh3TaYFFVk6Wy+s5asNVJKTIoq
      Xs+QeieBjvoCQKnGc3KJI23qOyxOpSCEQKkU6iBepddwjdbcLNq0LQCPJ2dnOBQCT56c4vDw
      AP/pt7+A1ji06wVO6gXa1mBnZ4bVaoUbxzdIAR5BuG06U38/FJDofh6UXJXPiedReBX1stl0
      1kP+q8B7sj5eXl4++wPAHjrnHJkYfef0ElJiOp1ASomjw0O01mC2M4X3wHR3hsY0+L2vfQaT
      UuOnH53ipZu7+FtvfgZSGNy5dSs6NabB3S6EAJJirT0RxTuq+5OEM7DyRv3DyMqhNP2WKp0x
      GhWUvebQbWxrW0jRbVTbtnjvgw/w0osv4v6DBzg+PoIUMnKBIiQJNUlhXmNaTCZT1HWNvfl8
      A2lSZE2tKalzK1f+o0we5imFjH6QlErm6ZDsmFwsllitVlBKomlbzKbTeKin0wkuLxdomhpI
      LEFjSU09a08wpzam7eWAGLcZ0jKU5yCEgBICStK9k8kkVjG/DnhPzRM5bfeZHwCAuMBiuey5
      nlprUIiiV13CWBs9oEDYOOnwt7/+WXz7q5+BkiIQyiKY9QyMs6j0ZlmVHPqHwW8qYlJCONsX
      h7yHDaEDUkgUqoCSMoYJpCKHsSYmeE+Dk2Y6mWCxWEIKCWsNbt+6hX/x1s/xO2+8gHpJCFaW
      LOoIPD45wW6Ws8rjYGRNIReBUovL5kEZ3ptUpCu0xu7ODsqSTMc7OzNU4bMQgvSz6QRN06IK
      BxlBdLLeDeoB/H4+kE3b0nr4bC5CdoTJe0CKK2uOcnmTdA78zhx4nbirjRBU/v+ZHwC2Iecu
      91J0SfHWW4iQG7wZKkymSa36IoHzLjq5cjmdr+nJnxAoi7LrAQASg9i6IISAUBLOBKuG6igo
      gkzOogM7kRwQXfoNt/wRErdu3sQiUBhuJrGzQ9aU3/vtz6FpGqzhsTvfRRVipUxrMN+dj1qy
      hhLXx6g+QPpJIbYnGw3pNzk15dghD6CqSA4vi6I7fIzcIxG06SH13sdkeLbSdLqQjEQp5XhD
      Ywb6tX2MtVgsF3DWYT8EzDFwrVtjLeqmhrcOzvtYxOu5cACgX3EtpVLWWdSmjVr+xn0DloOU
      8qdJ0eliD1o50IX9pmZAQuXAXgsN0xp456C0gpAKzlus2wZKSlS6pITugg5P3TaYlBNUugxN
      NsjOPt/dgYMnE2MYSmsNSkGU7WB/H1opyocWErNgzx6CHEmHFL0UyXhere2qXnuQmMEHNodc
      J2DgwERCXFpfqTqRK3LwbLws6rC5mg/xWO+ydJ7p37k4K4TA5eVlfGbTNGhMi3W9xqSc9ALw
      mqbB6cU5mrbZeI5xBuLiGVuBGApdYLlaQSZ2dh6Mkgql3vQcsvVmaMPIld99n9p1h2DMXCgh
      QzJ/34auCw3vPJzz0ApRB6BQjQZCkDWGnWjrtoYSZGJkzjQtquBA89BCQUsVKbQSInLEQmk0
      1mA8+3icAwxd1/0Dwa7OcTydLpNen+sXOeUtdNFD7p7TMcm2S+P+yXloosea9YO8tWo+FyEE
      ljWFz+xUBTwcatNikuWLF0UB51ws0U5OQQUpRMxOvFxcBoseWcPY+MKGGNZbnssBYNlYaSqI
      5J3rUQEpJGrbb7tZBW8sEDy4jqhKqsjlSmG6kACi5SblIrm8aAdi+tlEqnXRsymnkZA2OJYA
      Eq+sdxDOotQFjLWdx9UOi2Yppcs3uKc08hrJzRKF6VzHgN9TKN3zUeTvydePdSwpJLzoh6nE
      67BZKjM+O4hNWmus12tMp1OcX1ygbhoUobr43nxOAZJKodAaf33/Ev/N//oDSCnwj/7dr+DO
      QQXTtLBK48GDB7h18xaWq2UUfdI9BBAqDdK8JtWEwuwF6XeRK2Xr9VwOgADgrcPZ6hzOOuzM
      Zj3WaJMIUIY0eQGeZMTOcdVH/ta00SMYNy+UWwH6bVDTw8IbuqEvCAFnHUSBXqkXKQW87Q4C
      AyezSCHDxlP4QqWJUrXGAFpvRK4OiTB5fsGQ1SYd/5A4RGsuUKhQ8DcQmfw6PsipDT59f+qf
      yMeQh5/k8vysnGysubOc0kgm19V6HeqJKhSFxlvvPsTDM/Iw/+CvH2H+m+SMe/T4MbQuIARw
      dnZO4c5JHodWquv2Gb4rdYHpdErFeZs6ioJS8x6EIDs8ByjLkjqJaHL6cJ14Ywxl5gywQhvi
      z1NIY1iAJPHE+V4esvOe5D4RvyATZ9Ysw/kudiWnqDIcOI5LYYsQwIpvSg1JSeY0wVIXaFqy
      FGlFXt7cguP5MMtx7jQUBj2mAwxBWqJm7Fp+Px/idCzbFO74PboQB77b2MD9vINImuGVVYki
      WL2UkrFuFP/57c/fxl++cx9KCnzltZuoa5L1Z9Mp6rrB5WKJqio3RKkyEBobdDmO4wIQ7icf
      Qd00WDc1hAC8kGhF+2zCoXPw3uPs7CzmA/ACrtYrTCd0StdtHZ1BMoT7Tsqqp+DyZjrvsVqv
      om29LPqLUrcNHDrOIUBx/M4Y7MxorhRfUsfxpQsKT5GE5aTq/QYPOPjQ24oRlhCNTXgsqixD
      JOykIOVYSWLz6fNaa7oSkdl6MaRzHxxrdh8fUhPs+VKSMszjc3wYBVH4FOmHREr2do9ZoDpj
      hosplCRuIK7Rer3GwcHB4NhTEQoAlg1FvE7LTSdmXdexblC+FswBAOr7wNY9as2lAt6QDscR
      F8I/Jw7AsEHRPNv6JdiO4J2DFyGPOEQqplWpuVT7dDKJleVSz6Z1NsrmhdK9yFJIgcVygel0
      htpslnGJnEXJGIgWY99ZkYpIQhyiUDoml/eq38nO1p0e5BSJxiwyPB5ObE/BOYfWGSihIoWP
      v3kqOS8EHfjZhCxLFh5VSSEgxlo0hgoT26AgcqOQocDCnDOm/+bD2RoDBR/F0BR43rn+kOs5
      DNNiM8EJQKzjk1N/xgstVTSxeu8hIWDRL+8e/RSEer94YaynhTH2WxQF6lBBwghyXVwAACAA
      SURBVDmqxqYKopJSCFxcXFKSfdWFE7AC1MmbdLqbEBlYB7m/0kWMd7HOQiuKSPVwWK6WkNlC
      9sCHYDPn4AyF4E4nE1jXWVKkFFBSx0PnvccktUQJinhtrQEsHfLGtChV0Us23wac+9pDFpBe
      YuE2niOERBUiJTn0W0mFSVmGRuUhI0vKkAuswqGxG6LY6NrwOBJ9RUoBKYbnxH3ErgvpQSMP
      dueh5sojOQx5wnkdACJW/HuhNFnHEEoxXntknwLS/lI9xVMSQjvvgaZGNIQKygOYz6utEYQp
      FLoICSwhz1UILJs1lKB4HOsc4D1Ma1BWVYwmzGVk7z0cXFTaVFnAGhNS/PqBZToEwhl02Wcc
      ZcpAcUQOCEozB9ptg3RM6di4obf3vmcGZoimVa3hXBnf31PaFfkyXFinJphq+b1xb7boF4z8
      Uc7OYq44FVVLKnAVk1mu0FlSaC0ltnMQ3M7ODpbLZe8QpCJb+jd/ZpGTy75HfSEhWs9NBKpN
      C+9czD3l1Lpo6ZAyIglAVK5gQXIA4kECiU2N7Tq9cxCV9x7GW/iQGOIBCCki8jOkbJ8XUBUd
      9Y3WErlJGYUQqHQBiECZUzECfSsSHxIp5EbJkfy5vTn6LgqSTXm5SJGvjYAIIRjEKaRUaG0L
      FZCXM+rS3N6NZ4y85ypTrICgpBV0ebjrwAnGiovlh65QGl5uGib4uiELGQA0lry+WmnaF2we
      bBKPQHFho6v4SwbvKV4EnpDQex8pB+UDd8FnAmQlGKMY1loIKVCHTLO8hEljW8omEjKIAuSy
      d9ZBZQ40fif/e+i7qqLoVGgNKUWMPeJrjbO06IkuEt7QGxcf/Ma2MM7ESFFOd6yKcrAUSkdp
      JbxXoz2Nc2QVQsSDJoWI7xuDIUqaI5wcEZWGxsIIy1wAGKdoQ2O/DsfY1FnocyHHTc5SSo5o
      fD4HwFgDE+rQkI3cRNldSkkOsrqNk54UVVymnDo659BYA2/Ybk6WmBRE+EO5vd29CGLXln3Y
      MDl6TxlVRVGEOkfTDSSICrpPfAM2KbtIT4YP+azwHhaAcN390gO2NRSGETiUkn1rB6+PCiJX
      XoIyHTsXJc4D5rYhlXUOFxcX2N3ZRVHoDaRnxTyv2Db07I1kGCm3irNXITt3K03nOXRPqTWA
      ztM+dB3nhXg8LytQOJVaK1hL9mYuyAT0q6kJ0ZU95AOS5sgCVKKwCRRTSom6rXuHgK0yZVFA
      GBGqoBHbo5eE3gShakVO9XuHLvxX6AJt26JuazJpBosD1zLi+zraj+DHSMQmmiCAQJHLftU0
      PmwuODCcQGTjOcQx040b1qB0HjmVHHveerVC2xooJXH/wQNMp9N48O/ff4Bbt27i0ePHuHF8
      jN2dnc5qFvZodIxXiGvp9em/XRApldzMfhubSy8x3wPWeRSq42ypE0/geXmChcBONQ1iT9ef
      dUjpEgh5pkIQp/CqJy/zidZKR2/vkEjQWoNC6yjjXlxeQoXqAKwUSikG700XV0kZ3tNA6wJN
      XQclmmJUPF8TAv1sa3oUM4e4kZlnNh5upWENUXaOKxoqv8LAPpRKl1Hpq9sGKgtNvo44sTOb
      oa5rfPzJJ5hNp7i4vIyh0bu7uyjLEgf7B2ibFtjpOHJqEbpKgc5h6JDwQSA86K6x1sYcEKDL
      RxZSwgWcYe7084eX+MP/88c4Wzb41pdewre/9pnol5CSchyU/CUVx70KrHNYNWsyL4a81Hja
      BXpysvUeznSNuD1IhAKC5SXx5hKF2EykEEJ0LZsUUTCpyRHFieXWsN+wfx8D25Y9PHlzQ5bX
      dDpF3dQoihKtNcHhRMV3ISijzVpKxRR+vAO7wHAIhgqWijZYe4yz8K2ncOyBgD8pBErVxSyt
      m7oLAsN2x1kKbK/XWuPOrVtYrVaY37iBdWNChQciPHvz3chtmRj1LGju6VqZpiVZcipdpuEO
      AbFXqxW01iiKAicnJ4AQqMoSbdtiOp1idXqK2c4c/93//kP87JNzAMD/9Cc/wZ2jHbz+wi4u
      Ly9xcHCA5XKJum6erkXSLwpNiMVg1szJJLwA7KxixAAI2VmOtJ5i0o23WLU1Vk1NTflA1Je7
      PzKUSmMWQpQ5DHtaVp3jybNOsDnWVFyI3d5BZTb4oDpLkYj1uoYDxZfMdnbIzS8ldDGeI5ua
      DnPk5D+F0qiKCrwabN4d+iOE6MXnc/K8dQ61abBq1li39aB4l00cddNgd2cnlq8EgPtnDR6c
      1ahK8qiSM2qzAna0sCScYJvow8AZg/kapfjBwIWXvafCa1JKeOdx8uQJdnd2UNfUreh8UePR
      Wdei1zqPDx9exDqiyyQZ6ZlzADb9AeSoSV3/Qgj4RBFkkFKiSnJjF7XBz+6d44UbO5iWRN1N
      QjlyWu68h0L3XKUU1us1JhNKv9QIce4czusAXShopbG4XGAym0AJqhlU6pJyD4oSjQl5CFUF
      B48pW1UEHVgrbETWq6hgY1tM5GYUKFNQKcKh68jthvlvSGHXwftNnuxgbvYUPrKN2i0WC9R1
      jcvLS+zu7qJtW7RNi5eOdtEag5MnT7BYLHB0dERWOAC7ofhAun/55+tCT+zMlN38urIsyVck
      ZpBSYW++i0nQV9Z1jaKo8Mrdffzgrx8CAKpC4Y3PHqOqKupLUVUUm/a8RCDeQ7ajpxsJ9C0U
      9XKNum5w8+YxlFA4X7b4r//H7+Lh6RLzWYn/6g++jruHE7jgyeO/Ox1CRAWVn8nx4yllkVKA
      ictiucBsMsXp4gxKSXzv3VP88V99gH/4d76IwylFmwoIHB0dkMc6HJx8c6oQ98PlFIfEHB7T
      5hpthkkXUqEJoR9jRWzT+7katpIUm+RFJ1yyA26bYlqWZaSOi8WS7hGkL1VFCQjqA/Ho0SOs
      VuvIJYb6C6eizdPCNr8Ic7myKLG2azhvUVYVvCfCsRMcZf/o730Z/+y7P8Pp5Rq/++WX8crt
      OQDEkjkMz+UAyAQ543ch2rIxXayOVgrnTYPjG0d49OgE1ll8eCbw4JTKp58vG3z/pw9w+KVb
      VHUuUMvp7gyAh5aaqr2NIFjaOb1QGrXrClLVTYOyLGCMxboxqFsLCAXvKSOKY4w4n5Vj+JsQ
      is1zrIoS0hqsDHO9ceSv2xbTsh/oln5WSmEyYs/OD1aqzLMFyobSKPw7i5sqOMUS5oKyLHF5
      eYnDgwPUdYPqqEJZFKRPOKrgfPvmzdj9kzPYhqw/6djy8O2hNcnv5WvGaqeyjlBVFay1WK2W
      gaJ3azUpFf7gW7/Re+bQGJ9bKASAXrQgQA4wztABEGPTHz16jL35HMZa3NUShZZojYOSAi/d
      nKOuKXlmZ3cHbdOGxIxQ0jsxmaULn8qUXJGNkWN/fw9CSNhg4/79rx/ib331Myg1FWPlADxA
      wPouCR8IDb8Tqs1V2K4TwuFBepHwm8pkh0Tj1RZs8Aw3SelGWkdLVqAEz1j5N9bGGBnE9wHe
      GxwdHpL5ODSgSBVSrryRlh4HMGjxyqn2tu+HDkcaurDN/Ml62kRQQ5bZtB8rlOo96X3cNea5
      HQCu7MVRm92gNhdl73A/copCFJjOBP7x338Tb737EK+/dIg3X7sJhHKFDpRcY42NMvI2JS9d
      CFKOg1JuLYCubStdLrBuOpt6ITVKpSGDQpwqf9yvLIbk+uAJHZG6uUyKlmp0zLlsP0Q16ySO
      h9cPILMgxYgAQQ6DDyZVDqVQQkXRio0JY+/NHU95Md0hyHWCIU4xNGchRE9/SonB2Lu2VY8Y
      TCASIuRnPwcluG2JQqe27G6wm6c/XygtFb78yjHefO1md6L5iHiyAnBHwRQp+XlI3sSiTKGL
      aBEa60ajhESRxANZR4FouU0+fRc1lEAM6ktzZnvPDparFNlSyDds/FCjZ8nSUkWqn9Y5JX1F
      RtNuNA5IGUXG9B1DyvXQfPPPY6Ind9vkciT5c/Lrt+lIQ0AHrG91GhIVeZxpmf5nfgB40kOb
      mBaFZUg3vVAaZSi7NyRLsn/AW0JQrtI2hlB5NWVOEuEgM675n9/bmCZYnTy87y9ZnpwRp7nF
      OsLlXPr3jec2j218hv8otI5yMHVa7C5kTlGVJTiXd8w0miJ0LocDm0Fp6fj5czpvjuNPWyHl
      96Tfcfh6qvQOQXp/u7iMYd3pOPI9589MgJ6pH4CVp/TFDFzlmH8b2mT+fmgDyDnDbXZ8aOnT
      X1zuSD+UjigE2awLpTEpSlS6iNQ9RTxKzZTR6xsp7AC3Cty1i3btIXW22eH+tm2j+MZjy8cq
      pURdNxu/aUWOvaESkCTqdKJNJBYZHWIkY092DkPrnx4cG0JBciRLES8tiZPPgfeo4+5dOZVt
      Yk8OLFbmOdVDc03hmXIAVjb45UBC1Uai0bSkHFpWKI0lE9xQTUxqt1PEOPwii/Qcs8XniyCl
      hMRmUoVzjuJFpEIdmtZxVWZGzJ54ECPvSExj7yxFYk7QhHHCU3Tqg4cPsVgucXx0FEoOTlGv
      a6zWK0xme3h0tsKNuUJVVmjaBovlIiKWMQY3b9yIa1zmByeUnY8GhjCnOnDkXMY3zsa6qmPi
      0NB3zrlYnS39Ld3vbQQu3yMpJLz0g2MYGktqgs0ljbFxp1ztmR0A76lDDCuV1tkYjuu9HxR/
      6DoXnBwCQejAoMsWyaEK8eejsnIGKQKki5svcPo5D0oTQqAN1qHWtqiKihxYlsykIrmOlf9S
      adTew8KSl3a9xsH+Ps4vLnDj+Bgff3wPu7s72N/bw/miRqHJObeu17i8XGA2o+RwwA+KHilI
      KTGbzXp90sgy5UctVGzyZC7W2hZK6tFa+wzr9TrONUUy9tqmEaTbnpOvfcplxw5Aivx5Yn/u
      lR7yOD9TDqC17oU5ePpAJ18qOGOgQx8uvoZ5Q2rXboxBqUXPUlG3Dax3mJWT8L3cCP3NKXQK
      6TX8zDHdAWE8bUhu5+hERi4Ec7sdsHR433mFhaAk+dYYtI4o+GQyQVlVmE4mmE4nhPwXFzg+
      PIQMh6wK5cqllNiZUUGA09OzjRzePKqWVHIy5VprUbsGWqpeEkzPAOF9CDEhL3epy0GxIYeq
      qnpIxmNax3TXfgur3LKzbY/SfRkqlMswCfVni6JAVZa9Z6bP2LAKPcuqEN57PHz8CHVLwW0C
      AlVRdM0dBNl8G9Mil4g4mSX9d1VQNTY2NxZKDyaQxMkli8tNm/m3MdhmabBBEWaqTpysi9Zc
      Net4cLkvsfcek6LcsLYYa9CG3N1SF7FyXC4q2uC8KhPxbt00xCWlRKl0bF+ahklwPgDQhX3o
      0Itgm1zNRchYZ6jKEjF26pqQI99isYD3PnqO02tycWnoGel12/ZHCIHVegVAjOZd5+96phyA
      u6bEFwv6TulucDKpnamlilTU+X6zCessVs0aE13GfM6cguRIPwb5NUMKF1uGSLEWsM6gUAWM
      NWgMZZx5kDIvbOhgAu7c0i8GzLFJKRSctM9Kczb+qKiHP0LKaMqtyhKNaWhNgu6TVkRIQUqJ
      AsO/5RyAD7ZUJIIaZ+HdsOjA9+TPGtIFZjPqJZB+fxWkCJ+HWmy7flJNcHF5Aa2mG/6BQVHx
      ypF8CkgRE2DrCFlWWISIIc5hA0pdoNKUN5zaa5VU5GAChThrqWKt0Z6okpXg2LbYqfiQjhMg
      E21jWqox5GwX7x+KPa2adayZw74EZvdahZAMTqYZsPkzYcidg/maxc8J0ikpQ8qnADy6itcj
      IkV6uNMDNvQ7A4etD1WAG1rn/H2xP0H4o0M5xHTu+ftZuc+/Z6vfVs6VjGdntkPNPgRiMbRc
      1I2WxNEn/hJAax2oVRuoHJXE86FEB3eF4crQjadc3yqYJT082uC2L5RCCx9q8SiUsqDNT9h+
      TpEiF/FkLUgXN4Loaoem1ElLnZTaEyikjhxNSQUHAc/cyjoYYeEsiUjOkuw+TSo+X4crpZBS
      2bGEmCpEqjJi5lwx/iHKsXHAGBHGID8kqd40JI9v477cDL2qNjvmpPD45ATT6RTOOZysBP7p
      d97Bf/53/g1MpEFrLA4P9kfHm75rUlVYrda9qttD3OeZO8IO9g9wuVjAOgoRQDyBAhA6Vkho
      jUEVQnlXTQ34Ln/AAzAiNEazHq6qunIe9P+gd5Vs1CS6FEW/Ibb3nkIJsg0rdWfqlJ4cSii7
      ag5kMhVRJhdCwCsO6wCEIMsNWYj6eb3rlpRQTuoZovaMRHkBqHTs6RyHdKCUAnsATdtiUm42
      F0+tJCnwdXXbAEL0LGDbZPZtcr1SKuYwD/0eRSaEvnEHB/hXb3+IH39wgh+9/xi/9eKUwrEP
      D1C3DRUFSyJy8/XMy7Cna5pe91zyARCKSG18730MkfbwMI6UNa4/r7NiSwoKqqCakkqr2JQC
      QCzGmkLdNpBCUU1S0adaddtAKhnFKgCxjF4ukkyqCUofQgeCV5M5ihCUc4wgpwNUWa6IZkcC
      IcgA0BoD7zdbiuaIPQa5uDZEwVMRQ4quwVy8F3T4VahmzWOhahudlUYr3TdEZO8aa2E0NE4h
      BKqqQtM0sSYoi4zp5xtHx3DOojUGv/PGXRjr8PXX7wCuwU7IQ2YrXJovnq6n9x6L5QJVVQ2u
      ZTrGZ54RxiwcmdzJAXKCXKZBZBmO5fCeY2q6yeiQBcY+gHyizpNzJ229wyKM950tfFJWmIRy
      JLkbncdB7ydQSmF3dzc2ZWPzJOsBfK9An9LRnPvpoENK6Bh4T5YZ0kk2m0+n1w1BaozwzmNa
      Vsirwb39zjt4/PgExhg8OT1FXdd49PARnHM4Wzb41++doDEWTdPg/PwCZ+fnWK3XMNbi9Ows
      VvTu7dsIl8iBkVkpCa01ppMJbuxN8Pf+xucwq6hALqdI5p01+fDw860l3Sy1BOUmcv78XA4A
      iR+ZjMuTBpU5Gdt8IQjZ2avKFR+cc5iUFWbVBJOyc7DFSQbZn5s0sEiQh+8K0PPzGKAcMYUQ
      PUVLKYW9PWrNuTff665FePXIZjvnsG7rjZLwY8hsk42tQ7JN9K1kkaCpcpc/M/2O1yI3ie7v
      7+PJ6ROcnZ9TJeU1Jb08OT3F//vuQ/z3/8e/xpOzBS4XC9RNg7qu8fjxCeq6xtnZeW99eI/S
      cShFlcHT69KDnO8REaq+lS/fn/S+9XodW1Ll5RjT8fC/n4sIxMDFYlOq0Jh2Y+PTU02huoR4
      WioYWHjfX7QhWZL/Pav6jRR6rC/Iz0KOy6P5eFILSBqvzp5QACEsuu0d915rIPS9kmMHn5V4
      as2kUIWkm8jZLL2/tmsUWcecocOXKsjpeqTX3Tg+xnI6xXw+x+npGf19dobjoyP89o7DK3f2
      MasElCqwXq+xNz+ganjWYmdnRuKTcxvvSufLSSzMLcaIQLpXkVqP6CwAYuXxougsVzmnHKpc
      8cw5QIfIm9WQR6l+MI1214fsHbmpGA4pcOniDR0wvqdQuhcZWbebFaNzKto0TXTs8G8cYSmF
      7AXV0cgRCwIIwZGRXebatj8uiGqc9CJYCY+6CKUG5pQ8jlv0TX6MdENmRWstvHOUFKQUbt44
      xif37uHu7dtQUmJnovHyzV3s7swA73Fxfh4ble/v7eHmjRvwmWc63aMf/ehH0QqXy+w5MLXO
      KTbQ9+SmeCCVjDrZEMcwSS4E/3luHIApGOesbgOmkgIyJJdQ2W2tSKZrfKiZ49zGJgKbukP+
      /dD7hOi3POqNJZXrwzPatkXbtrHg63Q6xWS9oiYc4ZC21qBecEhyxmHgUa/XcMZutPvJ353m
      FwsIeEGinRFtyE1GFN9saDOrgk6CNTmftFIbBWzT90ynVLNpsVjg4cOHuHHjBowx+OCDD/Dq
      q6/GgLvlcon5fB5FPwD43ve+h2984xsxII4b2M1ms4jE6/Ua5+fnsewKe6mHiNfQPuaHKufK
      LM7liTSpgp7OP+X4z/wANG2D88UFSlVsiBaAQIqXKrYYShonCwGZULhcqUq/G5Ojx1grg3MO
      ddKgY4i7pIvOyLC/vx9FoKZtQxy7Qt02EEpCqc0I0zhXqeAUdacfCk9w3mHV1JCyK3FFJlQd
      6/vz9zJwS07IB4BKV/FAl0oP1u4XQkQP7bgOJvBHf/RHePnll3FycoLPf/7z2N3dxXvvvYfP
      fvazuLy8xE9/+lO88sor+Pjjj9EE3eDFF1/EfD7Hn//5n+POnTs4PT2Na52LXrk16SpiNSQe
      cf8ARvx0v9Jr87k9+wPQNCg1tUHiPl8MVUjgIE8mO6SaDUrsvIuVzoYo8qcBVkq5tj5DSl1y
      KgQglAo5oVDlpoGWMpRG77pdDi0+P4uad7heO5/03VLIEPZBnInMkRQiLqXsBd7ZYM4sdQHb
      hGhOISDCY8VI9OcQDMnXk8kEX/nKV/DRRx/h8vIymiOPjo5wcHCAL33pS5BS4i/+4i/w+uuv
      o65rfPTRR9jb28Mbb7yBO3fu4PLyEgCJkcvlsifeDDXmyMeU/x6V2BDvZO0mN81DKIbm9swP
      gLNdDVCOqwcCUoBj8TsotIZtk6KvIzJ+yu7yWjnx+X4zZn8IPKjeaIzyHHheroAR1zD9vAbf
      tSaF79ozSamoy/1AKZUhmTUduxACykusTQPG6LGoU6Dr9vKLEIeiKLBYUM7BZSiLOKY88ztT
      AqG1RlmWmM/nePnll/H+++9H8Sm1CJVlSb3hrojvyefG96d5JnVdwzkXG3z3CBf6pliZ7C+/
      +7l0imfYDKrqbzoFmnXOLc4JaEwbdQG6z49SBYZeEdQtyOBoEIMdUoaUtXQxY7d7IIgxBm1s
      zUqJ9KltPEWEdJxDVhMu6w7vkTaaywkCPHrv+DT1eOZz6lT/J3/yJzDG4M0334RzLoY7a61j
      xWk+HLdv38Z3vvMdvPnmm3jttdfwzjvvoKoqvPjii3jxxRfxZ3/2Z7h37x5Wq1VE0KqqsFwu
      ow/laSAnZkVRoK7rDVyQUkJ6BepeQxzzvU/OURUKd49mnRPtWTfJs9bi4uIibvS6bXo28Eko
      X1ibJiRhJPV0gpeWr9VSQXjEAqm5LJgv1HUWtzEtNXUuyZrCB4efzxXlcvDeh3nIGPmZyuAA
      Yphz2g3ShO7thdKxfVAur1pHDT8Y2FLFjjqbpJMC/XZQ8Z5rHADWAdL55UpmygnTdQH65UVS
      yszXp4YKRjg+oNaSQ62sylEFfQhyPdJ7H7uNMjjncLlYoG0Jl/b29vCH//IdfOcHH0IKgf/w
      b/4mvvWlu+SMvfabf0Fgz+nFxQUA2qzadOVGrHdQIpRMAXc1sYBkx1K3kcZZwPneZHMZfUxk
      yRGisx5IiCT+J70nvY+pcmzIBzKbSqkwKaiCsnG2d2gb06IFNYYoQ5iFVrpH9XN3PoCN/FyK
      ipW92Kg+bA9E2wZ5jwE2lzJiPS1cpZul+9E0DR2QYtgsmh/EIcse70t6D9UA5Txjj1Xj8L2f
      fALrPCw8/uUPfo6/8RtHaNv2+ZhBuajparWClBJVUWDdUOYRezqVVDC2xbSssKxXPUWSJ6qk
      jCVHUpYvpURrqFtMEUKpxzYit+xQ/Hu/eyW3Fc3vt85R/BCIKk+rKRgde+PyPjYDkaHjpRSb
      YhpDzyLlqQtknDtEFHHa1kCEep8MKpRisdbGGqZPA2VZ9hoPvvvuu/jggw+gtcZXvvIV7O7u
      4vHjx7h582ZP9Izr3rbRIhbHPIDI6UEHEEUr56jQcN77K/08JO6mz+VI10isAJRlAe/Iojgp
      FW7sT3GxIq768o05ikJDqudUGxQgDyCb3NAr6BEotqDqbi7krzZJbA0Q5GdP9V9aQ7X/GThE
      uW0NYEwspZIuFrPnXBHKFTrOwJKir5wLITYK+3LYA5cdVIKoZxMcajzGHPmHdJb4XIS0ydAk
      DoIiZyNXyM60R6IsP0VZ8iGo6xr37t3Dt7/97Vip4d69e3j77bfxxhtv4O7duzg9PcXjkxMc
      7O/j9u3beOedd/D48WO8+uqrePHFF/H48WM8fPgQd+/exe7uLhaLBe7fv4/9/X0cHx9v6Cje
      9zk6/5YaI2xmJs33TmuNtm1jkF2hdYwb4mf9F3/3y/jjv/oA00rj93/7sygKhYnKuyg8Q+ht
      tvcbbNwkCFoE2XkMuPwgA98npaJOLoF1G2MCi/RYhwwqEyilUipabHixgSBuoB9glc8jcgpj
      gqmNRLeY++tFDLEYs6IMUUkeq3Pc4JnKnqyamnITetSP/qY83pY8nd4P/kmfP7on6HSr733v
      ezg/P4+Rr1LK2KC6rmvcOD7GT37yE1xcXPR+X61WePvtt3H79m18//vfh/ceb731Fg4ODmIy
      TD7vVBxMx9XtKflTehGuGeHiekMcB5TuHZdduXM4w3/87TfwH/zbv4H5tAtIfK6NshmEoAhO
      GywdaSQfT74MsS9pyHO8H31TIQMXrD0/Pw/xJhpaq0gdnVKwxmG9vEBRFHhyeoqbN27g/PwC
      h0cHkJ6sBR4kVzZti9hkLBk7I87jx49RTSaQQuDkssU7H1/id7/yMs7OzqC1xtHRUTSt5kg/
      hIzOe9ShOQgrwRw1SyEVLphVqboDh0pQJxnfc6gNyco58uVjklLiW9/6Fu7fv4/vf//7eO21
      13B8fIz5fI4bN25Er+7JyQnW6zWWyyWOjkiWvnHjBj788EM45/Do0aNY82g+n+NnP/sZ7ty5
      03svQ1EUMXl+TI+RQm5wvnztuBEf534PzT+fO/AcYoEY0i7fKYLzhnIcfqrQpJyAD4eUAqGF
      1ni9SUHhCcvlMlZPaJoGnzy+wEePLrFarbBcrjDf3cVyuYR1FnVdw3oXEbCTOTdl0vSzsxbz
      3V18clrjX7z1Ac4Wa0hJoQDUPWZYJt4cMgd8ZxTSejx5cgoJwIeWp+vlCqUqsFwD//ePHuDJ
      hQ3mUkopfHRy0isIlntfc5NrCsvlEnfv3sUXvvAFnJ6eRjmfzZ737t3Dl7/8Zdy+fRsA4u9a
      69hG6XOf+xy++c1vYj6f48tf/jK++tWv4r333kNd90NheE/LssR6vY4ck1PKrwAAIABJREFU
      m8eYUnIzQAhzoqmLIkYLp78PcZ0oij1rM2gKl5eXPavDECKkzfOiJSWp3+kt1Q2aVdONKgrR
      jBgSO+p6TY3SrMVsMoltWo01KHSBpmlQlSXWdY2yKmMQG6cZttZAOmwUfuL3reuaFLjdnSA2
      CZSFgjHtYCPrdIzeU83MalLBWZJpVw1HlYoY6tysG2hNZQUvLxYw1lDzPyHxv/z5x/jTH36I
      L37uGP/w97+A5eU5yrIIsTbUE+GFu3d678xFsdVqFUOHvff4/ve/j4uLC0ynU3zta19DVVV4
      6623sFgs8I1vfAPf/e53oZRCURR47bXXsLOzE7/75je/iR/+8Ic4OTlBVVX4+te/jrfeegvr
      9Rqz2Qxf+tKXRi1VjJRp5l6OIz6IzgIhOmAgOHK9XofiBCKKRvmc47P8My6LkkMaScnQ094H
      kLkNVRh6lhJjY61J4ywlySvVJbsEZBKCwhPYAxs1Dw+URVcgtzGUAD8tJ1Fh5VBk6YAieC1l
      RkXj2NAp6QAwLSfxu3RePB/vqedX0zRQWqG1FpUuQsSoBMLhM2HsF+cX2Nudh6Z1RSgG7PGd
      Hz3CP//L9/D11+/g3/+3XsFquQgKYmcxOT46ip+HoK7rqISy3J1TX5bx09AC/j1VSJnTDHlc
      c10r9RcAiEo36yFpLaH8ALfWwIS2V0PclQtxrVarmJc9ZmJ9rgfAewpa4riQdCD8mQebyoR1
      28L6vm3cGXIGKa16RW15w7wnR9W6bYJpsrPPe+9DH67xwk9kfbBomxZeksiWd3dfNl0eQCRN
      6B+AfE7WWbSh+6FpWhRVCWMtNbsLMVNNyFXmmCiu6BbHRrVUIEWBR2crHO1NUGmSk9MSK+n6
      jh2AMUdfCqxMLpZLtK3BwX6XAOQhYZzHpKBy89Ya0rd8ZwVL6/0PZbPx8/kApOMGNtvoGmui
      WVUrPTq39AAMzQl4Xn2CAwhBcSCz2QzL5TJ+n5vGWmN6oQlVUWDZZM4hreAsxa9D0YS4OjJP
      jsOwraNWSt57yg1WXZpktGkrtRFmoJWGEdSPeGyR2aArJUWyOuewbmoqppsc4sa0JN4pGUPD
      WYmVgirMrZsa05I63BvP6ZwyWqxaY8C2VyGAqhS4e7zTi8NP1zr9e2w/tv2egvMeH398D6+8
      8jmcX1zg8nKBsijwp++c4917p/gv/72voVkv8ejxY8x3d6G1xuHBQbiXmoCkiTBA38eTjnW9
      rqG1iuuaNlZZ1gaFpup8qZhJfpIuInSbBz89WL8SK1BVVVFj5wVIKbfzDtITK2XqwVajdBJS
      SQhPiRAoNJxpMS36Ti2tNLTqwouFEL3S5M47rE2DCuVoafWhkIqogAEhgYeuaZyDD9atqMtI
      CQ2N1q4hnYBQNC5vSKlVgoLdfLACUYdIcoIVWsfwEQgkMrBHY1sUkn5nC9g2pB4yNw5xv5wr
      C0Ee88999jNYLJYwpsV0OkFVVXjz8xO8cLwLAY+6bjCdTDGbTrFICJxSGkKQebg2LZQQvfBs
      Fh9Z/Ly4vCCRUxFnN8HUfO/M4A//r7fx2Vt7+I/+5m/AhOoQdeg/UJYl5ru7g/6djZKIYV9/
      ZWZQBFmuDPV/UkqQizPkSZW9MOnIwgILbJoGqtARcXIK6Fy3kfw9hUI3iWmx/+xt1FFKKsNi
      nIUEOWuc9wAfaPSRja1brCdUuoA3NlZDLpWOkbI2zfv1/cwoCQGpBDjylDzWwLqtMS270o9D
      lg+e05i5sbc/yTrwfKfTaYy6ZJjNDF67Owc8cPPGcfyeO0gCnSOQAgg394ZEVB+rapAzscV8
      MkFTk57UNA1+8vNTvPfJOc4WDf7uv/lZmPoyxG9Z3Lp5E49PnmAe3hudk1uqwwnxnFokDYJg
      OduhKqueCYyBlSgpJYQUcMaRs0spAGQybUwL6x10UaBtGtRSxv7ADN5TXUxZdJWaeQwqVGoY
      Sr7eRknbENTG1BjeRx2A45lSTqOlgg8NsNdtjUIVcY70PvYs+1hRG95vFAwQApgUlFdr2xqt
      MV2OhaBiXWlOLIllIW4+m9+1tmkLJQ1LGHWSMbNjjoDbCIv3Hgf7+3CezKN2aoi4WItvfHGG
      08san7m9h4P5BO2EajQVRQHjLPb25/H9k6pC27axu/zYe5+rEjwE1losl8t4AHo2XPho6hJC
      4Ltvf4J/8sc/ijEdAPDmazfxn/3tL6JQVG3OOQsl5EbDtKeB9ACs1muUZYgvCmEHxhhCzHA9
      lyYsJLngvaeo17TUSqo0C5BSbY1BWZVY1mvIQAxyESX/d6q8L2oKLZmVk9hVBXFMxN28pzWc
      DOgxbAZlx1GO7FetT/qcsd+F6GT/bcBpkldF8LLlDSBCw2EjbCmkAgFkETTWYlJS6LUTlGvi
      PCnOElTP6bk5wsbAe3JyrJp1LxSa2GFHld+/f47/9n/7YQ/5AeCtdx/in/zx2yiLkpRgreFA
      vQl+UUipBVuSVm1NsrjtQpFdYLVahQZ6skOEKolH4oPNNU2n1aQTxcJ/7gqkCwOjMu2JKZUJ
      BOfYdmIHccJJUVJF7iw6Nv88ZCsfW5uhv7dBWqXtabjPEKT3M4e1PfmedL00onY6m8GHaF3r
      HOqwn8aaX/0BUCFhWwkV5dS6rvHJ/fsxrBUA/vlfvo/GDHt+33r3IT45WcO0BpNgRZFSYblc
      XnvBWSHOgbpbdpSRyylynwAtFcpQliR1zMgkwywqXEGpE+jHwEzKEorTFpPhblBsdFWzuejX
      pKD6oIv1qteqiAwAKhYVbkOh37ptsG7qnm+FuS1/3gZjBW6vWtvr6FXXARX2g7krwPFbiOVh
      eC3jWoRruDBZoUgcdOZXZAVKQQiK0ymSKgEXl5e4dfMmpJS4d+8eqqrCh48uR59hrMOD0wVK
      T9UBPvzwI3zuc5+FE8DlcoHd2c7gwnNwHEA+AmtddK6kDp6KozNDPgDV6y+glO5R1iERY8jM
      t+Egcj449HRwuEk0to3NN1i+Boiyp6XQWbHnjR1SftemH/MPADbkIxtr4ZoaAugVGOPx5nb7
      9O9cPEs/D3GUIbPn0xwkmr/ApKj6KZa6gPfd3AulYyh6985APFobDpGE1L9KJTiB6XQKEyIr
      AUrNe/jwIVkcghdyd7pZ1YBBCoFZVaAsJJarFSrOi5UCEBKXiwWqSRXbgjJwgzcgUfK8hxKd
      N5NzTqNI5A2E9zCOUl3GIEXQMXv3arWKplQJwBoLCz6QpM8IiJhBR8quh7eddzt9X22GG9GJ
      8P6anYL0FMDS/JTTMdZoUFG8BtXOHX7pfbmZewjatu010EifS7m9nTXJhI43BYhgsE7ARZa5
      4boMhMF7j0lV4fTsFDuzHRIXW+r282txAKSUmM/nMX2yKkvcDdGD7Ez5nTfu4v977/Hg/Tf2
      p/jcnT0IQeXJd+c7aJPke6Fl9ApuTb+Li92JLVVVDTpUeKO5+02pi2j7z72vKRXNKyCwpzI/
      JABQmyZSfLLoAI1pAAhMyyroT7ZT7LbI8UIIqLWiFMwwVwCYTbuYKh5j6rnlsW2DFMHT73IO
      uE25zjPT0neumjp4yqngMM+5DM9mIsaRvBCUoFSqrn4oOeYOY14IF879tTgAQBfj7SlmYYOi
      fOONu/jBXz/CX/zkk959s4nGf/J7XwRgYCyJDIUWvXwDD0AXBep1DT1LSvKN7GtKtYF+7ivQ
      bfg69NMCAOEBC4dpOekpfPmzUvC+XwFt4xpPYlrqtWZdxTqLxpgYJem8jyJUjrDeU+Zda7qo
      znSuaeFcDkZkr+rY+NO52aBcpglDuQ8hNwgMrUX6t7EWrTMopEalS6yDESI2BkF3QJVQoe2u
      p1LuAsHD3s9PttZGS1PUwX7VZtAUVqsVFotF3BSmbExdnAe++/Yn+PO372FZG3z21hz/zlc/
      g+O9KtT2CQ4XIVDpcrASnW0NppMppBShAkW/MjWXSGfgYLGUmnlPXlhO4gGbQVU/Xuiqgk/b
      4nCYstH7QCfMdwXDKH+aTHmMFN5T/FCezsnzYw8ry8cq6Bvxupidt9kVJuVUQ+bZMZ1gSB+I
      yUfJ2nA4dK+vme+62fNap47M9F2Uxdcv+Msh+M45nJ2dwXmP3VDTiOHXhgMAtCBUDJZkN2f7
      iycF8I037uCbX7wbv2MzKjuRAIDVKiXkRhNnVVDbUVb4GEkLqeg54VKWI1kU6t5lY7JKfK4g
      jpPGL/F8roIxUySPHwI9TtMTlYL1wzoLFagv91RIEY+QjmzxsT9buLcq+lWUhzhVWtKEr0m5
      Y+5t5WtysSodT36QOCSb/y592R9nNqZcQa8GuMp6vY7m4Wo6wSQxP/Ma/crNoCmUZYmqKtE6
      i0W96pUWTBeY2Rkn1EtJnuEcqqLEtKg2kkyU1mjaFoVUEELCe5LhZxXpCKv1CuvQUJrtxtzN
      srFtlMvzzvQuQZAc0nlcZRbMD0V+iQ6xNTZUoUu92ACFdy9DDzN+F3eInBQVpuWEyiUGq1Ee
      J8NrPCSapbpMWkImH386R+99LwgOGGnsgU6ej4Qne3bXt831Dlc6tlSPASjJJ/X2p2P7tToA
      QggcHxxhUpYk9/rtFgiuBsw2YBGekd5BloB++UHvHSYVlzTcjDl3zmHKVSwUcZFVW1PVheBc
      KhTJpvw2stJsVkdO//D3KQzJw3w9iyuRWobflaAABO9JLMpri1pne4eTEYS90kJwkCAJAGmm
      Hs8/5XzpuMfGOwQ5xR9aiz4yiih+8SGr26bfhDDoKWn9paHDtF5Ty9r1eh3DadK1jWs8OPJf
      IUgpsbe7B8//DSy48yEKU/QVVL5ShZ67AG9Yn4ry9dPplMqBZwvovIeQArPZDFVRJopXp6zz
      n7Q6xWaqfwe58pcfiFEkgtjILutxj2xeAIk1per6MefUd2x86XNSKs8ydmu6zLx0HfLxpwif
      HqhtRQbSWCJ21q0N1YltTEuF0wT1K5uU1WhbWIadnZ2YueZAivrQnH+tdACGSVXh+OBo1JNL
      YdImKsg+ICxRf0ppLJmqSAnhPQpVxHj6YE2nEiSB0gsOqrI21vSM7xMC03JCG5mNhb2K1lOu
      wZhMnwaoDSHLGAjR9Qr24d82vd73S7wIIaAyRXNIcR16D/+dI7X3PtjXLUoUOHnyBNY6zGZT
      7O7sYLVah6yyrlrGdDJBG3oNOOeCU8/HAMK0czy/w3oHbzcrfgDoom399kYZ6X1lUeDi8hKz
      6XQjUYiv+bU8AACinfZycUkJMkEh5GjONEgOoCQaeA8vuhiRdMM5SApAD7nrtgGUQN3UoAhV
      ikEaomx5QBebJLnju7HBtl9UPSqYQr55/AxjuoZ1JiS0m9AEWyuFSal6COSCtxgIvYvRr6I3
      5KEeor7pHPtiYt8vUajQlzlwlNlshsePT3BxcUHUVivcf/AAB/v7uHdm8MKxxOX5CZVzb5qY
      DHR8dISPPv4Yn3/1VbDZlbmrlgqFDgcphJj7QL0dKJdbZ/vOYJ2FRN93YUKnTi5zU7cNilAF
      kOf2a3sAhBCxnc76/AytJ3v3pCihRNf0jikfZ2BxsnS+QMwdGDhEICpTWmFVr1EVVbAGXV1q
      sDZNqELQ3xDnHSQ68WPoIKQHzFgbQy0KpaOMy8FuQhDitSH+R4WCTjbYvq1zG9138vfkn3PI
      lfRcZi50AXiKH2qaFk1Dnts2OAJXq1UkEAe7FQpFFeukFNjZmSHIOLi4uKCiVWFOxDW6teID
      RkXByBLGoQ2pTshrakIRM2MtqiIxQXuqBLIz60z8eTbarywj7GmgqirsTKeo6waNJQvANPT+
      ShO4gcDSZBeDzxs5tPGcd9uj8FqjNS2V1BtBfueodAq9R8D7zfAB6xyU3mzq0YbiuZPAIfh7
      6ptAvRPWbROL6ubFwdL6OGTCDDnN11zLIVNl/v3YIUll/1s3b/QOCd/HqZDcyrq4eXPDNMzj
      5V5iqdKbcp3WGipRqVQX/yT7yM/P4mLDKXBqbC4C5ubYX/sDwFRFSQntyeNXN9Q4znobCutu
      73gObG5y8f+39y1Nbhxbel/WCyg8+8FuPoKixKBMce7YYc1Ydnjh8MJeOGbrxaz8V/wfvHfE
      RMwv8M7h8M7ru7oeOXh1KV6xSYktkewmG2+gHulF1pc4lagCmqQu1SBxIhhsAIWqRFWezPP4
      zneCADpNSg07tDb+xzRbZSuT39XaJMJcPA6lLhxqJv0qxIBtP9OiP24gnHh+74/f/QnXrx+j
      0WhgMJuh0+6YRbQYuB+Vm3tscnqBAkaMcqaW368ynVw/Qb4vdzt+p44P1Q0fU4VN9jdDnmXw
      ipZYOsvhN0JLoizH63kewgp/SmuNi4sLS8cp33cThVdeAQCgFbcwykYIlemAkuklTDpTyzZA
      nudZO5A/UGZj5d++5yMKIIpGPAvNbjabmM3naNY0WubDjvzQRicIWoNaVqqF/mqBh6eqEZC6
      WMXqTJn+Xh9v3lwUZoeBKVwMBgj8AO1WbDlw3kYYNgZWTSU5aeT9lKuvgVQDoR9WKrs8vvL6
      xXmmBRo1zVKEUYTRYAjPM9z+SZKi2Vyg027jYjhAqiI0vBxpmiBJFrh2eIiXr16h3W5jPB7j
      6OgIyWKBZrNZIv1lOFXBNBbkmK5cGHSdKGDpyDoPZZ4mmCULi9eXD64Oa+MpD3FY9BoOl6E1
      cuDUmUFRGOH87DXeDAZQWkFnBtIMhPi/f36D2dw4cePJBLP5HJOpSawFIvnkTpCqmmQp+/09
      HBzsY39vDy+nAf5wMsTBwSE6nTZ6/f6lfJYqh3ydySO/kySrLW0NlGIVXOj6E7S3q36bUgqR
      v+wj7XsexpMJxuOxCX74HobDIUbjMQCNZy8u4BWlpYskwes3bzCbzZEkie1dnGapxTyVkqbQ
      pdV/K0wgwPBHxnFsnNPUg5d5Bfdkugz9eYYjM8syTAWMwRSEFLABVY4AyYkoxTjghq7PLQJX
      SsGDoSAcj8eYTqfY39tDkiT4p2cj/MP/+hZ//+/v428/byMIQ4zHEzQaEUajET67fXtlorrF
      6kmaFhxICoHnFQ5ijiAMoHyFaZLjv//Pf8J0nuLo77/BX322z4GVfgMfvhuvd4+RC0QVAzNg
      mPEWBfNClmWIosh0i/HL/lbVLiB/X51pZex8BRTXvHnrZinceXhwYHqlpRn+1f1983xCD7Pp
      FHGrhbjZRBiFhizN95Gp1eQbAMuyIf2XrVAApVSJ4Ig3kkxzPIYOqmkmbZxTF+8f+cFKYkle
      h+cO/AALvcAiTUp9f3mu68fHSBYJlK8QRabk8Hd3DvB3//oL/PMvDtBum3ZCYWg6wbQ7HcyS
      OTixGcYlnp1ozkWa2KSQUiGePvkBd+58hqcnz3DnzmfQeYJ/ee8IL15PcPOgjTQ1vKbKM6ot
      QWvuhLZJJyFSUaS4PghXVJLZUhHkedx7BADK84xp46/SFMpxesU98ZUHVUR9lFpmhsMgMP3j
      ip3Z9zxbP9BqtTBPFghCQ5BrqSzVkmggKpj3vIIt8DfhBn0feTO4QOCbG5Bkpj9AI4oAXaS9
      RbYx1zny3GQXFVDg6E3MPPLDojbUUCoqZehZCMADisRPYWe7WVR31cx0XiRpcouuJDyYCTTA
      OMaJYHzzlIc0SRAVzHBAAabTxvEnluXn01/gB2YcWYGWvHZ4iDTNMBqPkKYprh8f49XZGdI0
      w80b1ytNIa1NnTSLhYDqXIE8XoqER/D3k3WBxzcajRVFMrtaUlL4qrFxQbsMS12VXzJN5sgW
      KTpiLrOjJkmYlSroa/LMogW2YgcAgE6rjdFkjOl8hrjRsImfRrNh+2wR9mq6vhSIzoK734Oy
      qEo+3KToHg6YbpZ0Wj3PK8GgpbjmUKB802Fd62IiL1PuMtHDgg7AFHiwCZ7s+OjBQxgu+Uo9
      5eHa4SEWyQJRGJmkW2HrpmmKOI6R57lpTu358KPVRJ0cKx11T3krK7yb+OL7VHQ3wqOUyZxH
      UWR3l8lkYpWEuwX7oHmBoYqRfYntuQMfmdaG5W8xN8C1Gp/InfiU0Aug1RIUxygUC4lCu4sb
      c5jRxa1RgCAIsNfrY89GmZfCm8KHskgSeIX5o7MCL1+sXGY7NmRcphM9iiLrcjHHpoiKjJRE
      YQSvoOaQ66aJ6xeEVU54MKtYpZWnitrkgp06TdFsRPBDE50irAAAdCOy5pnneWi3RafIIjPM
      ccoxM7G2SbHdv+scbLkad7td+16WZUZJWy0AGqPRyJS3Fo3BSYevdVF2WuwkVQ29N0WSACBZ
      mObkhLhoAFmuEQXluu3AL9dTb40CXFZ6vZ7Z7oumC4QFs0JIw5g8cdRYbsviIcvoR5bnNtTX
      FPAGfi5XxKBgiZMrOm1Y+eg8z1vaZY4kaQIWBrKpuIZeac2ktamByHONHBmUzhEXvyUrcglu
      r7AVh9BZ7d2/5SSp8hE2nYMtVSmyB5ibnGo0Goh0hPl8jkVBlylNoToclRxrnudox+3lewCa
      UbTyTOXOA2zRDuCKG6YDYKGvrOMNggB6YFLoiyxFpnOEno+wmBxGIbStkOK5hqMROu22NZFy
      p0tMlZmgtTbZYZ2WKBwbYvLaieRMfjvhxHtBAbKrynbb7xWOYjOIlufBMv/h8vHIUGSdnyCv
      4SqL61hXRXWmyRweFOJGs4TZ5zGLNCn1V5bjYDEMG2m441lXe+Dep7QAS/I9mkKGVsZgmxaL
      xXblAaTIgg1Ks9kscd2HYYhuxzR/5kQsPVRozBYLW24n/2lr0xupMgB4s3nzyfsTFtw0dLJt
      qJYOtXhQnqqOjCgYc0CWJ0ouocAPEEcNxMK84z+yWctchjxGrsAAbB8tHlcnVWaTzCUopQpA
      W1i6Jj9Tqtxo0EV9rjO35LXnycJ28mHZKH/H8h6iBN+mzU/MFZVia3eAKqo9WVNKiaLINl1o
      6AhKeSUKviiMjFMkVhff9zCbz4xNmRtAls5zZFg+dKD+QYV+AO2V+xTQTAIMhif0fUyyqbGH
      vQDzgh26ztaVK53WRRbWwFfRUKuZWI6l6hzu5xJaUCdVO1DV9aratFb1BOB15fmlicKGd/Zz
      LEmPGelDViBFPcMQ7Qc+PF1AKLCk1aQEvg/Pa0AVz3OrokCXEe4KrnKYVReIKkKAUsj7GRZc
      MmEYWv/BxddLReA13CgJhZ0pidpkzJvQBxPxoQlkxlrGKBVArjyDpwt7WBdVDbmpQygV5jgR
      Hdepde1i93ddRpk2fb4pkCCVWb4HGP9BRvagCibsAqpiOmMubF03wI6gBqGb5X6pp8M8zU0D
      EYBBIENpGQQflwK4/Wbtih4EmEwnSJMUk+kU89nMNrBLiv+Z3RyNRuj3+zg+PrbdSphOr6po
      qhI+2JSdYIquKVSCVqMc61YwD4R1BHU8oakgwLXkrsp41LIG1p53TeSk5Es4tnzV8ZtE7lBu
      9leaNnKncXeGqmP5m+XOYvIKZQAf27hmWV5aDJRS+D9/eIb/8PUdBP7yd3ieZ0piN/6yLZK6
      BxX4Ps5evQK0UZKD/X1DkiU6j9BeZaPn4XCIvb09+74fBPC0SWal6TKz6V5fOlwGNu3byjXT
      7CEtHW/t6Ez4CjXnZahWKVVa/bI8wyw1TTIkHSCl7rWkn/81pMppdu8LIKI5xa6nnO/L78iJ
      z/MZOMPyvVyb35FnpmZbmj5aa/zHv/kMuc4ArPImfVQK4ApvaBiG+PzO5yUnyRVOioODA3Q6
      HZyfn+Px48cAgBu3biIu6NaJgWGSRUZW+NCmi7mJc7M80w+hlYYHw2sprwksab7rzA/+Fvnw
      5Opq4NSGxTr0iIpdvQ+u1IU331dc80s64lK8mnHZz2vGxmw7aOIkBnk7n07RClan9KKAx2R5
      jmYYlX73R60AUsIwLKXuKTJMyG00DEMcHx/j+vXrSNMUP/30E36a/Ih2p4O9/X3EcRM5dImS
      nBEXpRRaDYNFSbMU8zQxBF+ebx9YrnVBcbiMhFTBCDg+GWrVWpd4VCk+TIlkzsYcFQ6vjCJp
      XV+txtVaRnGqnOd1Iq+zaTeS53UddWNKmn4MzaLxiTSjTAhbYT6ble5hKUKoi9SLXna9tGPb
      FizQ+4rWBmsyGo1Kzp5rd8qQJW9UlmeGWW0wxMXFmwLc1sWtmzdK9aWcYPQXDG9RXvQQ8LFI
      TQIuK0B7yHJ02p1SE3E5Xjm+LMuQJImNaKVpWnrIrHCLnHAvzyXDgZeZwFX3b52T7EappGxy
      ht2daDabmXqLaFnxNiv6u8m+C27UyO3n7Cq9DJCkqTFFP5kdQCmTFwiCwGLb3QfFhxhFkb1B
      zNxqAN1eF/t7e9BaYzAY4PtH38P3fVy7dg2dojlbDtNXOM9zIE3he4aaO/B9RJEBwQVawwt8
      ZElamvyPHj2y9nHVypymKY6OjnB0dGQBc9wJouJQ2SXTVfTLSt2xZjEAJvMEUeihKWpw1y0o
      lwnvlq4TeKZ5ebRM8JkwKDBN5qWdgAsbk2jTxRyR6BZad23rPF/6rnwEIkN+8jXFK6rCOp0O
      8jw3rXWKCTmfz41D5pnj9vb20O/3kaYpXr16hZcvXyIIQxwcHqDVahk+n8Ie9VVBbYIlkjLy
      PCS5to3h+KDu37+/drJ899132NvbQxiGpdXM7ZruxtXl3+4xVffJsr4ByAv6w1/eTPGP//v/
      4eSXAfa7Tfznf/fP8LdfHkPrcob5suWpklTXmj8i824CBgqLdGH8KGjkRW+2LE1MB8353JDe
      FghgZnp5HWkyKaUMXD431Xd5ln06JhAlTVMMBgP72o2H+76Pfr9vP+MkGQ6HdleQpoRc+abT
      KV6+fInxZFxgWUTYzTkWWPJqUl6/fo2vv/56ZWwUpUxPrydPnuDw8BDHx8cAYH2bTaaN3Blc
      PE5dyDJJU/z0/Dlu3LiF//Y//oBHP72252s1AvzX//Jv0Yk02q1WZTiz6vq81jxNLPt1FIS2
      ED70A1PTsUgQN5uYpQtLfKtzXerzTMpKDXO7GVCQ45DjStIUOXloNxFbAAAUFElEQVRW0+zT
      2gEAWE4bNup2nTA3FMfXnU4HaZoaOPJ8XjKRqAytVgt37tyxO8ZlzI7pdGqBYrdu3Sq9z/Ex
      VMnKuAcPHuDPf/4zlFK4du2azWzXlXG6psC6SJMrzUYD7VYbF5MUT18MSp9N5in++OwcX3++
      RIFeVgmhlrV5aW6aXZC9zXKawvz2ZhAVdPCJKWkEisq5HDrN0Gw2kRZFLlG4CnnhdeknmY5E
      IWbZ9NNTAK7e8rVcGenAVlVIRZGxPWezZQM+hkKl4wwsgV3rhBNG1h1wDFUx8SRJ7GS/e/cu
      Tk5OAMD6BMxkVxXdM0FV5fDL11JZ+Fs67TYW2kcj9DFPytGnfruBPMvX+i5VkR7oJZWJQcwq
      eJ4PXZBfGcCiuReGeMCz2d08z021HYDRfGQ7jCoAyaLcRJG/HcrwL0EBabJsYbu1YLj3kSAI
      bOkgH7R8+HKCu5I5wDkKK6Tm87mB9S4W9l+SJCuv+R5g2IvlcfIaMqqS57n93PM8fPHFF7i4
      uMDjx49NWaRSlewQ0vdxx17phDqft9stHHSb+Lt/cxd+wc2jAPzNl8f4F3ev4eBg3+5S66JE
      7qqca21LHQGDnG2EDWgNXLy5QJ7lpqmJF5jmh1DQReESs/O+HyBgd54iLO37phNOo9Gwu7Pn
      ebb2WLLLfXI7AGB+eBzH1syQ7wP1URAAK2A797tVeCS5IsuJwOMWi0WJoblK5ArLqIdSCvfu
      3cN4PMajR49w//59RFFkYBfpug5m5XEzFLmul6/WGv/pm89x+6iLRz++xvFeC9/cv46gUIg0
      zwxnj2xEXiNZnpucRW5Y/BpBiHmaoBGEppAmTy3BwXBk2CBarZa9d0+evUa3FeHWYRtnr88R
      BiGCgogsTU25662ixdZ8sUAcx/CUQpIaB9tE5gp/5FNzgilaG/IkOTk5yYIgQK/Xq13JZrOZ
      bXAHVGc+6+LwVdEZxrBlswn32m4xSJZlpRVuPB7jl19+wd27dwEYx7iKZFaOyf3MDZ/Kz91g
      gSusi3a707jXAiSlpPlncD0ooCIZNHK8Pn+DvX4fw+EQcRxjNBrj4GDf5EByE1ZOkzmm06mp
      /2g0MV8sMJ1OEEWR7S2XZhnm8xnarbaJHmVGQXzPLBKf5A4AmAfZ6XQwGo1WbOZNmPgoiqyZ
      JM2TqslbZ1644UIqXp0j6ZJ7eZ5ngXxhGKLVamFR8OI0m01r89f5MxIHxX/ufbhs7iBNU+Ok
      X4KfFDBtqACUGqNrvWxzpODh1o0bSJIEN66bIv9+r7c6pkaIflEBmOc5ms0G+r2uzeUEQYA3
      gwuLj+q02+a+pSmmsymiKPx0FQCAdRxdqPM6zBCPY0JNOpcyrClX/FLqveJ/3/etg7tppZX2
      PMfK33F8fGy6bDaW3KOukoXhaqZYSp7n1pGuQ21S5Pg3mT1Vv8Ftqud7uW3SR+W12H+oUtM7
      /l8uglkqh1VypdDt9RAGS9KzNMuw3zcJzU/SCZYibXq5mpNvqEp4I/kdGTVxozhu9ZVcbXlM
      VY+tTeKaUoBBujK8K8OzvA4nPwAMBgM8ffoUg8HAsLAVJhPDra4JJO9P3XjeVxRU0elHYTaf
      IYPB/bM2u65hihwjlWY2m2E4HCIsOsuTvVophcFoYEi0PrZ6gLcVmjOM2ctI0GKxsNz3VSZR
      s9m0TbSrTIyqa9Wt7lIZ5HEU93tSmfh9wBSen5ycWMwQH7jl7gGQJgn+9Kc/IY5jHBwc4Pz8
      3E6axWKBr776ygICuRNUjUmO9TKrP3FRVaRknudBeQqz+RzQy/oJwzJh8gVUUI4jjmP7nGT+
      oyoCRr4h5kri5pJk7ZN1gqVkWYbJZIIkqY4hd7vdkoNMSZIEw+EQwGqW821MAnLnbJK6zC1t
      XqUUJpMJTk5OcOPGDezv79sxme44Cj8/f45er1fKdvOYn3/+GRcXF7h3796yhraYeG/ze1xx
      v++eq902nE907DutNpTnrbBIJ0liY/7MeTSbTUwmExv1YlMRXkdrg9rtdDqle2cXnJ0CGOEN
      Jv5Hvk9kYpqmtvcUYB7scDgsQaHfRcbjMTY9A2lGuXF6ANZ04Xvff2+Aerdu3UIYRbao/7s/
      /hF//bvflXY7Oe6Liwucnp7iyy+/tMhTt4v724rsPF91n2Tc/m3uodwJB4NBqVskYO5Jq9XC
      aDQyvprO0ev2SovYR+UD8GG9iz1Kc6jb7a44jtx6yYtJqUuKyfG49n+VrIu/y/NwPO7kt1GU
      YgfzPA/379/HZ599hh+e/ICTkxOkaYrT01PTL0stCalms5k15QBgb28PX3zxBb7//vtScMAd
      x9uIG1xIstRieJLcrOJvO/nlvVDKwFBIhdPr9dButy030f7+voncLeaYOknOj2oH0FrbuPCm
      SbVOpGlDYdiU5gZgMrjkIqqCH3BM7nmk0PZex4npxufXKRsjPS7I7vnpKeJmE3fv3rV+gTT5
      6MQzovTkyRMcHx+j1WqZybpYlPyUtxWOj/cqzc2u0Gl30BLEx+8j8l6794pFRCx6onxUCgCs
      OozvKnVK0Gq1rAIQFBfHMYbDYaUScPuXW7+MWPA88YZJwF1IVmlJcRWNoVqTHU1L4UrCNqrC
      slSe6XSKp0+f4quvvjLJpxqM0btIlufQSmO/t/dOjT3eRermxUcXBfq1bmYQBLbrCEVrkwUm
      IWwYhnblbrVaJYVxIydV43IVghNRRl446V0uItc8cYXmIHMMVDBydsrjpKSpicDQnLi4uEC/
      37fnqQrZura9uxJ7nocwiqxTyyTVh5j4coxV8lH5AO8qjMu7E5a4GilZlmEwGNgVlRKGoQ2Z
      ElFKs0LaqlWTRPoZfM1JVUXPXrUTVF1DKWVpBgnEk5O/6nj+RqUUbt++jRcvXgBYdbLld9f5
      BfycEZtWq7WSZ/gtZacAhRChKUUmmaRwgrvHNptN63xV1ca6MpvNsFgsVjLRwDL65DqeVRO2
      TqTjuckR52f8Dn0d3/fx8uVLax65yFn5XTlGwJg6k8UMGXJbsH5VJj7lozOB3kfc1X42m1mW
      aVcajUYlMjQMQzQaDRstch941S7jmkD8u8rM2eRUy2OSJKnscVAn0rziLsOIULPZRLfbtXAN
      26llDYq1EUUIwgC9TrcWRftby0fnBL+rcJsmvyjDim5YVSae2u127QRnwbqsHnOPozPqRoCo
      CFXo0MvmG+ivyE6Jm453IdHMA+R5jkePHuHBgwf2PJsSZLTz3yW8+SFlZwIVQps+yzIMh0MM
      h0NDn12YJZKXB4BFXlatyMwYV3H9yHNIsFmVkq2DRl82Jv82k8/FLdEszPMc/X4f33777UpE
      qU4YJLjKkx/YKUBJPM9Du922nSGJjASqJ9J4PMZkMimZK1XndEWeix0YL7NCy+/X5QPksWz3
      KnePTT4Az88dkbvd/v4+vvzySzx79syaR+vO92tSLv4l5eqP8AOLUqZajGG6quiKlHlBy1H3
      sN2klHRg1zmz8rM6J3jdb2BC7LKVYfKaTChKU4z10Cy9pFQpAKENV331B3YKUCudTgetVmtj
      cYzWurKohhKGITqdDprNZm12us7feF+RkZ86TH/Vd2ShP19zRZfmGheJqp1gG1Z/YKcAteJ5
      no180JF0H7KMmnAnqBJSsRDC6woh2Vxhq67Bv2UEpk5cU+ZthPZ9r9dbYdDLsgz9fh8vX74s
      5Tjk2LTWVzbiUyU7Bdggvu8jjmPEcYxer2f5KimcICzAWAcXYIjULcIhFIKrLM2WqsnL4wli
      c+P7XLHZxZ6RrcuaTTR5BoNBqYCGK//x8THevHljzSNGe+SK72L3r7Jsj6r+hkK/AFhWkLkQ
      YVngXofrUUrZ7uZ0oN3jWW8soQIyEsTYPh1cieRktnaxWFiyLaVMNZSsA64SGfnRWqPb7ZYm
      cJZliOPYNJUIApydnWF/f78EoEtS03AcChiMhtjv79kxXFXZKcBbilIK7XYbYRiu4ISUUjau
      f5kVl0C6qs+AclM85gwIcgPMhKezyckqWZL5XhzHlnF5nTDywwbcEvIg/Yjj42O8evUKp6en
      2Nvbw40bNxCEIZpFUY9hfCj3H7iqSrBLhL2H0AHmqknp9Xollriq7w0GgxXTRNraNINkpRiT
      a7IV1GWTYlSMdYk0KkCe56Xr8jtaazQajRJkhMTAJOyN4xj9vT601oibyy48V9Up3u0A7yFK
      GXj0xcVF6X2u1HVCbHrd5CdmnTghWZ7I5nGXwRq5Y73MMUEQWL+hCog3n89LPszBwQGuX79u
      kbDD4RBPnz6FHwT46v599Ao6k6sqOwV4T2G5pPQJpNlSFXqk3exGjRiB4fcbjQam06mFX7tR
      l7cRGRla9zl/E2la3HEDKGWDec5+vw+lFPb29nB4eGjrcNdd8yrI1dyXtkzcBzybzdaGKplx
      JrqyCqnJkCJ9BSqEm0C7DCTiMkX3rsPN8bv10dIcohNOenZ+J47jSxX5XwXZKcCvIHISkrR1
      MpnUrnw0Ndrttq0wq8s20+52V2NOwk1KIBNZ8r2qv2Vsv9lsYjqdlna2qt2HikC/hcogW0xd
      5R1gZwK9p9BxpDCWzwkhY+mukHI9iiIkSYLxeLzCw+OWU76LMDTKsUgkpyydlL+J1WQyGgTA
      7g785wL+OO63gWH/lvLJ7wDvm6ypAsvxnJPJxDK1bZIgCEqwaJ6PFIxVwmPWFZpIx5ar9azo
      qEgTrKrmgSA4N6RLhWemvGpX2JbJD+wU4L0flNa6BPuVEyHP85Xu9evGwQSXfI+rsBtqldd3
      r1slzWYTs9kM4/EY/X7fQi7oW5DhgtllRoCkmUUGC0aI6q6/g0J8QkIThhPdVSiu4JfZaTzP
      s5AIKYzfV8EsLruDkSSq0+mUTCza6O122xbCj0ajFZIpwOxoQRDYLLP8XB63TQqwPSO9wkJY
      ArH9MsHF+mEJV1i365DYieWYACzAjF1kZG1uHWxavifrjpUyXJnS8ZYiyXFdhSOhrCQEk9fi
      MdskOwX4FYRRE621NTUYBRqPx/B939KpVDFNuOeS2CMqAR1mwIQ1WWewri8BQXpBEFTa5XJX
      4XVZRkmItvweHfJ1Sb6dAnzCIidvEAQYj8clWAP9hcueK44NlMDlK5XYHom1cSczWfIknoef
      y/8ps9mskvqE4nme3T023YNtkZ0P8BcQOrTtdru0MpO3/m3O02g0TONtkSdYZ/fLY6ooTOom
      JyEODIkyG0zZFNaVSbJtkp0C/AUliiL0emU24rpi+k3ncQvMq/hIZQE/sPQ/ZCRHCo+leeaa
      L9LUkY356hJvvxZ14oeUnQL8hSUMQ3S73dLkck2aTcIojaxTZvLMXXH5msA5NrvgZGaijja+
      7ClW5djS7OFrl7ZRyrYUwkvZrtFuqXDCAusZntcJQ6RSGJfneasY5gDg9PQUv//976GUwsOH
      D/H48WMAS+WkYoVhiLOzMwvWIx18nuelNqX8Te5v3Db7H9g5wR9MOJmiKNpYbL/uHN1u18bp
      4zi28AmgnC+QaE0mvbTWGI/HUErh+fPnODs7w82bNzEajRBFEfr9Pl6/fo04jvHw4UPcuXMH
      5+fnGI1GuH37No6Ojux5gNXstwz3bovsdoAPJEEQoNvtotPpvFeokIko4o1YZ1wFjJMsE8fH
      x/jhhx9w7do1eJ6Hk5MT7O/v49WrVzg6OsK3336Lg4MDjMdjnJ6e4sGDBzg6OsJ8Psc333yD
      58+frxD9usI8wTbJTgE+kNDEeF8TgeaUzOgSoMawq1LKRnBGoxF838fBwQF+/PFH3Lx5E77v
      4/j4GEmS4OjoCC9evMC9e/dwdnaGKIpwcHCAx48f4/z8HADw8OFD9Pt9jEYjXFxcVLJfUCmu
      Yh5gXdvbXUnklorWGmdnZxa3QyHjNPMHjUYDnU7H1gSQ95R06b1ez2auuaMQ8MbzMgLE3YXk
      WMw1MDQaRREODw+vnBKsq4fY7QBbLIzeUJiJ5i4Rx7GFQpNtIs9zTCYTS/ci0aqsB3aVihVp
      8jWBe71ezzroBO1dNVmXuNsug20nVuoSY8QN+b6PTqdjcwFMYpH9WirOeDy2E1iKTG7VhVsl
      LWQQBCv1A1dB1o1ltwNsiVQRTdWVSDYajRKsmZM+DEO7QsuoTbvdxmg0gtaGE7Sq8bR0rmWY
      lRlkjsNtXH3VZbcDbInQbpekswS5uYS1UiHckCix/zJ0Sn4hVncRrsHvEngnAXayGMbl/qHJ
      dVUjQlR+rfVOAbZFWLroNrFggsol1vV93zbncBtwcMK7porcQWSXmCRJMJ1ObWa4aleg0A+4
      apNf1i6z78FOAbZIlFJWAdz3qyYx+YUAWLNnPp9bol45+atY42RXSlaHkeE6yzJcXFzYyAqj
      TTyHq6S/hTCSNZ/PVyhrJEnATgG2TNwMMh1cwiIIY6DNLwvhufID5SYYvu9XTlhZ/M5QOXca
      2S+MoVGJPmVL1d9KptPpCvKWE5/mXJ7nOyd4m4XQhvF4jDRNrX9Q1WfALbqnVDHAUZhPoBIp
      pex1OImyLLNQCuYWANQ2F/wQslgsKskI3IiZ7/u7HWCbhShR2fWd2WZ39a2a4HXANmCJ9+F5
      SOfIRBn9A5aCMrcALDOvrCj70ELCrmazuULQ6xbx73aALRWGLAeDwcpn67qwywmwKWQpz8HJ
      7LZFZaEMSXtlImw8Hl+aEODXFJp/rv3PcdP8ybJspwDbKozISATmuonGh54kSQkuwUzxdDot
      dadhNRrzAyzIl6FVADbbTLMoCALbwCPP8xLDxIeSPM9LJh9zIlR2ciMppaDOz8/1b7FN7eT9
      hbtAVb/eqh2AjrBrHtF8mk6nAJZN7lgtxoJ8KpvMKMtzS/NI5h9IovWhJE3TUp2ELOWU+RQA
      +P8nXZANBvexcQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Normalized Distribution of Recalls' width='192'>
      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
      LsiJh7szjdsAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='184' name='Proportion of Reasons' width='192'>
      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
    </thumbnail>
    <thumbnail height='184' name='Proportion of subreasons' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAAC4CAYAAAC1reOrAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAPK0lEQVR4nO3df1CTd54H8DciSUgChB9CEBHxR6l2VwWjlqXtWfaKu1ur06XT3pXdOt3p
      nFd7Xq21nXbv9oZqe7u9Tnvu0h/LnNsunetMb7bsXbvd66xbrAL2Z9R2PX8gCKIiEH4EA09C
      EgL3R0wMkN8hJPp9v/7CJ0+SrzOf9/N8v9/n+zxJmJiYmACRoObEugFEscQAkNAYABIaA0BC
      YwBIaAwACY0BIKExACQ0BoCExgCQ0BgAEhoDQEJjAEhoDAAJjQEgoTEAJDQGgITGAJDQGAAS
      GgNAQmMASGgMAAmNASChMQAkNAaAhMYAkNAYABLa3EA76PX62WgHUUwk8OG4JDJ2gUhoDAAJ
      jQEgoTEAJDQGgITGAJDQGAASGgNAQmMASGgMAAmNASChMQAkNAaAhMYAkNAYABIaA0BCYwBI
      aAwACY0BIKExACQ0BoCExgCQ0BgAEhoDQEJjAEhoDAAJjQEgoTEAJDQGgITGAJDQGAASGgNA
      QmMASGgMAAmNASChMQAkNAaAhMYAkNAC/k4wUbTYJStskhV2yQoAkHqHp20/Nt4KSdsOKDSY
      p84GACzWLkbBeAIyctdG3AYGgGaVXbJCMpgw1N4PyWAK/AbLEPr6z+K0dcS9aZExHyU9J6Ey
      9SNjvg4ZuWuxbM2jYbWHP5RNUWeXrDC298NsMAVX9B7O4AQaJw6gb8zm3vat/FwUtx6Ztm9y
      ynzk3bQFmVdDEQyeAShqhjr6YDjR5e7ihEM52gvIJ2/LSErwuq9l+DLajr6BtqOAdv7N+NZ3
      HkdSRpnfz2cAaMbZJSu6Pm8P+WjvzRyZctLRXyaTQWnqD/i+rFTA0vkWrN0fQFHwE8xVF3nd
      jwGgGWOXrDCc6MJQR1/UvkMukwGw+d9HLkdaSioAYNw2AHPrS0hUFyG54GHMkWVN2pcBoIi5
      +vh9/3dpxj9bks8BzNf+naJWQTl42e97Fs7Pm7bNMdKCkZPPQJ67GXLtZvd2BoAiYpes6Gg4
      HVE/3x/1+PCkf8tkMqj8dIHkcjmys7J8vm7t/gD2gSPubhEDQGEznOiKylHfk2f/HwDUE2N+
      909LSQn4ma5uUXLBwwwAhS6aXZ6pspPtgMdJwNcMkHt/P0f/qSydbzEAFJrZGOj6EmgGKC0l
      xT34DRYDQEGLdn/fm36PLpBcJoPS5HsAnJ83ffAbCBfDUVBiUfwAMJCY5P47Ra2CzGr2up/n
      1GcoGAAKyHVha7aLHwCUoz3uv1UTY0jyEQBvU5+B9FllDAAFZgx24VoUJMiU7r99zQAFmvr0
      ps8qw+87ChgA8m+oo29WZnt8MUsX3X/njFu87hPM1KcnV/Fvsc1jAMg3V9cnHvibAQrl6N9n
      laHpci7uNqXgJoeDASDvXIPeWBuY45yodK4Bmi6Uqc8+qwxnBjKx5oIKK5Kcg2sGgLyKdBnz
      TMtISvC6BCKUqc8zA5lY2JqOb6de6zIxADSNXbLG5EKXNwkyFQBnF2iqUKY+my7nTit+gAEg
      L+Kl3w8A/Q7nhTBvM0DBTn36Kn6AAaAppDBuW4wm12K4qTNAwU59+it+gAGgKfpOdMW6CdN4
      mwEKZuqz6XIusk+pfRY/wLVA5CHejv4ucpkMqv5rAQjm6H+mPxOqi1qszfQ+e+TCMwC5xePR
      H5i+BFohk/kd/J7pz4TBsBwbfEyduhhtdp4ByMn1vJ54pJoyAPY39ekq/k1Wu9/PPGYcQoPB
      wACQk7E98JMWYiV99Fow/U19zrHJAxa/0WZHg8GAY0aj8z3hN6sTdVU6VDcG2jYLOutQpavG
      bH/tjcQcp0d/YPIMkK+pzzk2OQ61rfVZ/K7Cf6mlxV38QCzHAI3V0HkUbWO1DlV1nTFrjsji
      ufvjeQHM1+B3/MoEPm0p8ln87ZKE/R0daOg1THstdl2gO6qh18fs28lDvBY/4LwAphp2ds+8
      TX2OX5nAlxdWoWIsedprRpsdx4aMXgvfJaoBaKzW4bWk7Vh17l189JdBjOXchmdf34fNBXCe
      AWoLUf/OBhyqqkRNCwBUQlcDYNMr0FffAUd7PZ55ch8+uWhBUupyPPCL17BzXSoAB7oPvoin
      n/8DTpuA1PwMJCDyJwWLaiiO+/+uGSBvR39fxR9M4btEvQtktszH/b/8A5q+OICnlzbjvw5N
      7eYUYOs7eryyCSjaUQ+9Xg999R2A4yhe2fExSn71MfR6PQ7V3onjTz6PAxKAs/vx2D+14M5X
      G/CF/jN89MLdCO12CHKJ5+4PAPcFsKlTn8PjSp/F76u7403Uu0Cpy5ZjaYocgByZ6SG8seVz
      NPZ+he57y/Cye2MRuvuBzs8acWHjNvxkhfNuoUSVitNZYbLF0YpPbzKSEoCxyVOfw+NKnDy5
      dFLxh3LUVygUyNXmQKPRRFI3czF3LjAsSQBUV7d14UJ7LubN1OE47T68fuAZrEucvJlD5ZkT
      T0uevVFPjE2a+hweV8LQtnBS8TcYDH4LX6FQQKFQIF2TBq02BwqFwv1aBF2gPNxWXoTD/7kf
      Xw86AIcZp96sxf+m3oFbvT+I1y+VKg09Z89i0AE4HA6gaC3K8D5e+/XXGHQAcJjRc/IznBoA
      Fiz/NtKa/oSPDFbn9vOXEL8n8fhmG/H/oNlYSx81uac++6wyGNoWolhKA+A86v9Hu/fujkKh
      gEajwfKbi1B66zoUr16JRYsKJhU/EGEXqOBHNfiVcTee3rIeg5YkpC6/By/8dhfWJAZ+71Rr
      7n8cJTv3oGL9s0j+4Wto+ul6bP/3v8fePbtw91sm2JNSsaj4QTz7UikS123Hz+95DM9sKcPP
      5ubjzorFAEK7L5SuD67Bb59VBnnPAhRLaT67O86iT0O6RgOtNieoz+cvxAiu6/P2uLn5xZtR
      +bPQzL8ZC4zZkHfnuZcwGG3OM1c4Re+JY0fBxfsYYOH8PKQas2HuzMbblzrQIUlQKBTQanOQ
      q9VCo0mL6PMZAMHF+yyQozcfzaeTcORKJzSaNBQvWxpx0XtiAAQX72eApsvzkZgux22Fy65t
      HHUgcdQxab9EqwNTzZ26z+j49H1mppl0vUpSyeMiBHabHcNDJlgkMyzStccfypCKZYu1WJaT
      G5XvZQAEJ4thAHwV/VSt7T241D2IBbkZWLZkZoMQUQBMf6nD3j11aD5vAlIXoXjzdvxsRzly
      w5gGpdhIUskD7zSD7DY7LJLZXfjBslhs7iCsuqUAGenqGWlP+BfCpAN4ftv7yHryPTTr9Tj0
      /i9wr/kQGq8+RjLU5c2ddVXQzfqNBDQb7DY7TMYr6Oq4iM6z7TB09YRU/J4sFhs+17fiC30r
      LJbIL+KFfwa41I42+0psKs1AIoDElKW466d7Im4Qza5onQHCPdIHa8A4gk+aTzrHBxF0i8I/
      AyxYgZVpf0LN3j/jvNlztO28K2zXh0BLTSV0Op37yD7w8XP4m4rbndtur8BjvzkFCc6zRWVN
      C/DhLudrVXXO9T6mL7Hvx+Uo1emgu/1ePFXfDuc3mfDlvh+jvFQHna4U5fc9h48Hwv6fCE2m
      9n/jeChm8kgfrNb2HnzSfBKt57rDen9EV4Id3QdRs7cG9V/2IGn5Xdj21G48sNK5aKmxWofa
      wnq8s7XAvf/Aqa9hzHeuDnUM/jd2VfwP1r1fh6o8ZxeosmObcyk0AKAX9Y/+I9oeegO7SzOA
      wYPY+7evIrfm99iGWvzwSQn/8t4urJZbMdx2GhfTV2NFZrj/E3FJBhPOR/AQ3Ggf6UORnCwL
      eXwQ0SA4MbccO18vxw5zD4797gX887YdGHu3DlUF3vdPGvsGtQ/vQvN5E5w3rxWhxNevXkrH
      8OlX53D4qwr8zmPzph4AawqxtH8vnntiEBs3fB+3b9DhFhZ/WFTZof+skKvoLZIFw0NXotCq
      8LjGB5npaqy8pQDJyYHPbjMyDZqo1GLt1t148EAlDjR3oarA243LR1H7xNuQ7X4Xh76fDTka
      Ua2rDfDJq/HUH/fjgWlLPCrw84abcLzhMJoO/xo7agaxed8H2BnOKjyCpnBewPVA8Vr03oQy
      Pgh/DPBpDXbWNqFt2ArAAfOpBhxsz0TxLc7in7a8GVaMmpXIzE2D3GHG+abP0OrxcWp1KtB6
      Bq1WAA4HHKoSrFv9Nd58+QNctAKAFcNtTfiqE0BLI/7YocCKH2zFEy/+EjtKenH8TM/UFlKQ
      VDneV9K6+vS9l3rcffp4L35PwYwPwg/AkltR3PUWtv+gDDrdemzc2YyiF36LHaudL6+5/3GU
      nNqDivU6bHhRD2A9qv4hDx8+WobSu7bhzcuKSbcxZn7vEWyd8y4eKtOh9O/eQw9ycN/ef8Nf
      9b+KB8t00On+GpX/+mcMAoDCAv3LD2Hjeh1067fgjeEf4bF7Qv+RNHLSFM5z/329F/1UrusH
      nzSfxKBxZNrrXA5NAICjbx/Gld6h67rYgzF1fMBngxIAQJWnueGLH7g2PnB1i7gWiAAAyhla
      WnC9cC2r4BmAAAALS5YgqzD0O6quZxaLjQGga/JLlsa6CbOOASA3Ec8CDABNUvTdVbFuwqxi
      AGiSrEKtUGcBBoCmEekswADQNFmFWiwsWRLrZswKBoC8KioX4yzAAJBXynQ1yh6piHUzoo4B
      IJ+yCrU3fAgYAPLrRh8PMAAUUHFl2Q07NcoAUFDKHtl4Q4aAAaCgFVeW3XCrRnlDDIXEbBzB
      8foj6O/ojXVTZgQDQGE50/ANWg5+E+tmRIwBoLBdOHYOx+uPxLoZYVGmq5FfvIQBoMj0d/Tg
      yP4DsW5GSJTpahRXfgdZhVoGgCJnNo7gwrFz10WXaGHJEhSVr3IP5hkAmjHxPEDOKsxB0XdX
      IatQO2k7A0AzLp6C4Nnd8YYBoKjp7+jB8fpPYfbyQKpoU6arUVS+KuAyDgaAos41Rrh4/FxU
      w+Ca2clanOPziD8VA0CzyhWGgY6eiLtIynQ1lBoV8kuWIqswJ6yr1AwAxYzZOALz0AjMRsl9
      ZrAMjVzd7tzmKnJXcWdePbIr01VBH+X9YQBIaFwMR0JjAEhoDAAJjQEgoTEAJDQGgITGAJDQ
      GAASGgNAQmMASGgMAAmNASChMQAkNAaAhMYAkNAYABIaA0BCYwBIaAwACY0BIKExACQ0BoCE
      xgCQ0BgAEhoDQEJjAEhoDAAJjQEgoTEAJDQGgITGAJDQGAASGgNAQmMASGgMAAmNASCh/T/K
      qAWdZNGKLQAAAABJRU5ErkJggg==
    </thumbnail>
  </thumbnails>
</workbook>
