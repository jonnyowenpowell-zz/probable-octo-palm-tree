<?xml version='1.0' encoding='utf-8' ?>

<!-- build 10400.17.1103.1137                               -->
<workbook source-build='10.4.1 (10400.17.1103.1137)' source-platform='win' version='10.4' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='Normalized by Farmland (Events per State)' inline='true' name='federated.0ejb3570w2pzii1ckul1s0fclavh' version='10.4'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Events per State' name='excel-direct.0ibimmc0g40qip135jv2m0dpo3ms'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/Stewart/Documents/GitHub/probable-octo-palm-tree/Data/Events per State.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <relation connection='excel-direct.0ibimmc0g40qip135jv2m0dpo3ms' name='Normalized by Farmland' table='[&apos;Normalized by Farmland$&apos;]' type='table'>
          <columns gridOrigin='A1:F53:no:A1:F53:0' header='yes' outcome='2'>
            <column datatype='string' name='Country' ordinal='0' />
            <column datatype='string' name='state (Records per State)' ordinal='1' />
            <column datatype='integer' name='Number of Events' ordinal='2' />
            <column datatype='string' name='State (Farmland)' ordinal='3' />
            <column datatype='real' name='Area of Farmland (1000 Acres)' ordinal='4' />
            <column datatype='real' name='Records Normalized by Area of Farmland, There are X product recalls per 1000 acres of farmland' ordinal='5' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[Normalized by Farmland]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RGB_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>state (Records per State)</remote-name>
            <remote-type>130</remote-type>
            <local-name>[state (Records per State)]</local-name>
            <parent-name>[Normalized by Farmland]</parent-name>
            <remote-alias>state (Records per State)</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RGB_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Number of Events</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Number of Events]</local-name>
            <parent-name>[Normalized by Farmland]</parent-name>
            <remote-alias>Number of Events</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>State (Farmland)</remote-name>
            <remote-type>130</remote-type>
            <local-name>[State (Farmland)]</local-name>
            <parent-name>[Normalized by Farmland]</parent-name>
            <remote-alias>State (Farmland)</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RGB_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Area of Farmland (1000 Acres)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Area of Farmland (1000 Acres)]</local-name>
            <parent-name>[Normalized by Farmland]</parent-name>
            <remote-alias>Area of Farmland (1000 Acres)</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Records Normalized by Area of Farmland, There are X product recalls per 1000 acres of farmland</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Records Normalized by Area of Farmland, There are X product recalls per 1000 acres of farmland]</local-name>
            <parent-name>[Normalized by Farmland]</parent-name>
            <remote-alias>Records Normalized by Area of Farmland, There are X product recalls per 1000 acres of farmland</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Normalized by Farmland]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:F53:no:A1:F53:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>2</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='string' name='[State (Farmland)]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column datatype='string' name='[state (Records per State)]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <layout dim-ordering='alphabetic' dim-percentage='0.424821' measure-ordering='alphabetic' measure-percentage='0.575179' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Reino Unido&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
    </datasource>
    <datasource caption='Normalized by Income (Events per State)' inline='true' name='federated.1f84uix04q0ivo1a61lum1t4v6bi' version='10.4'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Events per State' name='excel-direct.0apyc6h0577xgw130kb7b0aws9zs'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/Stewart/Documents/GitHub/probable-octo-palm-tree/Data/Events per State.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <relation connection='excel-direct.0apyc6h0577xgw130kb7b0aws9zs' name='Normalized by Income' table='[&apos;Normalized by Income$&apos;]' type='table'>
          <columns gridOrigin='A1:F53:no:A1:F53:0' header='yes' outcome='2'>
            <column datatype='string' name='Country' ordinal='0' />
            <column datatype='string' name='State  (Records per state)' ordinal='1' />
            <column datatype='integer' name='Number of Recalls' ordinal='2' />
            <column datatype='string' name='State (Income)' ordinal='3' />
            <column datatype='real' name='State receipts for all commodities ($1 mill)' ordinal='4' />
            <column datatype='real' name='Records Normalized by Income (For every $1 mill produced, there are X recalls)' ordinal='5' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[Normalized by Income]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RGB_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>State  (Records per state)</remote-name>
            <remote-type>130</remote-type>
            <local-name>[State  (Records per state)]</local-name>
            <parent-name>[Normalized by Income]</parent-name>
            <remote-alias>State  (Records per state)</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RGB_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Number of Recalls</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Number of Recalls]</local-name>
            <parent-name>[Normalized by Income]</parent-name>
            <remote-alias>Number of Recalls</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>State (Income)</remote-name>
            <remote-type>130</remote-type>
            <local-name>[State (Income)]</local-name>
            <parent-name>[Normalized by Income]</parent-name>
            <remote-alias>State (Income)</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RGB_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>State receipts for all commodities ($1 mill)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[State receipts for all commodities ($1 mill)]</local-name>
            <parent-name>[Normalized by Income]</parent-name>
            <remote-alias>State receipts for all commodities ($1 mill)</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Records Normalized by Income (For every $1 mill produced, there are X recalls)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Records Normalized by Income (For every $1 mill produced, there are X recalls)]</local-name>
            <parent-name>[Normalized by Income]</parent-name>
            <remote-alias>Records Normalized by Income (For every $1 mill produced, there are X recalls)</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Normalized by Income]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:F53:no:A1:F53:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>2</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='string' name='[State  (Records per state)]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column datatype='string' name='[State (Income)]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <layout dim-ordering='alphabetic' dim-percentage='0.429545' measure-ordering='alphabetic' measure-percentage='0.570455' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Reino Unido&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
    </datasource>
    <datasource caption='food-enforcement' inline='true' name='federated.0spq67m0b2qmsk18pec441utz9ht' version='10.4'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='food-enforcement' name='semistructpassivestore-direct.1cox9nx13uiv4v1cnrdfg1rojtft'>
            <connection class='semistructpassivestore-direct' directory='C:/Users/Stewart/Documents/GitHub/probable-octo-palm-tree/FileHandling' filename='food-enforcement.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[food-enforcement.json]'>
                  <map key='meta' value='false' />
                  <map key='meta.results' value='false' />
                  <map key='results' value='true' />
                  <map key='results.Value' value='true' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
                <semistruct-schema-sequel table='[food-enforcement.json]'>
                  <semistruct-schema-node global-name='results.Value.more_code_info'>
                    <name>more_code_info</name>
                    <parent-name>results.Value</parent-name>
                    <type>string</type>
                    <is-selected>true</is-selected>
                    <is-newly-discovered>true</is-newly-discovered>
                    <sample-data />
                  </semistruct-schema-node>
                </semistruct-schema-sequel>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='semistructpassivestore-direct.1cox9nx13uiv4v1cnrdfg1rojtft' name='food-enforcement.json' table='[food-enforcement.json]' type='table' />
        <cols>
          <map key='[Document Index (generated)]' value='[food-enforcement.json].[Document Index (generated)]' />
          <map key='[address_1]' value='[food-enforcement.json].[results.Value.address_1]' />
          <map key='[address_2]' value='[food-enforcement.json].[results.Value.address_2]' />
          <map key='[center_classification_date]' value='[food-enforcement.json].[results.Value.center_classification_date]' />
          <map key='[city]' value='[food-enforcement.json].[results.Value.city]' />
          <map key='[classification]' value='[food-enforcement.json].[results.Value.classification]' />
          <map key='[code_info]' value='[food-enforcement.json].[results.Value.code_info]' />
          <map key='[country]' value='[food-enforcement.json].[results.Value.country]' />
          <map key='[distribution_pattern]' value='[food-enforcement.json].[results.Value.distribution_pattern]' />
          <map key='[event_id]' value='[food-enforcement.json].[results.Value.event_id]' />
          <map key='[initial_firm_notification]' value='[food-enforcement.json].[results.Value.initial_firm_notification]' />
          <map key='[more_code_info]' value='[food-enforcement.json].[results.Value.more_code_info]' />
          <map key='[postal_code]' value='[food-enforcement.json].[results.Value.postal_code]' />
          <map key='[product_description]' value='[food-enforcement.json].[results.Value.product_description]' />
          <map key='[product_quantity]' value='[food-enforcement.json].[results.Value.product_quantity]' />
          <map key='[product_type]' value='[food-enforcement.json].[results.Value.product_type]' />
          <map key='[reason_for_recall]' value='[food-enforcement.json].[results.Value.reason_for_recall]' />
          <map key='[recall_initiation_date]' value='[food-enforcement.json].[results.Value.recall_initiation_date]' />
          <map key='[recall_number]' value='[food-enforcement.json].[results.Value.recall_number]' />
          <map key='[recalling_firm]' value='[food-enforcement.json].[results.Value.recalling_firm]' />
          <map key='[report_date]' value='[food-enforcement.json].[results.Value.report_date]' />
          <map key='[results Index (generated)]' value='[food-enforcement.json].[results.Index (generated)]' />
          <map key='[state]' value='[food-enforcement.json].[results.Value.state]' />
          <map key='[status]' value='[food-enforcement.json].[results.Value.status]' />
          <map key='[termination_date]' value='[food-enforcement.json].[results.Value.termination_date]' />
          <map key='[voluntary_mandated]' value='[food-enforcement.json].[results.Value.voluntary_mandated]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[food-enforcement.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[results Index (generated)]</local-name>
            <parent-name>[food-enforcement.json]</parent-name>
            <remote-alias>results.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.address_1</remote-name>
            <remote-type>130</remote-type>
            <local-name>[address_1]</local-name>
            <parent-name>[food-enforcement.json]</parent-name>
            <remote-alias>results.Value.address_1</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.address_2</remote-name>
            <remote-type>130</remote-type>
            <local-name>[address_2]</local-name>
            <parent-name>[food-enforcement.json]</parent-name>
            <remote-alias>results.Value.address_2</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.center_classification_date</remote-name>
            <remote-type>130</remote-type>
            <local-name>[center_classification_date]</local-name>
            <parent-name>[food-enforcement.json]</parent-name>
            <remote-alias>results.Value.center_classification_date</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.city</remote-name>
            <remote-type>130</remote-type>
            <local-name>[city]</local-name>
            <parent-name>[food-enforcement.json]</parent-name>
            <remote-alias>results.Value.city</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.classification</remote-name>
            <remote-type>130</remote-type>
            <local-name>[classification]</local-name>
            <parent-name>[food-enforcement.json]</parent-name>
            <remote-alias>results.Value.classification</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.code_info</remote-name>
            <remote-type>130</remote-type>
            <local-name>[code_info]</local-name>
            <parent-name>[food-enforcement.json]</parent-name>
            <remote-alias>results.Value.code_info</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[country]</local-name>
            <parent-name>[food-enforcement.json]</parent-name>
            <remote-alias>results.Value.country</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.distribution_pattern</remote-name>
            <remote-type>130</remote-type>
            <local-name>[distribution_pattern]</local-name>
            <parent-name>[food-enforcement.json]</parent-name>
            <remote-alias>results.Value.distribution_pattern</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.event_id</remote-name>
            <remote-type>130</remote-type>
            <local-name>[event_id]</local-name>
            <parent-name>[food-enforcement.json]</parent-name>
            <remote-alias>results.Value.event_id</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.initial_firm_notification</remote-name>
            <remote-type>130</remote-type>
            <local-name>[initial_firm_notification]</local-name>
            <parent-name>[food-enforcement.json]</parent-name>
            <remote-alias>results.Value.initial_firm_notification</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.more_code_info</remote-name>
            <remote-type>130</remote-type>
            <local-name>[more_code_info]</local-name>
            <parent-name>[food-enforcement.json]</parent-name>
            <remote-alias>results.Value.more_code_info</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.postal_code</remote-name>
            <remote-type>130</remote-type>
            <local-name>[postal_code]</local-name>
            <parent-name>[food-enforcement.json]</parent-name>
            <remote-alias>results.Value.postal_code</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.product_description</remote-name>
            <remote-type>130</remote-type>
            <local-name>[product_description]</local-name>
            <parent-name>[food-enforcement.json]</parent-name>
            <remote-alias>results.Value.product_description</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.product_quantity</remote-name>
            <remote-type>130</remote-type>
            <local-name>[product_quantity]</local-name>
            <parent-name>[food-enforcement.json]</parent-name>
            <remote-alias>results.Value.product_quantity</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.product_type</remote-name>
            <remote-type>130</remote-type>
            <local-name>[product_type]</local-name>
            <parent-name>[food-enforcement.json]</parent-name>
            <remote-alias>results.Value.product_type</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.reason_for_recall</remote-name>
            <remote-type>130</remote-type>
            <local-name>[reason_for_recall]</local-name>
            <parent-name>[food-enforcement.json]</parent-name>
            <remote-alias>results.Value.reason_for_recall</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.recall_initiation_date</remote-name>
            <remote-type>130</remote-type>
            <local-name>[recall_initiation_date]</local-name>
            <parent-name>[food-enforcement.json]</parent-name>
            <remote-alias>results.Value.recall_initiation_date</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.recall_number</remote-name>
            <remote-type>130</remote-type>
            <local-name>[recall_number]</local-name>
            <parent-name>[food-enforcement.json]</parent-name>
            <remote-alias>results.Value.recall_number</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.recalling_firm</remote-name>
            <remote-type>130</remote-type>
            <local-name>[recalling_firm]</local-name>
            <parent-name>[food-enforcement.json]</parent-name>
            <remote-alias>results.Value.recalling_firm</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.report_date</remote-name>
            <remote-type>130</remote-type>
            <local-name>[report_date]</local-name>
            <parent-name>[food-enforcement.json]</parent-name>
            <remote-alias>results.Value.report_date</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.state</remote-name>
            <remote-type>130</remote-type>
            <local-name>[state]</local-name>
            <parent-name>[food-enforcement.json]</parent-name>
            <remote-alias>results.Value.state</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.status</remote-name>
            <remote-type>130</remote-type>
            <local-name>[status]</local-name>
            <parent-name>[food-enforcement.json]</parent-name>
            <remote-alias>results.Value.status</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.termination_date</remote-name>
            <remote-type>130</remote-type>
            <local-name>[termination_date]</local-name>
            <parent-name>[food-enforcement.json]</parent-name>
            <remote-alias>results.Value.termination_date</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.voluntary_mandated</remote-name>
            <remote-type>130</remote-type>
            <local-name>[voluntary_mandated]</local-name>
            <parent-name>[food-enforcement.json]</parent-name>
            <remote-alias>results.Value.voluntary_mandated</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per food-enforcement.json]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at food-enforcement.json level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per results]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([results Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at results level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Address 1' datatype='string' name='[address_1]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.address_1</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Address 2' datatype='string' name='[address_2]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.address_2</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Center Classification Date' datatype='string' name='[center_classification_date]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.center_classification_date</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='City' datatype='string' name='[city]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.city</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Classification' datatype='string' name='[classification]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.classification</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Code Info' datatype='string' name='[code_info]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.code_info</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.country</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Distribution Pattern' datatype='string' name='[distribution_pattern]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.distribution_pattern</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Event Id' datatype='string' name='[event_id]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.event_id</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Initial Firm Notification' datatype='string' name='[initial_firm_notification]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.initial_firm_notification</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='More Code Info' datatype='string' name='[more_code_info]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.more_code_info</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Postal Code' datatype='string' name='[postal_code]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.postal_code</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Product Description' datatype='string' name='[product_description]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.product_description</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Product Quantity' datatype='string' name='[product_quantity]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.product_quantity</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Product Type' datatype='string' name='[product_type]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.product_type</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Reason For Recall' datatype='string' name='[reason_for_recall]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.reason_for_recall</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Recall Initiation Date' datatype='real' datatype-customized='true' name='[recall_initiation_date]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>results.Value.recall_initiation_date</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Recall Number' datatype='string' name='[recall_number]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.recall_number</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Recalling Firm' datatype='string' name='[recalling_firm]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.recalling_firm</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Report Date' datatype='string' name='[report_date]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.report_date</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[results Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>results.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='State' datatype='string' name='[state]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.state</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.status</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Termination Date' datatype='string' name='[termination_date]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.termination_date</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Voluntary Mandated' datatype='string' name='[voluntary_mandated]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.voluntary_mandated</run>
          </formatted-text>
        </desc>
      </column>
      <drill-paths>
        <drill-path name='Country, State, City'>
          <field>[country]</field>
          <field>[state]</field>
          <field>[city]</field>
        </drill-path>
      </drill-paths>
      <folder name='Food-Enforcement' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
      </folder>
      <folder name='Meta' role='dimensions' />
      <folder name='Results' role='dimensions'>
        <folder-item name='[address_1]' type='field' />
        <folder-item name='[address_2]' type='field' />
        <folder-item name='[center_classification_date]' type='field' />
        <folder-item name='[city]' type='field' />
        <folder-item name='[classification]' type='field' />
        <folder-item name='[code_info]' type='field' />
        <folder-item name='[country]' type='field' />
        <folder-item name='[distribution_pattern]' type='field' />
        <folder-item name='[event_id]' type='field' />
        <folder-item name='[initial_firm_notification]' type='field' />
        <folder-item name='[more_code_info]' type='field' />
        <folder-item name='[postal_code]' type='field' />
        <folder-item name='[product_description]' type='field' />
        <folder-item name='[product_quantity]' type='field' />
        <folder-item name='[product_type]' type='field' />
        <folder-item name='[reason_for_recall]' type='field' />
        <folder-item name='[recall_initiation_date]' type='field' />
        <folder-item name='[recall_number]' type='field' />
        <folder-item name='[recalling_firm]' type='field' />
        <folder-item name='[report_date]' type='field' />
        <folder-item name='[results Index (generated)]' type='field' />
        <folder-item name='[state]' type='field' />
        <folder-item name='[status]' type='field' />
        <folder-item name='[termination_date]' type='field' />
        <folder-item name='[voluntary_mandated]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.699284' measure-ordering='alphabetic' measure-percentage='0.300716' show-structure='false' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Reino Unido&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
    </datasource>
    <datasource caption='food-enforcement_FOODTYPE_AND_REASON_RR_UNITS' inline='true' name='federated.1ihehzv1bfnjkh1fjtkjd1d2bexx' version='10.4'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='food-enforcement_FOODTYPE_AND_REASON_RR_UNITS' name='semistructpassivestore-direct.0wvdk460c7jxmr187avsj104w7kj'>
            <connection class='semistructpassivestore-direct' directory='C:/Users/Stewart/Documents/GitHub/probable-octo-palm-tree/FileHandling' filename='food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json]'>
                  <map key='results' value='true' />
                  <map key='results.Value' value='true' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='semistructpassivestore-direct.0wvdk460c7jxmr187avsj104w7kj' name='food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json' table='[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json]' type='table' />
        <cols>
          <map key='[Document Index (generated)]' value='[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json].[Document Index (generated)]' />
          <map key='[address_1]' value='[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json].[results.Value.address_1]' />
          <map key='[address_2]' value='[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json].[results.Value.address_2]' />
          <map key='[boxes]' value='[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json].[results.Value.boxes]' />
          <map key='[cases]' value='[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json].[results.Value.cases]' />
          <map key='[center_classification_date]' value='[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json].[results.Value.center_classification_date]' />
          <map key='[city]' value='[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json].[results.Value.city]' />
          <map key='[classification]' value='[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json].[results.Value.classification]' />
          <map key='[code_info]' value='[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json].[results.Value.code_info]' />
          <map key='[country]' value='[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json].[results.Value.country]' />
          <map key='[distribution_pattern]' value='[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json].[results.Value.distribution_pattern]' />
          <map key='[event_id]' value='[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json].[results.Value.event_id]' />
          <map key='[general_food]' value='[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json].[results.Value.general_food]' />
          <map key='[initial_firm_notification]' value='[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json].[results.Value.initial_firm_notification]' />
          <map key='[postal_code]' value='[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json].[results.Value.postal_code]' />
          <map key='[product_description]' value='[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json].[results.Value.product_description]' />
          <map key='[product_quantity]' value='[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json].[results.Value.product_quantity]' />
          <map key='[product_type]' value='[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json].[results.Value.product_type]' />
          <map key='[reason]' value='[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json].[results.Value.reason]' />
          <map key='[reason_for_recall]' value='[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json].[results.Value.reason_for_recall]' />
          <map key='[recall_initiation_date]' value='[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json].[results.Value.recall_initiation_date]' />
          <map key='[recall_number]' value='[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json].[results.Value.recall_number]' />
          <map key='[recalling_firm]' value='[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json].[results.Value.recalling_firm]' />
          <map key='[report_date]' value='[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json].[results.Value.report_date]' />
          <map key='[results Index (generated)]' value='[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json].[results.Index (generated)]' />
          <map key='[specific_food]' value='[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json].[results.Value.specific_food]' />
          <map key='[specific_reason]' value='[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json].[results.Value.specific_reason]' />
          <map key='[state]' value='[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json].[results.Value.state]' />
          <map key='[status]' value='[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json].[results.Value.status]' />
          <map key='[termination_date]' value='[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json].[results.Value.termination_date]' />
          <map key='[units]' value='[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json].[results.Value.units]' />
          <map key='[voluntary_mandated]' value='[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json].[results.Value.voluntary_mandated]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[results Index (generated)]</local-name>
            <parent-name>[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json]</parent-name>
            <remote-alias>results.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.address_1</remote-name>
            <remote-type>130</remote-type>
            <local-name>[address_1]</local-name>
            <parent-name>[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json]</parent-name>
            <remote-alias>results.Value.address_1</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.address_2</remote-name>
            <remote-type>130</remote-type>
            <local-name>[address_2]</local-name>
            <parent-name>[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json]</parent-name>
            <remote-alias>results.Value.address_2</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.boxes</remote-name>
            <remote-type>130</remote-type>
            <local-name>[boxes]</local-name>
            <parent-name>[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json]</parent-name>
            <remote-alias>results.Value.boxes</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.cases</remote-name>
            <remote-type>130</remote-type>
            <local-name>[cases]</local-name>
            <parent-name>[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json]</parent-name>
            <remote-alias>results.Value.cases</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.center_classification_date</remote-name>
            <remote-type>130</remote-type>
            <local-name>[center_classification_date]</local-name>
            <parent-name>[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json]</parent-name>
            <remote-alias>results.Value.center_classification_date</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.city</remote-name>
            <remote-type>130</remote-type>
            <local-name>[city]</local-name>
            <parent-name>[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json]</parent-name>
            <remote-alias>results.Value.city</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.classification</remote-name>
            <remote-type>130</remote-type>
            <local-name>[classification]</local-name>
            <parent-name>[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json]</parent-name>
            <remote-alias>results.Value.classification</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.code_info</remote-name>
            <remote-type>130</remote-type>
            <local-name>[code_info]</local-name>
            <parent-name>[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json]</parent-name>
            <remote-alias>results.Value.code_info</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[country]</local-name>
            <parent-name>[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json]</parent-name>
            <remote-alias>results.Value.country</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.distribution_pattern</remote-name>
            <remote-type>130</remote-type>
            <local-name>[distribution_pattern]</local-name>
            <parent-name>[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json]</parent-name>
            <remote-alias>results.Value.distribution_pattern</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.event_id</remote-name>
            <remote-type>130</remote-type>
            <local-name>[event_id]</local-name>
            <parent-name>[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json]</parent-name>
            <remote-alias>results.Value.event_id</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.general_food</remote-name>
            <remote-type>130</remote-type>
            <local-name>[general_food]</local-name>
            <parent-name>[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json]</parent-name>
            <remote-alias>results.Value.general_food</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.initial_firm_notification</remote-name>
            <remote-type>130</remote-type>
            <local-name>[initial_firm_notification]</local-name>
            <parent-name>[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json]</parent-name>
            <remote-alias>results.Value.initial_firm_notification</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.postal_code</remote-name>
            <remote-type>130</remote-type>
            <local-name>[postal_code]</local-name>
            <parent-name>[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json]</parent-name>
            <remote-alias>results.Value.postal_code</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.product_description</remote-name>
            <remote-type>130</remote-type>
            <local-name>[product_description]</local-name>
            <parent-name>[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json]</parent-name>
            <remote-alias>results.Value.product_description</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.product_quantity</remote-name>
            <remote-type>130</remote-type>
            <local-name>[product_quantity]</local-name>
            <parent-name>[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json]</parent-name>
            <remote-alias>results.Value.product_quantity</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.product_type</remote-name>
            <remote-type>130</remote-type>
            <local-name>[product_type]</local-name>
            <parent-name>[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json]</parent-name>
            <remote-alias>results.Value.product_type</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.reason</remote-name>
            <remote-type>130</remote-type>
            <local-name>[reason]</local-name>
            <parent-name>[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json]</parent-name>
            <remote-alias>results.Value.reason</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.reason_for_recall</remote-name>
            <remote-type>130</remote-type>
            <local-name>[reason_for_recall]</local-name>
            <parent-name>[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json]</parent-name>
            <remote-alias>results.Value.reason_for_recall</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.recall_initiation_date</remote-name>
            <remote-type>130</remote-type>
            <local-name>[recall_initiation_date]</local-name>
            <parent-name>[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json]</parent-name>
            <remote-alias>results.Value.recall_initiation_date</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.recall_number</remote-name>
            <remote-type>130</remote-type>
            <local-name>[recall_number]</local-name>
            <parent-name>[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json]</parent-name>
            <remote-alias>results.Value.recall_number</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.recalling_firm</remote-name>
            <remote-type>130</remote-type>
            <local-name>[recalling_firm]</local-name>
            <parent-name>[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json]</parent-name>
            <remote-alias>results.Value.recalling_firm</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.report_date</remote-name>
            <remote-type>130</remote-type>
            <local-name>[report_date]</local-name>
            <parent-name>[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json]</parent-name>
            <remote-alias>results.Value.report_date</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.specific_food</remote-name>
            <remote-type>130</remote-type>
            <local-name>[specific_food]</local-name>
            <parent-name>[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json]</parent-name>
            <remote-alias>results.Value.specific_food</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.specific_reason</remote-name>
            <remote-type>130</remote-type>
            <local-name>[specific_reason]</local-name>
            <parent-name>[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json]</parent-name>
            <remote-alias>results.Value.specific_reason</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.state</remote-name>
            <remote-type>130</remote-type>
            <local-name>[state]</local-name>
            <parent-name>[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json]</parent-name>
            <remote-alias>results.Value.state</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.status</remote-name>
            <remote-type>130</remote-type>
            <local-name>[status]</local-name>
            <parent-name>[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json]</parent-name>
            <remote-alias>results.Value.status</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.termination_date</remote-name>
            <remote-type>130</remote-type>
            <local-name>[termination_date]</local-name>
            <parent-name>[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json]</parent-name>
            <remote-alias>results.Value.termination_date</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.units</remote-name>
            <remote-type>130</remote-type>
            <local-name>[units]</local-name>
            <parent-name>[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json]</parent-name>
            <remote-alias>results.Value.units</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>results.Value.voluntary_mandated</remote-name>
            <remote-type>130</remote-type>
            <local-name>[voluntary_mandated]</local-name>
            <parent-name>[food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json]</parent-name>
            <remote-alias>results.Value.voluntary_mandated</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at food-enforcement_FOODTYPE_AND_REASON_RR_UNITS.json level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per results]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([results Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at results level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Address 1' datatype='string' name='[address_1]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.address_1</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Address 2' datatype='string' name='[address_2]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.address_2</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Boxes' datatype='string' name='[boxes]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.boxes</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Cases' datatype='string' name='[cases]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.cases</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Center Classification Date' datatype='string' name='[center_classification_date]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.center_classification_date</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='City' datatype='string' name='[city]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.city</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Classification' datatype='string' name='[classification]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.classification</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Code Info' datatype='string' name='[code_info]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.code_info</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.country</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Distribution Pattern' datatype='string' name='[distribution_pattern]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.distribution_pattern</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Event Id' datatype='string' name='[event_id]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.event_id</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='General Food' datatype='string' name='[general_food]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.general_food</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Initial Firm Notification' datatype='string' name='[initial_firm_notification]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.initial_firm_notification</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Postal Code' datatype='string' name='[postal_code]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.postal_code</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Product Description' datatype='string' name='[product_description]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.product_description</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Product Quantity' datatype='string' name='[product_quantity]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.product_quantity</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Product Type' datatype='string' name='[product_type]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.product_type</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Reason' datatype='string' name='[reason]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.reason</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Reason For Recall' datatype='string' name='[reason_for_recall]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.reason_for_recall</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Recall Initiation Date' datatype='real' datatype-customized='true' name='[recall_initiation_date]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>results.Value.recall_initiation_date</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Recall Number' datatype='string' name='[recall_number]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.recall_number</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Recalling Firm' datatype='string' name='[recalling_firm]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.recalling_firm</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Report Date' datatype='string' name='[report_date]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.report_date</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[results Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>results.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Specific Food' datatype='string' name='[specific_food]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.specific_food</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Specific Reason' datatype='string' name='[specific_reason]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.specific_reason</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='State' datatype='string' name='[state]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.state</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.status</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Termination Date' datatype='string' name='[termination_date]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.termination_date</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Units' datatype='string' name='[units]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.units</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Voluntary Mandated' datatype='string' name='[voluntary_mandated]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>results.Value.voluntary_mandated</run>
          </formatted-text>
        </desc>
      </column>
      <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
      <column-instance column='[postal_code]' derivation='None' name='[none:postal_code:nk]' pivot='key' type='nominal' />
      <group hidden='true' name='[Inclusions (Country,Postal Code)]' name-style='unqualified' user:auto-column='include'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:country:nk]' />
          <groupfilter function='level-members' level='[none:postal_code:nk]' />
        </groupfilter>
      </group>
      <folder name='Results' role='dimensions'>
        <folder-item name='[address_1]' type='field' />
        <folder-item name='[address_2]' type='field' />
        <folder-item name='[boxes]' type='field' />
        <folder-item name='[cases]' type='field' />
        <folder-item name='[center_classification_date]' type='field' />
        <folder-item name='[city]' type='field' />
        <folder-item name='[classification]' type='field' />
        <folder-item name='[code_info]' type='field' />
        <folder-item name='[country]' type='field' />
        <folder-item name='[distribution_pattern]' type='field' />
        <folder-item name='[event_id]' type='field' />
        <folder-item name='[general_food]' type='field' />
        <folder-item name='[initial_firm_notification]' type='field' />
        <folder-item name='[postal_code]' type='field' />
        <folder-item name='[product_description]' type='field' />
        <folder-item name='[product_quantity]' type='field' />
        <folder-item name='[product_type]' type='field' />
        <folder-item name='[reason]' type='field' />
        <folder-item name='[reason_for_recall]' type='field' />
        <folder-item name='[recall_initiation_date]' type='field' />
        <folder-item name='[recall_number]' type='field' />
        <folder-item name='[recalling_firm]' type='field' />
        <folder-item name='[report_date]' type='field' />
        <folder-item name='[results Index (generated)]' type='field' />
        <folder-item name='[specific_food]' type='field' />
        <folder-item name='[specific_reason]' type='field' />
        <folder-item name='[state]' type='field' />
        <folder-item name='[status]' type='field' />
        <folder-item name='[termination_date]' type='field' />
        <folder-item name='[units]' type='field' />
        <folder-item name='[voluntary_mandated]' type='field' />
      </folder>
      <folder name='food-enforcement FOODTYPE AND REASON RR UNITS' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.699284' measure-ordering='alphabetic' measure-percentage='0.300716' show-structure='false' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Reino Unido&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Detection of Blue Bell Ice Cream Recall'>
      <table>
        <view>
          <datasources>
            <datasource caption='food-enforcement' name='federated.0spq67m0b2qmsk18pec441utz9ht' />
          </datasources>
          <datasource-dependencies datasource='federated.0spq67m0b2qmsk18pec441utz9ht'>
            <column-instance column='[product_quantity]' derivation='None' name='[none:product_quantity:nk]' pivot='key' type='nominal' />
            <column-instance column='[reason_for_recall]' derivation='None' name='[none:reason_for_recall:nk]' pivot='key' type='nominal' />
            <column-instance column='[recall_initiation_date]' derivation='None' name='[none:recall_initiation_date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[recalling_firm]' derivation='None' name='[none:recalling_firm:nk]' pivot='key' type='nominal' />
            <column caption='Product Quantity' datatype='string' name='[product_quantity]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.product_quantity</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Reason For Recall' datatype='string' name='[reason_for_recall]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.reason_for_recall</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Recall Initiation Date' datatype='real' datatype-customized='true' name='[recall_initiation_date]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>results.Value.recall_initiation_date</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Recalling Firm' datatype='string' name='[recalling_firm]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.recalling_firm</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0spq67m0b2qmsk18pec441utz9ht].[none:recall_initiation_date:ok]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150302.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150303.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150306.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150309.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150311.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150312.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150313.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150315.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150316.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150317.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150318.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150319.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150320.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150321.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150322.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150323.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150324.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150325.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150326.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150327.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150329.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150330.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150331.0' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0spq67m0b2qmsk18pec441utz9ht].[none:recall_initiation_date:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>([federated.0spq67m0b2qmsk18pec441utz9ht].[none:recall_initiation_date:ok] / ([federated.0spq67m0b2qmsk18pec441utz9ht].[none:recalling_firm:nk] / ([federated.0spq67m0b2qmsk18pec441utz9ht].[none:reason_for_recall:nk] / [federated.0spq67m0b2qmsk18pec441utz9ht].[none:product_quantity:nk])))</rows>
        <cols />
      </table>
    </worksheet>
    <worksheet name='Recalls Per State'>
      <table>
        <view>
          <datasources>
            <datasource caption='food-enforcement_FOODTYPE_AND_REASON_RR_UNITS' name='federated.1ihehzv1bfnjkh1fjtkjd1d2bexx' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1ihehzv1bfnjkh1fjtkjd1d2bexx'>
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.country</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[state]' derivation='None' name='[none:state:nk]' pivot='key' type='nominal' />
            <column caption='State' datatype='string' name='[state]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.state</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:country:nk]'>
            <groupfilter function='member' level='[none:country:nk]' member='&quot;United States&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:country:nk]' />
              <lod column='[federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:state:nk]' />
              <size column='[federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[sum:Number of Records:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[Latitude (generated)]</rows>
        <cols>[federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Recalls Per State Normalized by Farmland Area'>
      <table>
        <view>
          <datasources>
            <datasource caption='Normalized by Farmland (Events per State)' name='federated.0ejb3570w2pzii1ckul1s0fclavh' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0ejb3570w2pzii1ckul1s0fclavh'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' name='[Records Normalized by Area of Farmland, There are X product recalls per 1000 acres of farmland]' role='measure' type='quantitative' />
            <column datatype='string' name='[State (Farmland)]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[State (Farmland)]' derivation='None' name='[none:State (Farmland):nk]' pivot='key' type='nominal' />
            <column-instance column='[Records Normalized by Area of Farmland, There are X product recalls per 1000 acres of farmland]' derivation='Sum' name='[sum:Records Normalized by Area of Farmland, There are X product recalls per 1000 acres of farmland:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0ejb3570w2pzii1ckul1s0fclavh].[none:State (Farmland):nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:State (Farmland):nk]' />
              <groupfilter function='member' level='[none:State (Farmland):nk]' member='%null%' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0ejb3570w2pzii1ckul1s0fclavh].[none:State (Farmland):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.0ejb3570w2pzii1ckul1s0fclavh].[none:Country:nk]' />
              <lod column='[federated.0ejb3570w2pzii1ckul1s0fclavh].[none:State (Farmland):nk]' />
              <size column='[federated.0ejb3570w2pzii1ckul1s0fclavh].[sum:Records Normalized by Area of Farmland, There are X product recalls per 1000 acres of farmland:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0ejb3570w2pzii1ckul1s0fclavh].[Latitude (generated)]</rows>
        <cols>[federated.0ejb3570w2pzii1ckul1s0fclavh].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Recalls Per State Normalized by Income'>
      <table>
        <view>
          <datasources>
            <datasource caption='Normalized by Income (Events per State)' name='federated.1f84uix04q0ivo1a61lum1t4v6bi' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1f84uix04q0ivo1a61lum1t4v6bi'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' name='[Records Normalized by Income (For every $1 mill produced, there are X recalls)]' role='measure' type='quantitative' />
            <column datatype='string' name='[State (Income)]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[State (Income)]' derivation='None' name='[none:State (Income):nk]' pivot='key' type='nominal' />
            <column-instance column='[Records Normalized by Income (For every $1 mill produced, there are X recalls)]' derivation='Sum' name='[sum:Records Normalized by Income (For every $1 mill produced, there are X recalls):qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1f84uix04q0ivo1a61lum1t4v6bi].[none:State (Income):nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:State (Income):nk]' />
              <groupfilter function='member' level='[none:State (Income):nk]' member='%null%' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1f84uix04q0ivo1a61lum1t4v6bi].[none:State (Income):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.1f84uix04q0ivo1a61lum1t4v6bi].[none:Country:nk]' />
              <lod column='[federated.1f84uix04q0ivo1a61lum1t4v6bi].[none:State (Income):nk]' />
              <size column='[federated.1f84uix04q0ivo1a61lum1t4v6bi].[sum:Records Normalized by Income (For every $1 mill produced, there are X recalls):qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1f84uix04q0ivo1a61lum1t4v6bi].[Latitude (generated)]</rows>
        <cols>[federated.1f84uix04q0ivo1a61lum1t4v6bi].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Sheet 4'>
      <table>
        <view>
          <datasources>
            <datasource caption='food-enforcement_FOODTYPE_AND_REASON_RR_UNITS' name='federated.1ihehzv1bfnjkh1fjtkjd1d2bexx' />
          </datasources>
          <datasource-dependencies datasource='federated.1ihehzv1bfnjkh1fjtkjd1d2bexx'>
            <column-instance column='[product_quantity]' derivation='None' name='[none:product_quantity:nk]' pivot='key' type='nominal' />
            <column-instance column='[recall_initiation_date]' derivation='None' name='[none:recall_initiation_date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[units]' derivation='None' name='[none:units:nk]' pivot='key' type='nominal' />
            <column caption='Product Quantity' datatype='string' name='[product_quantity]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.product_quantity</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Recall Initiation Date' datatype='real' datatype-customized='true' name='[recall_initiation_date]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>results.Value.recall_initiation_date</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Units' datatype='string' name='[units]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.units</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:recall_initiation_date:ok]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150302.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150303.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150306.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150309.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150311.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150312.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150313.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150315.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150316.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150317.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150318.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150319.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150320.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150321.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150322.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150323.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150324.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150325.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150326.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150327.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150329.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150330.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20150331.0' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:recall_initiation_date:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>([federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:recall_initiation_date:ok] / ([federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:units:nk] / [federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:product_quantity:nk]))</rows>
        <cols />
      </table>
    </worksheet>
    <worksheet name='Sheet 6'>
      <table>
        <view>
          <datasources>
            <datasource caption='food-enforcement' name='federated.0spq67m0b2qmsk18pec441utz9ht' />
          </datasources>
          <datasource-dependencies datasource='federated.0spq67m0b2qmsk18pec441utz9ht'>
            <column-instance column='[product_quantity]' derivation='None' name='[none:product_quantity:nk]' pivot='key' type='nominal' />
            <column-instance column='[reason_for_recall]' derivation='None' name='[none:reason_for_recall:nk]' pivot='key' type='nominal' />
            <column-instance column='[recall_initiation_date]' derivation='None' name='[none:recall_initiation_date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[recalling_firm]' derivation='None' name='[none:recalling_firm:nk]' pivot='key' type='nominal' />
            <column caption='Product Quantity' datatype='string' name='[product_quantity]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.product_quantity</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Reason For Recall' datatype='string' name='[reason_for_recall]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.reason_for_recall</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Recall Initiation Date' datatype='real' datatype-customized='true' name='[recall_initiation_date]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>results.Value.recall_initiation_date</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Recalling Firm' datatype='string' name='[recalling_firm]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.recalling_firm</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0spq67m0b2qmsk18pec441utz9ht].[none:recall_initiation_date:ok]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20121204.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20121205.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20121206.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20121207.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20121208.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20121210.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20121211.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20121213.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20121214.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20121217.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20121218.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20121219.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20121220.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20121221.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20121222.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20121224.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20121226.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20121227.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20121228.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20121231.0' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0spq67m0b2qmsk18pec441utz9ht].[none:recall_initiation_date:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>([federated.0spq67m0b2qmsk18pec441utz9ht].[none:recall_initiation_date:ok] / ([federated.0spq67m0b2qmsk18pec441utz9ht].[none:recalling_firm:nk] / ([federated.0spq67m0b2qmsk18pec441utz9ht].[none:product_quantity:nk] / [federated.0spq67m0b2qmsk18pec441utz9ht].[none:reason_for_recall:nk])))</rows>
        <cols />
      </table>
    </worksheet>
    <worksheet name='Sheet 7'>
      <table>
        <view>
          <datasources>
            <datasource caption='food-enforcement_FOODTYPE_AND_REASON_RR_UNITS' name='federated.1ihehzv1bfnjkh1fjtkjd1d2bexx' />
          </datasources>
          <datasource-dependencies datasource='federated.1ihehzv1bfnjkh1fjtkjd1d2bexx'>
            <column-instance column='[product_quantity]' derivation='None' name='[none:product_quantity:nk]' pivot='key' type='nominal' />
            <column-instance column='[reason]' derivation='None' name='[none:reason:nk]' pivot='key' type='nominal' />
            <column-instance column='[recall_initiation_date]' derivation='None' name='[none:recall_initiation_date:ok]' pivot='key' type='ordinal' />
            <column caption='Product Quantity' datatype='string' name='[product_quantity]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.product_quantity</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Reason' datatype='string' name='[reason]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>results.Value.reason</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Recall Initiation Date' datatype='real' datatype-customized='true' name='[recall_initiation_date]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>results.Value.recall_initiation_date</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:recall_initiation_date:ok]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20130201.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20130204.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20130205.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20130206.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20130207.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20130208.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20130211.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20130212.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20130213.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20130214.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20130215.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20130217.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20130219.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20130220.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20130221.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20130222.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20130225.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20130226.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20130227.0' />
              <groupfilter function='member' level='[none:recall_initiation_date:ok]' member='20130228.0' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:recall_initiation_date:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>([federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:recall_initiation_date:ok] / ([federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:reason:nk] / [federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:product_quantity:nk]))</rows>
        <cols />
      </table>
    </worksheet>
  </worksheets>
  <windows source-height='93'>
    <window class='worksheet' name='Recalls Per State'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[sum:Number of Records:qk]' type='size' />
          </strip>
        </edge>
      </cards>
    </window>
    <window class='worksheet' name='Recalls Per State Normalized by Income'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1f84uix04q0ivo1a61lum1t4v6bi].[sum:Records Normalized by Income (For every $1 mill produced, there are X recalls):qk]' type='size' />
          </strip>
        </edge>
      </cards>
    </window>
    <window class='worksheet' name='Recalls Per State Normalized by Farmland Area'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0ejb3570w2pzii1ckul1s0fclavh].[sum:Records Normalized by Area of Farmland, There are X product recalls per 1000 acres of farmland:qk]' type='size' />
          </strip>
        </edge>
      </cards>
    </window>
    <window class='worksheet' name='Sheet 4'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
    </window>
    <window class='worksheet' name='Detection of Blue Bell Ice Cream Recall'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0spq67m0b2qmsk18pec441utz9ht].[none:reason_for_recall:nk]</field>
            <field>[federated.0spq67m0b2qmsk18pec441utz9ht].[none:recalling_firm:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' maximized='true' name='Sheet 6'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <node-selection select-tuples='false'>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.0spq67m0b2qmsk18pec441utz9ht].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20121204.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.0spq67m0b2qmsk18pec441utz9ht].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20121205.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.0spq67m0b2qmsk18pec441utz9ht].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20121206.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.0spq67m0b2qmsk18pec441utz9ht].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20121207.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.0spq67m0b2qmsk18pec441utz9ht].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20121208.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.0spq67m0b2qmsk18pec441utz9ht].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20121210.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.0spq67m0b2qmsk18pec441utz9ht].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20121211.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.0spq67m0b2qmsk18pec441utz9ht].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20121213.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.0spq67m0b2qmsk18pec441utz9ht].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20121214.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.0spq67m0b2qmsk18pec441utz9ht].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20121217.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.0spq67m0b2qmsk18pec441utz9ht].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20121218.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.0spq67m0b2qmsk18pec441utz9ht].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20121219.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.0spq67m0b2qmsk18pec441utz9ht].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20121220.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.0spq67m0b2qmsk18pec441utz9ht].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20121221.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.0spq67m0b2qmsk18pec441utz9ht].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20121222.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.0spq67m0b2qmsk18pec441utz9ht].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20121224.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.0spq67m0b2qmsk18pec441utz9ht].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20121226.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.0spq67m0b2qmsk18pec441utz9ht].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20121227.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.0spq67m0b2qmsk18pec441utz9ht].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20121228.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.0spq67m0b2qmsk18pec441utz9ht].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20121231.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
          </node-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.0spq67m0b2qmsk18pec441utz9ht].[none:product_quantity:nk]</field>
            <field>[federated.0spq67m0b2qmsk18pec441utz9ht].[none:reason_for_recall:nk]</field>
            <field>[federated.0spq67m0b2qmsk18pec441utz9ht].[none:recall_initiation_date:ok]</field>
            <field>[federated.0spq67m0b2qmsk18pec441utz9ht].[none:recalling_firm:nk]</field>
            <field>[federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:product_quantity:nk]</field>
            <field>[federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:recall_initiation_date:ok]</field>
            <field>[federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:specific_food:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Sheet 7'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <node-selection select-tuples='false'>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20130201.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20130204.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20130205.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20130206.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20130207.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20130208.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20130211.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20130212.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20130213.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20130214.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20130215.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20130217.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20130219.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20130220.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20130221.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20130222.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20130225.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20130226.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20130227.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:recall_initiation_date:ok]</field>
                </fields>
                <multibucket>
                  <bucket>20130228.0</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
          </node-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:product_quantity:nk]</field>
            <field>[federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:reason:nk]</field>
            <field>[federated.1ihehzv1bfnjkh1fjtkjd1d2bexx].[none:recall_initiation_date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Detection of Blue Bell Ice Cream Recall' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 4' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 6' width='192'>
      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
      o20FGAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Sheet 7' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
